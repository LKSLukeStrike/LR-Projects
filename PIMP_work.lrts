//region Classes // due to JS we cannot use Class so ... Css // Cfk are fake classes
function addElemCfk(elem, cfk) { // multiple cfk allowed in one string
	debugFA("addElemCfk", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		addElemCfk(elem, cfk)
	})} // single elem from here
	cfk.split(Str_Space).forEach(function(cfk) {
		let css = Key_CfkCss[cfk]
		if (Arr_THMCFK.includes(cfk)) { // add the theme if any
			css = css + Str_Space + getElemValue(sheet, REQ_THMPRF)
		}
		addElemCss(elem, css) // /!\ has to be first
		if (hasElemCfk(elem, Cfk_Dotted10)) { // mimics on related dot
			if (cfk != Cfk_Undisplayed) { // except for Displayed
				addElemCss(sheet, val2dotItem(elem), css)
			}
		}
	})
	return cfk
}
function remElemCfk(elem, cfk) { // multiple cfk allowed in one string
	debugFA("remElemCfk", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		remElemCfk(elem, cfk)
	})} // single elem from here
	cfk.split(Str_Space).forEach(function(cfk) {
		let css = Key_CfkCss[cfk]
		if (Arr_THMCFK.includes(cfk)) { // add the theme if any
			css = css + Str_Space + getElemValue(sheet, REQ_THMPRF)
		}
		if (hasElemCfk(elem, Cfk_Dotted10)) { // mimics on related dot
			if (cfk != Cfk_Undisplayed) { // except for Displayed
				remElemCss(sheet, val2dotItem(elem), css)
			}
		}
		remElemCss(elem, css) // /!\ has to be last
	})
	Object.keys(Key_CfkCss).forEach(function(cfk) { // restore any "broken" Cfk
		if (hasElemCfk(elem, cfk)) {
			addElemCfk(elem, cfk)
		}
	})
	return cfk
}
function hasElemCfk(elem, cfk) { // multiple cfk allowed in one string
	debugFA("hasElemCfk", arguments)
	return hasElemCss(elem, cfk) // check only Cfk, not their Css
}
function getElemCss(elem) {
	debugFA("getElemCss", arguments)
	return elem.getClasses()
}
//endregion
