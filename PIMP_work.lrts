//region Elems Attributes
function getElemParent(elem) {
	debugFA("getElemParent", arguments)
	return elem.parent()
}
function getElemChild(elem, child) {
	debugFA("getElemChild", arguments)
	return elem.find(child)
}
function getElemSheet(elem) {
	debugFA("getElemSheet", arguments)
	return elem.sheet()
}
function getElemName(elem) {
	debugFA("getElemName", arguments)
	return elem.name()
}
function getElemId(elem) {
	debugFA("getElemId", arguments)
	return elem.id()
}
function getElemIndex(elem) {
	debugFA("getElemIndex", arguments)
	return elem.index()
}
function getElemTypeof(elem) {
	debugFA("getElemTypeof", arguments)
	return typeof elem
}
function getElemChildren(elem) { // return children ids (get them with find)
	debugFA("getElemChildren", arguments)
	const elm_value = getElemValue(elem)
	if (notElem(elm_value)) {return []} // not an elem so no children
	return Object.keys(elm_value)
}
//endregion

//region Elems Values
function getElemValue(elem) {
	debugFA("getElemValue", arguments)
	const elm_value = elem.value()
	return Number.isNaN(Number(elm_value)) ? // right type
		elm_value : Number(elm_value)
}
//endregion

//region Elems classes
function getElemCss(elem) {
	debugFA("getElemCss", arguments)
	let result = []
	try {result = elem.getClasses()} // skip error when no classes
	finally {}
	return result
}
//endregion
