function initCharacsRep(sheet) {
	const cky_characslck  = getElem(sheet, rsoValue(Ckb_CharacsLck, Str_PFXCKB, Str_PFXCKY))
	const Vis_Name        = rsoValue(Val_Name, Str_PFXVAL, Str_PFXVIS)

	triggerElem(cky_characslck) // triggers lock to set edit or view mode
	
	Arr_CharacsReps.forEach(function(rep_item) { // loop on repeaters
		const rep_characs = getElem(sheet, rep_item)

		onuElemDo(rep_characs, function(elem) { // handle characs rep modifications
			initCharacsRep(sheet)
		})

		eachRepItemDo(rep_characs, Chc_CharacColor, function(chc_characcolor) {
			setElemTooltip(chc_characcolor, Tip_Color) // tooltip for color choices
		})
	
		Arr_CharacsVals.forEach(function(val_item) { // reflects vals on vis
			const Vis_Item = rsoValue(val_item, Str_PFXVAL, Str_PFXVIS)
			
			onuRepItemDo(rep_characs, val_item, function(val_elem) {
				const vis_elem  = getRepElemRelative(rep_characs, val_elem, Vis_Item)
				const val_value = getElemValue(val_elem)
				let   vis_value = val_item == Max_CharacPts ?
					0 : "" // default value
				vis_value = val_value ?
					val_value : vis_value // no default value, val value instead
				setElemValue(vis_elem, vis_value)
			})
		})
	
		onuRepItemDo(rep_characs, Vis_Name, function(vis_name) { // handle characs usability
			const val_name  = getRepElemRelative(rep_characs, vis_name, Val_Name)

			function setCharacColor(elem) { // set a carac elem color
				const chc_characcolor  = getRepElemRelative(rep_characs, elem, Chc_CharacColor)
				
				Tables.get(Tbl_CharacsColors).each(function(line) { // remove all colors
					const css_color = line[Tbc_Id]
					remElemCss(elem, css_color)
				})
				
				addElemCss(elem, getElemValue(chc_characcolor)) // set the current color
			}

			addElemUsable(vis_name)
			setCharacColor(val_name)
			setCharacColor(vis_name)
			
			onuRepItemDo(rep_characs, Chc_CharacColor, function(chc_characcolor) {
				const val_name  = getRepElemRelative(rep_characs, chc_characcolor, Val_Name)
				const vis_name  = getRepElemRelative(rep_characs, chc_characcolor, Vis_Name)

				setCharacColor(val_name)
				setCharacColor(vis_name)
			})
			
			oncRepItemDo(rep_characs, Vis_Name, function(vis_name) { // click on vis item
				const val_charname   = getElem(sheet, Val_CharName)
				const val_characpts  = getRepElemRelative(rep_characs, vis_name, Val_CharacPts)
				const val_typedices  = getElem(sheet, Val_TypeDices)
				const val_rollmod    = getElem(sheet, Val_RollMod)
				const Cky_RollVis    = rsoValue(Ckb_RollVis, Str_PFXCKB, Str_PFXCKY)
				const str_visibility = getElemValue(getElem(sheet, Cky_RollVis)) ?
					"gmonly" : "visible"
				const rna_charac     = getElemValue(val_charname)
						             + " ["
									 + cpaValue(getElemValue(vis_name))
						             + " ["
									 + "" + getElemValue(val_characpts) + ""
									 + psiValue(getElemValue(val_rollmod))
									 + "]"
									 + "]"

				const dice = Dice.create("" + getElemValue(val_characpts) + "")
					.add(getElemValue(val_rollmod))
					.minus(getElemValue(val_typedices))

				const roll = new RollBuilder(sheet)
					.visibility(str_visibility)
					.expression(dice)
					.title(rna_charac)
					.roll()
					
				initDicesRoll(sheet)
			})
		})

		initRepRowPtsDoMax(rep_characs, Row_CharacPts // init all pts blocks
			, function(max_elem) {
				computeTotCharacMax(sheet)
			}
		)

		initRepCkbDoDe(rep_characs, Ckb_Talent // init all talent checkboxes
			, function(ckb_elem) {
				computeRollMod(sheet)
			}
			, function(ckb_elem) {
				computeRollMod(sheet)
			}
		)
		
		oncRepItemDo(rep_characs, Del_Entry, function(elem) { // child del button
			const child = getElemIndex(elem)
			delCharacsChildAt(sheet, rep_characs, child)
		})
		
		oncRepItemDo(rep_characs, New_Entry, function(elem) { // child new button
			const child = getElemIndex(elem)
			newCharacsChildAt(sheet, rep_characs, child)
		})
		
		oncRepItemDo(rep_characs, Inf_Entry, function(elem) { // child inf button
			const child           = getElemIndex(elem)
			const val_charname    = getElem(sheet, Val_CharName)
			const val_name        = getRepElemRelative(rep_characs, elem, Val_Name)
			const max_characpts   = getRepElemRelative(rep_characs, elem, Max_CharacPts)
			const val_characpts   = getRepElemRelative(rep_characs, elem, Val_CharacPts)
			const val_talent      = getRepElemRelative(rep_characs, elem, Val_Talent)
			const val_rolladj     = getElem(sheet, Val_RollAdj)
			const bna_charac      = getElemValue(val_charname)
								  + " [" + cpaValue(getElemValue(val_name)) + "]"

			Bindings.clear(Inf_Entry)
			Bindings.add(bna_charac, Inf_Entry, Bnd_Charac, function() {
				return {
					Val_Name      : getElemValue(val_name),
					Max_CharacPts : getElemValue(max_characpts),
					Val_CharacPts : getElemValue(val_characpts),
					Val_Talent    : getElemValue(val_talent),
					Val_RollAdj   : getElemValue(val_rolladj),
				}
			})
			Bindings.send(sheet, bna_charac)
		})

		Object.keys(Tpl_Charac).forEach(function(val_item) {
			eachRepItemDo(rep_characs, val_item, function(val_elem) {
				triggerElem(val_elem) // triggers vals to handle vals added by templates
			})
		})
	})

	initDicesRoll(sheet) // cleanup roll modifiers
}
