//region LR_Operators
//region LR_Operators Random
function rndValue(value_min, value_max) { // random value (integer, inclusive)
	debugFA("rndValue", arguments)
	value_min = Math.ceil(value_min)
	value_max = Math.floor(value_max)
	return Math.floor(Math.random() * (value_max - value_min + 1) + value_min)
}
//endregion

//region LR_Operators Min/Max
function minValue(value_one, value_two) { // minimum value
	debugFA("minValue", arguments)
	return value_one < value_two ?
		value_one : value_two
}
function maxValue(value_one, value_two) { // maximum value
	debugFA("maxValue", arguments)
	return value_one > value_two ?
		value_one : value_two
}
//endregion

//region LR_Operators Mix
function mxlValue(value_one, value_two) { // minimum mix value
	debugFA("mxlValue", arguments)
	return Math.floor((value_one + value_two) / 2)
}
function mxhValue(value_one, value_two) { // maximum mix value
	debugFA("mxhValue", arguments)
	return Math.ceil((value_one + value_two) / 2)
}
//endregion

//region LR_Operators Compare
function yeqValue(value_one, value_two) { // if equal
	debugFA("yeqValue", arguments)
	return value_one === value_two
}
function neqValue(value_one, value_two) { // if not equal
	debugFA("neqValue", arguments)
	return ! yeqValue(value_one, value_two)
}
function yizValue(value_one) { // if int zero
	debugFA("yizValue", arguments)
	return yeqValue(value_one, Int_Zero)
}
function yzpValue(value_one) { // if int zero positive
	debugFA("yzpValue", arguments)
	return ygeValue(value_one, Int_Zero)
}
function yppValue(value_one) { // if int pure positive
	debugFA("yppValue", arguments)
	return ygtValue(value_one, Int_Zero)
}
function yznValue(value_one) { // if int zero negative
	debugFA("yznValue", arguments)
	return yleValue(value_one, Int_Zero)
}
function ypnValue(value_one) { // if int pure negative
	debugFA("ypnValue", arguments)
	return yltValue(value_one, Int_Zero)
}
function nizValue(value_one) { // if not int zero
	debugFA("nizValue", arguments)
	return ! yizValue(value_one)
}
function ysnValue(value_one) { // if string none
	debugFA("ysnValue", arguments)
	return yeqValue(value_one, Str_None)
}
function nsnValue(value_one) { // if not string none
	debugFA("nsnValue", arguments)
	return ! ysnValue(value_one)
}
function yanValue(value_one) { // if array none
	debugFA("yanValue", arguments)
	return yeqValue(value_one, Arr_None)
}
function nanValue(value_one) { // if not array none
	debugFA("nanValue", arguments)
	return ! yanValue(value_one)
}
function yonValue(value_one) { // if object none
	debugFA("yonValue", arguments)
	return yeqValue(value_one, Obj_None)
}
function nonValue(value_one) { // if not object none
	debugFA("nonValue", arguments)
	return ! yonValue(value_one)
}
function yltValue(value_one, value_two) { // if lower than
	debugFA("yltValue", arguments)
	return value_one <  value_two
}
function ygtValue(value_one, value_two) { // if greater than
	debugFA("ygtValue", arguments)
	return value_one >  value_two
}
function yleValue(value_one, value_two) { // if lower or equal
	debugFA("yleValue", arguments)
	return value_one <= value_two
}
function ygeValue(value_one, value_two) { // if greater or equal
	debugFA("ygeValue", arguments)
	return value_one >= value_two
}
//endregion

//region LR_Operators Includes
function ysiValue(str_value, value_one) { // if string includes
	debugFA("ysiValue", arguments)
	return str_value.includes(value_one)
}
function nsiValue(str_value, value_one) { // if not string includes
	debugFA("nsiValue", arguments)
	return ! ysiValue(str_value, value_one)
}
function yaiValue(arr_value, value_one) { // if array includes
	debugFA("yaiValue", arguments)
	return arr_value.includes(value_one)
}
function naiValue(arr_value, value_one) { // if not array includes
	debugFA("naiValue", arguments)
	return ! yaiValue(arr_value, value_one)
}
//endregion

//region LR_Operators Replace
function rsoValue(str_value, value_one, value_two) { // replace a string once
	debugFA("rsoValue", arguments)
	return str_value.replace(value_one, value_two)
}
function rsaValue(str_value, value_one, value_two) { // replace a string all
	debugFA("rsaValue", arguments)
	return str_value.replaceAll(value_one, value_two)
}
//endregion

//region LR_Operators Generate
function gaiValue(_int_from, _int_lenght, _int_step) { // generate array of int
	debugFA("gaiValue", arguments)
	const int_from   = Int_Zero
	const int_lenght = Int_POne
	const int_step   = Int_POne
	try  {int_from   = tryArg(_int_from)}	finally {}
	try  {int_lenght = tryArg(_int_lenght)}	finally {}
	try  {int_step   = tryArg(_int_step)}	finally {}

	let result = []
	while (yppValue(int_lenght)) {
		result.push(int_from)
		int_from   += int_step
		int_lenght -= Int_POne
	}
	return result
}
//endregion

//region LR_Operators Prefix/Suffix
function pfxValue(value_one, value_str) { // prefix with a string
	debugFA("pfxValue", arguments)
	return value_str + value_one
}
function sfxValue(value_one, value_str) { // suffix with a string
	debugFA("sfxValue", arguments)
	return value_one + value_str
}
//endregion

//region LR_Operators Enclose
function sqmValue(value_one) { // single quotes
	debugFA("sqmValue", arguments)
	return Str_SQMark + value_one + Str_SQMark
}
function dqmValue(value_one) { // double quotes
	debugFA("dqmValue", arguments)
	return Str_DQMark + value_one + Str_DQMark
}
//endregion

//region LR_Operators Cases
const Yes_FromLC        = true
const Not_FromLC        = false
const Dft_FromLC        = Not_FromLC
function lcaValue(value_one) { // lower case all
	debugFA("lcaValue", arguments)
	return value_one.toLowerCase()
}
function ucaValue(value_one) { // upper case all
	debugFA("ucaValue", arguments)
	return value_one.toUpperCase()
}
function cpoValue(value_one, _yes_fromlc) { // capitalize once
	debugFA("cpoValue", arguments)
	const yes_fromlc = Dft_FromLC
	try  {yes_fromlc = tryArg(_yes_fromlc)}	finally {}

	if (yes_fromlc) {
		value_one = lcaValue(value_one)
	}
	return value_one.replace(/(^\w{1})|(\s+\w{1})/, function(letter) {
		return ucaValue(letter)
	})
}
function cpaValue(value_one, _yes_fromlc) { // capitalize all
	debugFA("cpaValue", arguments)
	const yes_fromlc = Dft_FromLC
	try  {yes_fromlc = tryArg(_yes_fromlc)}	finally {}

	if (yes_fromlc) {
		value_one = lcaValue(value_one)
	}
	return value_one.replace(/(^\w{1})|(\s+\w{1})/g, function(letter) {
		return ucaValue(letter)
	})
}
//endregion

//region LR_Operators Toggle
function tynValue(value_one) { // toggle yes/not (1/0)
	debugFA("tynValue", arguments)
	return value_one ?
		0 : 1
}
//endregion

//region LR_Operators Stringify
function strThing(thing, _yes_indent, _str_indentcur, _str_indentuse) { // str a thing
	debugFA("strThing", arguments)
	const yes_indent    = Dft_Indent // if do indent
	const str_indentcur = Str_None // current indentation
	const str_indentuse = Str_Tab // indentation string
	try  {yes_indent    = tryArg(_yes_indent)}		finally {}
	try  {str_indentcur = tryArg(_str_indentcur)}	finally {}
	try  {str_indentuse = tryArg(_str_indentuse)}	finally {}

	const str_newline = yes_indent ? // no newline if no indentation
		Str_Newline : Str_None
	str_indentcur = yes_indent ? // clear str_indentcur if no indentation
		str_indentcur : Str_None
	const str_indentnxt = yes_indent ? // for the next indentation
		str_indentcur + str_indentuse : Str_None
	let result = Str_None
	let obj_result = Str_None // result of an object entries
	let itm_result = Str_None // result of an object entry
	if (yesObject(thing)) {
		if (yesNull(thing)) { // null
			result = Str_Null
		} else if (yesArray(thing)) { // array
			result = sfxValue(result, Str_OArray)
			thing.forEach(function(itm) { // recursive
				itm_result = strThing(itm, yes_indent, str_indentnxt, str_indentuse)
				if (nsnValue(itm_result)) {
					obj_result = obj_result + str_newline + str_indentnxt + itm_result + Str_Comma + Str_Space
				}
			})
			if (nsnValue(obj_result)) {
				result = result + str_indentcur + obj_result + str_newline + str_indentcur
			}
			result = sfxValue(result, Str_CArray)
		} else { // object
			result = sfxValue(result, Str_OObject)
			Object.keys(thing).forEach(function(key) { // recursive
				itm_result = dqmValue(key) + Str_DDot + Str_Space
				itm_result = itm_result + strThing(thing[key], yes_indent, str_indentnxt, str_indentuse)
				if (nsnValue(itm_result)) {
					obj_result = obj_result + str_newline + str_indentnxt + itm_result + Str_Comma + Str_Space
				}
			})
			if (nsnValue(obj_result)) {
				result = result + str_indentcur + obj_result + str_newline + str_indentcur
			}
			result = sfxValue(result, Str_CObject)
		}
	} else {
		if (yesString(thing)) {
			result = dqmValue(thing)
		} else if (yesUndefined(thing)) {
			result = Str_Undefined
		} else {
			result = thing
		}
	}
	return result
}
//endregion

//region LR_Operators Related
function one2twoItem(item, prefix_one, prefix_two) { // one related two item
	debugFA("one2twoItem", arguments)
	return rsoValue(item, prefix_one, prefix_two)
}
function val2dotItem(item) { // val related dot item
	debugFA("val2dotItem", arguments)
	return one2twoItem(item, Str_PFXVAL, Str_PFXDOT)
}
function val2effItem(item) { // val related eff item
	debugFA("val2effItem", arguments)
	return one2twoItem(item, Str_PFXVAL, Str_PFXEFF)
}
function val2dxvItem(item) { // val related dxv item
	debugFA("val2dxvItem", arguments)
	return one2twoItem(item, Str_PFXVAL, Str_PFXDXV)
}
function val2chkItem(item) { // val related chk item
	debugFA("val2chkItem", arguments)
	return one2twoItem(item, Str_PFXVAL, Str_PFXCHK)
}
function chk2valItem(item) { // chk related val item
	debugFA("chk2valItem", arguments)
	return one2twoItem(item, Str_PFXCHK, Str_PFXVAL)
}
//endregion

//region LR_Operators Objects
function addObject(obj, key, val) { // add a key : val to an object
	debugFA("addObject", arguments)
	return obj[key] = val
}
function remObject(obj, key) { // remove a key : val from an object
	debugFA("remObject", arguments)
	return delete obj[key]
}
function gkvObject(obj, key) { // get the val of an object key
	debugFA("gkvObject", arguments)
	return obj[key]
}
function gokObject(obj) { // get object keys
	debugFA("gokObject", arguments)
	return Object.keys(obj)
}
function govObject(obj) { // get object values
	debugFA("govObject", arguments)
	return Object.values(obj)
}
function goeObject(obj) { // get object entries
	debugFA("goeObject", arguments)
	return Object.entries(obj)
}
function ykiObject(obj, key) { // if object includes key
	debugFA("ykiObject", arguments)
	return obj.hasOwnProperty(key)
}
function nkiObject(obj, key) { // if not object includes key
	debugFA("nkiObject", arguments)
	return ! ykiObject(obj, key)
}
//endregion
//endregion
