//region LR_Globals

//region LR_Constants
const Min_CARMAX = 1
const Max_CARMAX = 10
const Min_CARACT = 0
const Max_CARACT = Max_CARMAX
const Min_CAREFF = Min_CARACT
const Max_CAREFF = Max_CARACT
const Min_CARMOD = -Max_CARMAX
const Max_CARMOD = +Max_CARMAX

const Int_Zero		= 0
const Str_None		= ""
const Str_Space		= " "
const Str_Tab		= "\t"
const Str_Newline	= "\n"
const Infinity   = Number.MAX_SAFE_INTEGER

// Sheet Items prefixes /!\ respect this convention for the code to work
const Str_PFXDXV = "DxV_" // dot and value item (container)
const Str_PFXVAL = "Val_" // value item
const Str_PFXDOT = "Dot_" // dot item
const Str_PFXEFF = "Eff_" // effort item
const Str_PFXMOD = "Mod_" // modifier item
const Str_PFXREP = "Rep_" // repeater item
const Str_PFXCHC = "Chc_" // choice item
const Str_PFXCHK = "Chk_" // checkbox item (can also be a label/icon etc)
const Str_PFXFLD = "Fld_" // foldering item (can also be a label/icon etc)

// DxV Items display modes
const Str_DXVDOT = "dots"
const Str_DXVVAL = "vals"
const Str_DXVBTH = "both"
const Dft_DXVDFT = Str_DXVBTH
const Arr_DXVALW = [ // DxV Items allowed display modes
	Str_DXVDOT,
	Str_DXVVAL,
	Str_DXVBTH,
]
// Sheet Themes /!\ some items are REQuired on any sheet for the theme system to work on it
const REQ_THMOLD		= "REQ_THMOLD"		// previous theme
const REQ_THMPRF		= "REQ_THMPRF"		// choosen theme
const Css_TextPrimary	= "text-primary"
const Css_TextSecondary	= "text-secondary"
const Css_TextSuccess	= "text-success"
const Css_TextDanger	= "text-danger"
const Css_TextWarning	= "text-warning"
const Css_TextInfo		= "text-info"
const Css_TextLight		= "text-light"
const Css_TextDark		= "text-dark"
const Css_TextMuted		= "text-muted"
const Css_TextWhite		= "text-white"
const Dft_THMDFT		= Css_TextWarning
const Arr_THMALW		= [ // Themes allowed
	Css_TextPrimary,
	Css_TextSecondary,
	Css_TextSuccess,
	Css_TextDanger,
	Css_TextWarning,
	Css_TextInfo,
	Css_TextLight,
	Css_TextDark,
	Css_TextMuted,
	Css_TextWhite,
]
//endregion

//region Events // due to JS we cannot use Event and Function so ... Evt and Fct
const Evt_Click  = "click"
const Evt_Update = "update"
function onSheetItemEvtFct(sheet, item, evt, fct) {
	debugFA("onSheetItemEvtFct", arguments)
	return sheet.get(item).on(evt, fct)
}
function onSheetItemClickFct(sheet, item, fct) {
	debugFA("onSheetItemClickFct", arguments)
	return onSheetItemEvtFct(sheet, item, Evt_Click, fct)
}
function onSheetItemUpdateFct(sheet, item, fct) {
	debugFA("onSheetItemUpdateFct", arguments)
	return onSheetItemEvtFct(sheet, item, Evt_Update, fct)
}
//endregion

//region Values
function getSheetItemValue(sheet, item) {
	debugFA("getSheetItemValue", arguments)
	const itm_value = sheet.get(item).value()
	return Number.isNaN(Number(itm_value)) ? // right type
		itm_value : Number(itm_value)
}
function setSheetItemValue(sheet, item, itm_value) {
	debugFA("setSheetItemValue", arguments)
	if (Array.isArray(item)) {return item.forEach(function(item) { // recursive
		setSheetItemValue(sheet, item, itm_value)
	})} // single item from here
	itm_value = hasSheetItemPlussigned(sheet, item) && itm_value > 0 ? // add "+" ?
		pfxValue(itm_value, "+") : itm_value
	sheet.get(item).value(itm_value)
	setSheetItemDotted(sheet, item) // dotted representation if any
	return itm_value
}
function setSheetItemReplc(sheet, item, value_str, value_rpl) { // replace a string
	debugFA("setSheetItemReplc", arguments)
	if (Array.isArray(item)) {return item.forEach(function(item) { // recursive
		setSheetItemReplc(sheet, item, value_str, value_rpl)
	})} // single item from here
	const itm_value = rsaValue(getSheetItemValue(sheet, item), value_str, value_rpl)
	return setSheetItemValue(sheet, item, itm_value)
}
function hasSheetItemValue(sheet, item, itm_value) {
	debugFA("hasSheetItemValue", arguments)
	return yeqValue(getSheetItemValue(sheet, item), itm_value)
}
function hasSheetItemString(sheet, item, value_str) { // includes a string
	debugFA("hasSheetItemString", arguments)
	return ysiValue(getSheetItemValue(sheet, item), value_str)
}
//endregion

//region Dotvalues
const Str_Dotempty  = ":ga_circle:"
const Str_Dotplain  = ":ga_plain-circle:"
const Str_Dotinject = ":arrow-alt-circle-down:"
const Arr_Dotter10  = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10",]
function setSheetItemDotted(sheet, item) {
	debugFA("setSheetItemDotted", arguments)
	setSheetItemDotted10(sheet, item) // try this one
}
function setSheetItemDotted10(sheet, item) {
	debugFA("setSheetItemDotted10", arguments)
	if (Array.isArray(item)) {return item.forEach(function(item) { // recursive
		setSheetItemDotted10(sheet, item)
	})} // single item from here
	if (! hasSheetItemDotted10(sheet, item)) {return} // no dotted representation
	const itm_value = getSheetItemValue(sheet, item)
	const dot_item  = val2dotItem(item)
	const eff_item  = val2effItem(item)
	const eff_value = hasSheetItemEffort(sheet, item) ? // use effort representation if any
		getSheetItemValue(sheet, eff_item) : Int_Zero
	Arr_Dotter10.forEach(function(dot_value) {
		const dot_itemnn = sfxValue(dot_item, dot_value)
		if (ygtValue(Number(dot_value), itm_value)) {
			sheet.get(dot_itemnn).value(Str_Dotempty)
		} else if (ygtValue(Number(dot_value), itm_value - eff_value)) {
			sheet.get(dot_itemnn).value(Str_Dotinject)
		} else {
			sheet.get(dot_itemnn).value(Str_Dotplain)
		}
	})
	return itm_value
}
//endregion

//region Locked
const Str_Locked   = ":lock:"
const Str_Unlocked = ":lock-open:"
function setSheetItemLocked(sheet, item) {
	debugFA("setSheetItemLocked", arguments)
	return setSheetItemValue(sheet, item, Str_Locked)
}
function setSheetItemUnlocked(sheet, item) {
	debugFA("setSheetItemUnlocked", arguments)
	return setSheetItemValue(sheet, item, Str_Unlocked)
}
function hasSheetItemLocked(sheet, item) {
	debugFA("hasSheetItemLocked", arguments)
	return hasSheetItemValue(sheet, item, Str_Locked)
}
//endregion

//region Folded
const Str_Folded   = ":sort-up:"
const Str_Unfolded = ":sort-down:"
function setSheetItemFolded(sheet, item) {
	debugFA("setSheetItemFolded", arguments)
	return setSheetItemReplc(sheet, item, Str_Unfolded, Str_Folded)
}
function setSheetItemUnfolded(sheet, item) {
	debugFA("setSheetItemUnfolded", arguments)
	return setSheetItemReplc(sheet, item, Str_Folded, Str_Unfolded)
}
function hasSheetItemFolded(sheet, item) {
	debugFA("hasSheetItemFolded", arguments)
	return hasSheetItemString(sheet, item, Str_Folded)
}
//endregion

//region Tooltips
function setSheetItemTooltip(sheet, item, itm_tooltip) {
	debugFA("setSheetItemTooltip", arguments)
	sheet.get(item).setToolTip(itm_tooltip)
	return itm_tooltip
}
//endregion

//region Classes // due to JS we cannot use Class so ... Css // Cfk are fake classes
const Cfk_Effort		= "Cfk_Effort"		// has an effort related item
const Cfk_Dotted10		= "Cfk_Dotted10"	// has a dotted10 value representation
const Cfk_Plussigned	= "Cfk_Plussigned"	// allows to show "+" for positive values
const Cfk_Undisplayed	= "Cfk_Undisplayed"	// allows to show/hide items
const Cfk_Clickable		= "Cfk_Clickable"	// allows to react to onclick
const Cfk_Modifiable	= "Cfk_Modifiable"	// allows only Dec, Inc
const Cfk_Selected		= "Cfk_Selected"	// allows only Rej, Inj
const Cfk_Fakeupdated	= "Cfk_Fakeupdated"	// avoid computations propagation
const Key_CfkCss		= { // relation between Cfk and Css /!\ blank to separate
	Cfk_Effort			: Cfk_Effort      + "",
	Cfk_Dotted10		: Cfk_Dotted10    + "",
	Cfk_Plussigned		: Cfk_Plussigned  + "",
	Cfk_Undisplayed		: Cfk_Undisplayed + " d-none",
	Cfk_Clickable		: Cfk_Clickable   + " clickable",
	Cfk_Modifiable		: Cfk_Modifiable  + "",
	Cfk_Selected		: Cfk_Selected    + " bg-secondary",
	Cfk_Fakeupdated		: Cfk_Fakeupdated + "",
}
const Arr_CFKTHM		= [ // Cfk that support theme
	Cfk_Clickable,
	Cfk_Modifiable,
	Cfk_Selected,
]	
const Css_DFlex				= "d-flex" // add/remove for Displayed on Containers to work
const Css_WidgetContainer	= "widget-container" // identify a Container
const Css_DNone				= "d-none"
function addSheetItemCss(sheet, item, css) { // multiple Css allowed in one string
	debugFA("addSheetItemCss", arguments)
	if (Array.isArray(item)) {return item.forEach(function(item) { // recursive
		addSheetItemCss(sheet, item, css)
	})} // single item from here
	css.split(" ").forEach(function(css) {
		sheet.get(item).addClass(css)
		if (css == Css_DNone && hasSheetItemCss(sheet, item, Css_WidgetContainer)) {
			sheet.get(item).removeClass(Css_DFlex)
		}
	})
	debugFAOK("addSheetItemCss")
	return css
}
function remSheetItemCss(sheet, item, css) { // multiple Css allowed in one string
	debugFA("remSheetItemCss", arguments)
	if (Array.isArray(item)) {return item.forEach(function(item) { // recursive
		remSheetItemCss(sheet, item, css)
	})} // single item from here
	css.split(" ").forEach(function(css) {
		sheet.get(item).removeClass(css)
		if (css == Css_DNone && hasSheetItemCss(sheet, item, Css_WidgetContainer)) {
			sheet.get(item).addClass(Css_DFlex)
		}
	})
	debugFAOK("remSheetItemCss")
	return css
}
function hasSheetItemCss(sheet, item, css) { // multiple Css allowed in one string
	debugFA("hasSheetItemCss", arguments)
	let has = true
	css.split(" ").forEach(function(css) { // every Css has to be present
		if (! sheet.get(item).hasClass(css)) {has = false}
	})
	return has
}
function addSheetItemCfk(sheet, item, cfk) { // multiple Cfk allowed in one string
	debugFA("addSheetItemCfk", arguments)
	if (Array.isArray(item)) {return item.forEach(function(item) { // recursive
		addSheetItemCfk(sheet, item, cfk)
	})} // single item from here
	cfk.split(" ").forEach(function(cfk) {
		let css = Key_CfkCss[cfk]
		if (Arr_CFKTHM.includes(cfk)) { // add the theme if any
			css = css + " " + getSheetItemValue(sheet, REQ_THMPRF)
		}
		addSheetItemCss(sheet, item, css) // /!\ has to be first
		if (hasSheetItemCfk(sheet, item, Cfk_Dotted10)) { // mimics on related dot
			if (cfk != Cfk_Undisplayed) { // except for Displayed
				addSheetItemCss(sheet, val2dotItem(item), css)
			}
		}
	})
	return cfk
}
function remSheetItemCfk(sheet, item, cfk) { // multiple Cfk allowed in one string
	debugFA("remSheetItemCfk", arguments)
	if (Array.isArray(item)) {return item.forEach(function(item) { // recursive
		remSheetItemCfk(sheet, item, cfk)
	})} // single item from here
	cfk.split(" ").forEach(function(cfk) {
		let css = Key_CfkCss[cfk]
		if (Arr_CFKTHM.includes(cfk)) { // add the theme if any
			css = css + " " + getSheetItemValue(sheet, REQ_THMPRF)
		}
		if (hasSheetItemCfk(sheet, item, Cfk_Dotted10)) { // mimics on related dot
			if (cfk != Cfk_Undisplayed) { // except for Displayed
				remSheetItemCss(sheet, val2dotItem(item), css)
			}
		}
		remSheetItemCss(sheet, item, css) // /!\ has to be last
	})
	Object.keys(Key_CfkCss).forEach(function(cfk) { // restore any "broken" Cfk
		if (hasSheetItemCfk(sheet, item, cfk)) {
			addSheetItemCfk(sheet, item, cfk)
		}
	})
	return cfk
}
function hasSheetItemCfk(sheet, item, cfk) { // multiple Cfk allowed in one string
	debugFA("hasSheetItemCfk", arguments)
	return hasSheetItemCss(sheet, item, cfk) // check only Cfk, not their Css
}
function getSheetItemCss(sheet, item) {
	debugFA("getSheetItemCss", arguments)
	return sheet.get(item).getClasses()
}
//endregion

//region Effort
function addSheetItemEffort(sheet, item) {
	debugFA("addSheetItemEffort", arguments)
	return addSheetItemCfk(sheet, item, Cfk_Effort)		// normal operation
}
function remSheetItemEffort(sheet, item) {
	debugFA("remSheetItemEffort", arguments)
	return remSheetItemCfk(sheet, item, Cfk_Effort)		// normal operation
}
function hasSheetItemEffort(sheet, item) {
	debugFA("hasSheetItemEffort", arguments)
	return hasSheetItemCfk(sheet, item, Cfk_Effort)		// normal operation
}
//endregion

//region Dotted10 // Fakeupdate
function addSheetItemDotted10(sheet, item) {
	debugFA("addSheetItemDotted10", arguments)
	addSheetItemCfk(sheet, item, Cfk_Dotted10)			// normal operation
	return fakSheetItemUpdate(sheet, item)
}
function remSheetItemDotted10(sheet, item) {
	debugFA("remSheetItemDotted10", arguments)
	remSheetItemCfk(sheet, item, Cfk_Dotted10)			// normal operation
	return fakSheetItemUpdate(sheet, item)
}
function hasSheetItemDotted10(sheet, item) {
	debugFA("hasSheetItemDotted10", arguments)
	return hasSheetItemCfk(sheet, item, Cfk_Dotted10)	// normal operation
}
//endregion

//region Plussigned // Fakeupdate
function addSheetItemPlussigned(sheet, item) {
	debugFA("addSheetItemPlussigned", arguments)
	addSheetItemCfk(sheet, item, Cfk_Plussigned)		// normal operation
	return fakSheetItemUpdate(sheet, item)
}
function remSheetItemPlussigned(sheet, item) {
	debugFA("remSheetItemPlussigned", arguments)
	remSheetItemCfk(sheet, item, Cfk_Plussigned)		// normal operation
	return fakSheetItemUpdate(sheet, item)
}
function hasSheetItemPlussigned(sheet, item) {
	debugFA("hasSheetItemPlussigned", arguments)
	return hasSheetItemCfk(sheet, item, Cfk_Plussigned)		// normal operation
}
//endregion

//region Displayed
function addSheetItemDisplayed(sheet, item) {
	debugFA("addSheetItemDisplayed", arguments)
	return remSheetItemCfk(sheet, item, Cfk_Undisplayed)	// reverse operation
}
function remSheetItemDisplayed(sheet, item) {
	debugFA("remSheetItemDisplayed", arguments)
	return addSheetItemCfk(sheet, item, Cfk_Undisplayed)	// reverse operation
}
function hasSheetItemDisplayed(sheet, item) {
	debugFA("hasSheetItemDisplayed", arguments)
	return ! hasSheetItemCfk(sheet, item, Cfk_Undisplayed)	// reverse operation
}
//endregion

//region Clickable
function addSheetItemClickable(sheet, item) {
	debugFA("addSheetItemClickable", arguments)
	return addSheetItemCfk(sheet, item, Cfk_Clickable)		// normal operation
}
function remSheetItemClickable(sheet, item) {
	debugFA("remSheetItemClickable", arguments)
	return remSheetItemCfk(sheet, item, Cfk_Clickable)		// normal operation
}
function hasSheetItemClickable(sheet, item) {
	debugFA("hasSheetItemClickable", arguments)
	return hasSheetItemCfk(sheet, item, Cfk_Clickable)		// normal operation
}
//endregion

//region Modifiable // Fakeupdate
function addSheetItemModifiable(sheet, item) {
	debugFA("addSheetItemModifiable", arguments)
	addSheetItemCfk(sheet, item, Cfk_Modifiable)		// normal operation
	return fakSheetItemUpdate(sheet, item)
}
function remSheetItemModifiable(sheet, item) {
	debugFA("remSheetItemModifiable", arguments)
	remSheetItemCfk(sheet, item, Cfk_Modifiable)		// normal operation
	return fakSheetItemUpdate(sheet, item)
}
function hasSheetItemModifiable(sheet, item) {
	debugFA("hasSheetItemModifiable", arguments)
	return hasSheetItemCfk(sheet, item, Cfk_Modifiable)		// normal operation
}
//endregion

//region Selected // Fakeupdate // Toggle Modifiable
function addSheetItemSelected(sheet, item) {
	debugFA("addSheetItemSelected", arguments)
	remSheetItemModifiable(sheet, item) // toggle modifiable/selected
	addSheetItemCfk(sheet, item, Cfk_Selected)		// normal operation
	return fakSheetItemUpdate(sheet, item)
}
function remSheetItemSelected(sheet, item) {
	debugFA("remSheetItemSelected", arguments)
	addSheetItemModifiable(sheet, item) // toggle modifiable/selected
	remSheetItemCfk(sheet, item, Cfk_Selected)		// normal operation
	return fakSheetItemUpdate(sheet, item)
}
function hasSheetItemSelected(sheet, item) {
	debugFA("hasSheetItemSelected", arguments)
	return hasSheetItemCfk(sheet, item, Cfk_Selected)		// normal operation
}
//endregion

//region Fakeupdated
function addSheetItemFakeupdated(sheet, item) {
	debugFA("addSheetItemFakeupdated", arguments)
	return addSheetItemCfk(sheet, item, Cfk_Fakeupdated)		// normal operation
}
function remSheetItemFakeupdated(sheet, item) {
	debugFA("remSheetItemFakeupdated", arguments)
	return remSheetItemCfk(sheet, item, Cfk_Fakeupdated)		// normal operation
}
function hasSheetItemFakeupdated(sheet, item) {
	debugFA("hasSheetItemFakeupdated", arguments)
	return hasSheetItemCfk(sheet, item, Cfk_Fakeupdated)		// normal operation
}
function fakSheetItemUpdate(sheet, item) {
	debugFA("fakSheetItemUpdate", arguments)
	if (Array.isArray(item)) {return item.forEach(function(item) { // recursive
		fakSheetItemUpdate(sheet, item)
	})} // single item from here
	addSheetItemFakeupdated(sheet, item) // avoid computations propagation
	return setSheetItemValue(sheet, item, getSheetItemValue(sheet, item)) // update
}
//endregion

//region Debug
const Yes_Debug         = true
const Not_Debug         = false
const Dft_Debug         = Yes_Debug
const Dft_DebugFA       = Not_Debug
const Key_DebugFAFctYes = { //relation between fct_name and debug // else Dft_DebugFA
	initMainSheet: Yes_Debug,
	// onItemUpdateFct_REQ_THMPRF: Yes_Debug,
	// onItemUpdateFct_Prf_DXVPRF: Yes_Debug,
	// repSheet: Yes_Debug,
	// effSheet: Yes_Debug,
	// dotSheet: Yes_Debug,
	// psiSheet: Yes_Debug,
	// fakSheet: Yes_Debug,
	// fakSheetItemUpdate: Yes_Debug,
	// setSheetItemDotted10: Yes_Debug,
	// lknSheet: Yes_Debug,
	// lkySheet: Yes_Debug,
	// addSheetItemCfk: Yes_Debug,
	// remSheetItemCfk: Yes_Debug,
}
function debug(msg_debug, yes_debug) {
	if (arguments.length < 2) {yes_debug = Dft_Debug}
	if (yes_debug) {log(msg_debug)}
}
function debugOK(yes_debug) {
	if (arguments.length < 1) {yes_debug = Dft_Debug}
	debug("OK", yes_debug)
}
function debugFA(fct_name, fct_args, yes_debugfa) { // use: debugFA("myFunction", arguments)
	if (arguments.length < 3) {yes_debugfa = Dft_DebugFA}
	if (arguments.length < 2) {fct_args = ""}
	yes_debugfa = Key_DebugFAFctYes.hasOwnProperty(fct_name) ?
		Key_DebugFAFctYes[fct_name] : yes_debugfa
	if (! yes_debugfa) {return} // do not debug
	if (typeof fct_args == "object") {
		if (Array.isArray(fct_args)) {
			fct_args = fct_args.flat(Infinity)
		} else {
			fct_args = Object.values(fct_args)
		}
	}
	debug(fct_name + " " + fct_args) // default debug mode
}
function debugFAOK(fct_name, yes_debugfa) { // use: debugFAOK("myFunction")
	if (arguments.length < 2) {yes_debugfa = Dft_DebugFA}
	debugFA(fct_name, "OK", yes_debugfa)
}
//endregion

//region Repair
const Yes_Repair = true
const Not_Repair = false
const Dft_Repair = Not_Repair
//endregion

//region LR_Operators
function rndValue(value_min, value_max) { // random value (integer, inclusive)
	debugFA("rndValue", arguments)
	value_min = Math.ceil(value_min)
	value_max = Math.floor(value_max)
	return Math.floor(Math.random() * (value_max - value_min + 1) + value_min)
}
function minValue(value_one, value_two) { // minimum value
	debugFA("minValue", arguments)
	return value_one < value_two ?
		value_one : value_two
}
function maxValue(value_one, value_two) { // maximum value
	debugFA("maxValue", arguments)
	return value_one > value_two ?
		value_one : value_two
}
function mxlValue(value_one, value_two) { // minimum mix value
	debugFA("mxlValue", arguments)
	return Math.floor((value_one + value_two) / 2)
}
function mxhValue(value_one, value_two) { // maximum mix value
	debugFA("mxhValue", arguments)
	return Math.ceil((value_one + value_two) / 2)
}
function yeqValue(value_one, value_two) { // if equal
	debugFA("yeqValue", arguments)
	return value_one == value_two
}
function neqValue(value_one, value_two) { // if not equal
	debugFA("neqValue", arguments)
	return value_one != value_two
}
function yizValue(value_one) { // if zero
	debugFA("yizValue", arguments)
	return yeqValue(value_one, Int_Zero)
}
function nizValue(value_one) { // if not zero
	debugFA("nizValue", arguments)
	return ! yizValue(value_one)
}
function ysnValue(value_one) { // if none
	debugFA("ysnValue", arguments)
	return yeqValue(value_one, Str_None)
}
function nsnValue(value_one) { // if not none
	debugFA("nsnValue", arguments)
	return ! ysnValue(value_one)
}
function yltValue(value_one, value_two) { // if lower than
	debugFA("yltValue", arguments)
	return value_one <  value_two
}
function ygtValue(value_one, value_two) { // if greater than
	debugFA("ygtValue", arguments)
	return value_one >  value_two
}
function yleValue(value_one, value_two) { // if lower or equal
	debugFA("yleValue", arguments)
	return value_one <= value_two
}
function ygeValue(value_one, value_two) { // if greater or equal
	debugFA("ygeValue", arguments)
	return value_one >= value_two
}
function ysiValue(value_one, value_str) { // if includes a string
	debugFA("ysiValue", arguments)
	return value_one.includes(value_str)
}
function nsiValue(value_one, value_str) { // if not includes a string
	debugFA("nsiValue", arguments)
	return ! value_one.includes(value_str)
}
function rsoValue(value_one, value_str, value_rpl) { // replace once by a string
	debugFA("rsoValue", arguments)
	return value_one.replace(value_str, value_rpl)
}
function rsaValue(value_one, value_str, value_rpl) { // replace all by a string
	debugFA("rsaValue", arguments)
	return value_one.replaceAll(value_str, value_rpl)
}
function pfxValue(value_one, value_str) { // prefix with a string
	debugFA("pfxValue", arguments)
	return value_str + value_one
}
function sfxValue(value_one, value_str) { // suffix with a string
	debugFA("sfxValue", arguments)
	return value_one + value_str
}
function val2dotItem(item) { // related dot item
	debugFA("val2dotItem", arguments)
	return rsoValue(item, Str_PFXVAL, Str_PFXDOT)
}
function val2effItem(item) { // related eff item
	debugFA("val2effItem", arguments)
	return rsoValue(item, Str_PFXVAL, Str_PFXEFF)
}
function val2dxvItem(item) { // related dxv item
	debugFA("val2dxvItem", arguments)
	return rsoValue(item, Str_PFXVAL, Str_PFXDXV)
}
function val2chkItem(item) { // related chk item
	debugFA("val2chkItem", arguments)
	return rsoValue(item, Str_PFXVAL, Str_PFXCHK)
}
function chk2valItem(item) { // related val item
	debugFA("chk2valItem", arguments)
	return rsoValue(item, Str_PFXCHK, Str_PFXVAL)
}
//endregion

//endregion


//region Init sheets
init = function(sheet) {
	// initialize all the sheets
	if (sheet.id() == "main") {return initMainSheet(sheet)}
}
//endregion


//region Main Sheet
function initMainSheet(sheet) {
	debugFA("initMainSheet", arguments)
	//region Dialogs items
	//region Preferences Items
	const Chc_THMPRF             = "Chc_THMPRF"		// theme choice
	const Chc_DXVPRF             = "Chc_DXVPRF"		// display choice
	//endregion
	//endregion
	
	//region Sheet Items
	//region Hidden Items
	//region Preferences Items
	const Prf_DXVPRF             = "Prf_DXVPRF"		// show dots, vals or both
	//endregion
	//region Work Items
	const Sel_CARMIXACT          = "Sel_CARMIXACT"	// pointer to the selected CARMIXACT val
	//endregion
	//endregion
	
	//region Rows Items
	const Row_REQ				 = "Row_REQ"		// sheet requiered items (hidden)
	
	const Row_PRF				 = "Row_PRF"		// user's preferences (hidden)
	
	const Row_PMP                = "Row_PMP"		// sheet title

	const Row_SHT                = "Row_SHT"		// sheet help, lock, preferences

	const Row_BIO                = "Row_BIO"
	const Row_FLDBIO             = "Row_FLDBIO"
	const Row_CAKBIO             = "Row_CAKBIO"

	const Row_MAX                = "Row_MAX"
	const Row_FLDMAX             = "Row_FLDMAX"
	const Row_RUTMAX             = "Row_RUTMAX"
	const Row_INSMAX             = "Row_INSMAX"
	const Row_CARMAX             = "Row_CARMAX"
	const Row_MIXMAX             = "Row_MIXMAX"

	const Row_ACT                = "Row_ACT"
	const Row_FLDACT             = "Row_FLDACT"
	const Row_INSACT             = "Row_INSACT"
	const Row_CARACT             = "Row_CARACT"
	const Row_MIXACT             = "Row_MIXACT"

	const Row_SCO                = "Row_SCO"
	const Row_FLDSCO             = "Row_FLDSCO"

	const Row_HOP                = "Row_HOP"
	const Row_FLDHOP             = "Row_FLDHOP"

	const Row_WRK				 = "Row_WRK"		// user's work variables (hidden)
	//endregion
	
	//region SHT Items
	//region Help Items
	const Tit_SHTHLP_			 = "Tit_SHTHLP_"	// dialog title to translate
	const Dia_SHTHLP             = "Dia_SHTHLP"		// Clickable item and its dialog id
	//endregion
	//region Lock Items
	const Lck_SHT                = "Lck_SHT"
	//endregion
	//region Preferences Items
	const Tit_SHTPRF_			 = "Tit_SHTPRF_"	// dialog title to translate
	const Dia_SHTPRF             = "Dia_SHTPRF"		// Clickable item and its dialog id
	//endregion
	const Arr_SHTITMClks         = [
		Dia_SHTHLP,
		Lck_SHT,
		Dia_SHTPRF,
	]
	//endregion
	
	//region Fold Items
	const Fld_BIO                = "Fld_BIO"
	const Fld_MAX                = "Fld_MAX"
	const Fld_ACT                = "Fld_ACT"
	const Fld_SCO                = "Fld_SCO"
	const Fld_HOP                = "Fld_HOP"
	const Key_FLDITMClksItms     = { // relation between trigger item and its folding items 
		Fld_BIO: Row_FLDBIO,
		Fld_MAX: Row_FLDMAX,
		Fld_ACT: Row_FLDACT,
		Fld_SCO: Row_FLDSCO,
		Fld_HOP: Row_FLDHOP,
	}
	const Arr_FLDITMClks         = Object.keys(Key_FLDITMClksItms) // only trigger items
	//endregion

	//region Tooltips Items
	const Tip_YLCKSHTY_          = "Tip_YLCKSHTY_"
	const Tip_YFLDBIOY_          = "Tip_YFLDBIOY_"
	const Tip_YFLDMAXY_          = "Tip_YFLDMAXY_"
	const Tip_YFLDACTY_          = "Tip_YFLDACTY_"
	const Tip_YFLDSCOY_          = "Tip_YFLDSCOY_"
	const Tip_YFLDHOPY_          = "Tip_YFLDHOPY_"
	const Key_TIPITMClksTtys     = { // relation between trigger item and its tooltip yes
		Lck_SHT: Tip_YLCKSHTY_,
		Fld_BIO: Tip_YFLDBIOY_,
		Fld_MAX: Tip_YFLDMAXY_,
		Fld_ACT: Tip_YFLDACTY_,
		Fld_SCO: Tip_YFLDSCOY_,
		Fld_HOP: Tip_YFLDHOPY_,
	}
	const Tip_NLCKSHTN_          = "Tip_NLCKSHTN_"
	const Tip_NFLDBION_          = "Tip_NFLDBION_"
	const Tip_NFLDMAXN_          = "Tip_NFLDMAXN_"
	const Tip_NFLDACTN_          = "Tip_NFLDACTN_"
	const Tip_NFLDSCON_          = "Tip_NFLDSCON_"
	const Tip_NFLDHOPN_          = "Tip_NFLDHOPN_"
	const Key_TIPITMClksTtns     = { // relation between trigger item and its tooltip not
		Lck_SHT: Tip_NLCKSHTN_,
		Fld_BIO: Tip_NFLDBION_,
		Fld_MAX: Tip_NFLDMAXN_,
		Fld_ACT: Tip_NFLDACTN_,
		Fld_SCO: Tip_NFLDSCON_,
		Fld_HOP: Tip_NFLDHOPN_,
	}
	//endregion

	//region BIO Items
	const Val_BIONAM             = "Val_BIONAM"
	const Val_BIOCMS             = "Val_BIOCMS"
	const Val_BIOAGE             = "Val_BIOAGE"
	const Val_BIOKGS             = "Val_BIOKGS"
	const Val_BIODSC             = "Val_BIODSC"
	const Arr_BIOITMVals         = [
		Val_BIONAM,
		Val_BIOCMS,
		Val_BIOAGE,
		Val_BIOKGS,
		Val_BIODSC,
	]
	const Vis_BIONAM             = "Vis_BIONAM"
	const Vis_BIOCMS             = "Vis_BIOCMS"
	const Vis_BIOAGE             = "Vis_BIOAGE"
	const Vis_BIOKGS             = "Vis_BIOKGS"
	const Vis_BIODSC             = "Vis_BIODSC"
	const Arr_BIOITMViss         = [
		Vis_BIONAM,
		Vis_BIOCMS,
		Vis_BIOAGE,
		Vis_BIOKGS,
		Vis_BIODSC,
	]
	//endregion

	//region MAX Items
	//region RUTMAX Items
	const Val_REMMAX             = "Val_REMMAX"
	const Val_USEMAX             = "Val_USEMAX"
	const Val_TOTMAX             = "Val_TOTMAX"
	const Arr_RUTMAXVals         = [
		Val_REMMAX,
		Val_USEMAX,
		Val_TOTMAX,
	]
	//endregion
	//region INSMAX Items
	const DxV_INSMAX             = "DxV_INSMAX"
	const Dot_INSMAX             = "Dot_INSMAX"
	const Val_INSMAX             = "Val_INSMAX"
	const Arr_INSMAXDots         = [
		Dot_INSMAX,
	]
	const Arr_INSMAXVals         = [
		Val_INSMAX,
	]
	const Dec_INSMAX             = "Dec_INSMAX"
	const Inc_INSMAX             = "Inc_INSMAX"
	const Arr_INSMAXDIcs         = [
		Dec_INSMAX,
		Inc_INSMAX,
	]
	//endregion
	//region CARMAX Items
	const DxV_PHYMAX             = "DxV_PHYMAX"
	const Dot_PHYMAX             = "Dot_PHYMAX"
	const Val_PHYMAX             = "Val_PHYMAX"
	const DxV_MENMAX             = "DxV_MENMAX"
	const Dot_MENMAX             = "Dot_MENMAX"
	const Val_MENMAX             = "Val_MENMAX"
	const DxV_PSYMAX             = "DxV_PSYMAX"
	const Dot_PSYMAX             = "Dot_PSYMAX"
	const Val_PSYMAX             = "Val_PSYMAX"
	const Arr_CARMAXDots         = [
		Dot_PHYMAX,
		Dot_MENMAX,
		Dot_PSYMAX,
	]
	const Arr_CARMAXVals         = [
		Val_PHYMAX,
		Val_MENMAX,
		Val_PSYMAX,
	]
	const Dec_PHYMAX             = "Dec_PHYMAX"
	const Inc_PHYMAX             = "Inc_PHYMAX"
	const Dec_MENMAX             = "Dec_MENMAX"
	const Inc_MENMAX             = "Inc_MENMAX"
	const Dec_PSYMAX             = "Dec_PSYMAX"
	const Inc_PSYMAX             = "Inc_PSYMAX"
	const Arr_CARMAXDIcs         = [
		Dec_PHYMAX,
		Inc_PHYMAX,
		Dec_MENMAX,
		Inc_MENMAX,
		Dec_PSYMAX,
		Inc_PSYMAX,
	]
	//endregion
	//region MIXMAX Items
	const DxV_PHYMENMAX          = "DxV_PHYMENMAX"
	const Dot_PHYMENMAX          = "Dot_PHYMENMAX"
	const Val_PHYMENMAX          = "Val_PHYMENMAX"
	const DxV_PHYPSYMAX          = "DxV_PHYPSYMAX"
	const Dot_PHYPSYMAX          = "Dot_PHYPSYMAX"
	const Val_PHYPSYMAX          = "Val_PHYPSYMAX"
	const DxV_MENPSYMAX          = "DxV_MENPSYMAX"
	const Dot_MENPSYMAX          = "Dot_MENPSYMAX"
	const Val_MENPSYMAX          = "Val_MENPSYMAX"
	const Arr_MIXMAXDots         = [
		Dot_PHYMENMAX,
		Dot_PHYPSYMAX,
		Dot_MENPSYMAX,
	]
	const Arr_MIXMAXVals         = [
		Val_PHYMENMAX,
		Val_PHYPSYMAX,
		Val_MENPSYMAX,
	]
	//endregion
	//endregion

	//region ACT Items
	//region INSACT Items
	const DxV_INSACT             = "DxV_INSACT"
	const Dot_INSACT             = "Dot_INSACT"
	const Val_INSACT             = "Val_INSACT"
	const Arr_INSACTDots         = [
		Dot_INSACT,
	]
	const Arr_INSACTVals         = [
		Val_INSACT,
	]
	const Inj_INSACT             = "Inj_INSACT"
	const Dec_INSACT             = "Dec_INSACT"
	const Eff_INSACT             = "Eff_INSACT"
	const Inc_INSACT             = "Inc_INSACT"
	const Rej_INSACT             = "Rej_INSACT"
	const Arr_INSACTDIcs         = [
		Dec_INSACT,
		Inc_INSACT,
	]
	const Arr_INSACTEffs         = [
		Eff_INSACT,
	]
	const Arr_INSACTIRjs         = [
		Inj_INSACT,
		Rej_INSACT,
	]
	//endregion
	//region CARACT Items
	const DxV_PHYACT             = "DxV_PHYACT"
	const Dot_PHYACT             = "Dot_PHYACT"
	const Val_PHYACT             = "Val_PHYACT"
	const DxV_MENACT             = "DxV_MENACT"
	const Dot_MENACT             = "Dot_MENACT"
	const Val_MENACT             = "Val_MENACT"
	const DxV_PSYACT             = "DxV_PSYACT"
	const Dot_PSYACT             = "Dot_PSYACT"
	const Val_PSYACT             = "Val_PSYACT"
	const Arr_CARACTDots         = [
		Dot_PHYACT,
		Dot_MENACT,
		Dot_PSYACT,
	]
	const Arr_CARACTVals         = [
		Val_PHYACT,
		Val_MENACT,
		Val_PSYACT,
	]
	const Inj_PHYACT             = "Inj_PHYACT"
	const Dec_PHYACT             = "Dec_PHYACT"
	const Eff_PHYACT             = "Eff_PHYACT"
	const Inc_PHYACT             = "Inc_PHYACT"
	const Rej_PHYACT             = "Rej_PHYACT"
	const Inj_MENACT             = "Inj_MENACT"
	const Dec_MENACT             = "Dec_MENACT"
	const Eff_MENACT             = "Eff_MENACT"
	const Inc_MENACT             = "Inc_MENACT"
	const Rej_MENACT             = "Rej_MENACT"
	const Inj_PSYACT             = "Inj_PSYACT"
	const Dec_PSYACT             = "Dec_PSYACT"
	const Eff_PSYACT             = "Eff_PSYACT"
	const Inc_PSYACT             = "Inc_PSYACT"
	const Rej_PSYACT             = "Rej_PSYACT"
	const Arr_CARACTDIcs         = [
		Dec_PHYACT,
		Inc_PHYACT,
		Dec_MENACT,
		Inc_MENACT,
		Dec_PSYACT,
		Inc_PSYACT,
	]
	const Arr_CARACTEffs         = [
		Eff_PHYACT,
		Eff_MENACT,
		Eff_PSYACT,
	]
	const Arr_CARACTIRjs         = [
		Inj_PHYACT,
		Rej_PHYACT,
		Inj_MENACT,
		Rej_MENACT,
		Inj_PSYACT,
		Rej_PSYACT,
	]
	//endregion
	//region MIXACT Items
	const DxV_PHYMENACT          = "DxV_PHYMENACT"
	const Dot_PHYMENACT          = "Dot_PHYMENACT"
	const Val_PHYMENACT          = "Val_PHYMENACT"
	const DxV_PHYPSYACT          = "DxV_PHYPSYACT"
	const Dot_PHYPSYACT          = "Dot_PHYPSYACT"
	const Val_PHYPSYACT          = "Val_PHYPSYACT"
	const DxV_MENPSYACT          = "DxV_MENPSYACT"
	const Dot_MENPSYACT          = "Dot_MENPSYACT"
	const Val_MENPSYACT          = "Val_MENPSYACT"
	const Arr_MIXACTDots         = [
		Dot_PHYMENACT,
		Dot_PHYPSYACT,
		Dot_MENPSYACT,
	]
	const Arr_MIXACTVals         = [
		Val_PHYMENACT,
		Val_PHYPSYACT,
		Val_MENPSYACT,
	]
	//endregion
	//region CARMIXACT Items
	const Arr_CARMIXACTDots      = [
		Arr_CARACTDots,
		Arr_MIXACTDots,
	]
	const Arr_CARMIXACTVals      = [
		Arr_CARACTVals,
		Arr_MIXACTVals,
	]
	//endregion
	//endregion

	//region SCO Items
	//region SCOACT Items
	const DxV_SCOACT             = "DxV_SCOACT"
	const Dot_SCOACT             = "Dot_SCOACT"
	const Val_SCOACT             = "Val_SCOACT"
	const Arr_SCOACTDots         = [
		Dot_SCOACT,
	]
	const Arr_SCOACTVals         = [
		Val_SCOACT,
	]
	const Mns_SCOACT             = "Mns_SCOACT"
	const Mod_SCOACT             = "Mod_SCOACT"
	const Pls_SCOACT             = "Pls_SCOACT"
	const Arr_SCOACTMMPs         = [
		Mns_SCOACT,
		Mod_SCOACT,
		Pls_SCOACT,
	]
	//endregion
	//endregion

	//region HOP Items
	//region HISACT Items
	const Mns_HISACT             = "Mns_HISACT"
	const Mod_HISACT             = "Mod_HISACT"
	const Pls_HISACT             = "Pls_HISACT"
	const Arr_HISACTMMPs         = [
		Mns_HISACT,
		Mod_HISACT,
		Pls_HISACT,
	]
	//endregion
	//region OBJACT Items
	const Mns_OBJACT             = "Mns_OBJACT"
	const Mod_OBJACT             = "Mod_OBJACT"
	const Pls_OBJACT             = "Pls_OBJACT"
	const Arr_OBJACTMMPs         = [
		Mns_OBJACT,
		Mod_OBJACT,
		Pls_OBJACT,
	]
	//endregion
	//region PERACT Items
	const Mns_PERACT             = "Mns_PERACT"
	const Mod_PERACT             = "Mod_PERACT"
	const Pls_PERACT             = "Pls_PERACT"
	const Arr_PERACTMMPs         = [
		Mns_PERACT,
		Mod_PERACT,
		Pls_PERACT,
	]
	//endregion
	//region HOPACT Items
	const Arr_HOPACTMods         = [
		Mod_HISACT,
		Mod_OBJACT,
		Mod_PERACT,
	]
	//endregion
	//endregion

	//region Select Items
	const Arr_CARACTSels         = [ // selected on select CARMIXACT
		Arr_CARACTVals,
		Arr_CARACTEffs,
	]
	const Arr_MIXACTSels         = [ // selected on select CARMIXACT
		Arr_MIXACTVals,
	]
	const Arr_CARMIXACTSels      = [ // selected on select CARMIXACT
		Arr_CARACTSels,
		Arr_MIXACTSels,
	]
	const Arr_PHYACTSels         = [ // selected on select CARMIXACT
		Val_PHYACT,
		Eff_PHYACT,
	]
	const Arr_MENACTSels         = [ // selected on select CARMIXACT
		Val_MENACT,
		Eff_MENACT,
	]
	const Arr_PSYACTSels         = [ // selected on select CARMIXACT
		Val_PSYACT,
		Eff_PSYACT,
	]
	const Arr_PHYMENACTSels      = [ // selected on select CARMIXACT
		Val_PHYMENACT,
	]
	const Arr_PHYPSYACTSels      = [ // selected on select CARMIXACT
		Val_PHYPSYACT,
	]
	const Arr_MENPSYACTSels      = [ // selected on select CARMIXACT
		Val_MENPSYACT,
	]
	const Arr_INSACTSels         = [ // selected on select CARMIXACT
		Val_INSACT,
		Eff_INSACT,
	]
	const Arr_SCOACTSels         = [ // selected on select CARMIXACT
		Val_SCOACT,
		Mod_SCOACT,
	]
	const Arr_HOPACTSels         = [ // selected on select CARMIXACT
		Arr_HOPACTMods,
	]
	const Arr_ISHACTSels         = [ // selected on select CARMIXACT
		Arr_INSACTSels,
		Arr_SCOACTSels,
		Arr_HOPACTSels,
	]
	const Arr_CARMIXACTSeln      = [ // unselected on unselect CARMIXACT
		Arr_CARMIXACTSels,
		Arr_ISHACTSels,
	]
	const Key_CARMIXACTSely      = { // selected on select CARMIXACT
		Val_PHYACT: [
			Arr_PHYACTSels,
			Arr_ISHACTSels,
		],
		Val_MENACT: [
			Arr_MENACTSels,
			Arr_ISHACTSels,
		],
		Val_PSYACT: [
			Arr_PSYACTSels,
			Arr_ISHACTSels,
		],
		Val_PHYMENACT: [
			Arr_PHYMENACTSels,
			Arr_PHYACTSels,
			Arr_MENACTSels,
			Arr_ISHACTSels,
		],
		Val_PHYPSYACT: [
			Arr_PHYPSYACTSels,
			Arr_PHYACTSels,
			Arr_PSYACTSels,
			Arr_ISHACTSels,
		],
		Val_MENPSYACT: [
			Arr_MENPSYACTSels,
			Arr_MENACTSels,
			Arr_PSYACTSels,
			Arr_ISHACTSels,
		],
	}
	//endregion

	//region Effort Items
	const Arr_SHTITMEffs         = [ // effort on init
		Arr_INSACTVals,
		Arr_CARACTVals,
	]
	//endregion

	//region Dot Items
	const Arr_SHTITMD10s         = [ // dotted10 on init
		Arr_INSMAXVals,
		Arr_CARMAXVals,
		Arr_MIXMAXVals,
		Arr_SCOACTVals,
		Arr_INSACTVals,
		Arr_CARACTVals,
		Arr_MIXACTVals,
	]
	//endregion

	//region Sign Items
	const Arr_SHTITMPsis         = [ // plussign on init
		Eff_INSACT,
		Arr_CARACTEffs,
		Mod_SCOACT,
		Arr_HOPACTMods,
	]
	//endregion

	//region Fake Items
	const Arr_SHTITMFaks         = [ // fakeupdate on init
		Lck_SHT,
		Arr_FLDITMClks,
		Val_REMMAX,
		Arr_CARMAXVals,
		Arr_INSACTSels,
		Arr_CARACTSels,
	]
	//endregion

	//region DxV Items
	const Arr_SHTITMDots         = [
		Arr_INSMAXDots,
		Arr_CARMAXDots,
		Arr_MIXMAXDots,
		Arr_INSACTDots,
		Arr_CARACTDots,
		Arr_MIXACTDots,
		Arr_SCOACTDots,
	]
	const Arr_SHTITMVals         = [
		Arr_INSMAXVals,
		Arr_CARMAXVals,
		Arr_MIXMAXVals,
		Arr_INSACTVals,
		Arr_CARACTVals,
		Arr_MIXACTVals,
		Arr_SCOACTVals,
	]
	const Arr_SHTITMBths         = [
		Arr_SHTITMDots,
		Arr_SHTITMVals,
	]
	//endregion

	//region Lock Items
	const Arr_SHTITMDlkn         = [ // displayed on lock not and not on lock yes
		Arr_BIOITMVals,
		Row_MAX,
	]
	const Arr_SHTITMDlky         = [ // displayed on lock yes and not on lock not
		Arr_BIOITMViss,
		Row_ACT,
		Row_SCO,
	]

	const Arr_SHTITMClkn         = [ // clickable on lock not and not on lock yes
		Dia_SHTHLP,
		Dia_SHTPRF,
		Arr_FLDITMClks,
	]
	const Arr_SHTITMClky         = [ // clickable on lock yes and not on lock not
		Dia_SHTHLP,
		Dia_SHTPRF,
		Arr_FLDITMClks,
		Arr_CARMIXACTVals,
	]

	const Arr_SHTITMMlkn         = [ // modifiable on lock not and not on lock yes
		Arr_RUTMAXVals,
		Arr_INSMAXVals,
		Arr_CARMAXVals,
		Arr_MIXMAXVals,
		Arr_HOPACTMods,
	]
	const Arr_SHTITMMlky         = [ // modifiable on lock yes and not on lock not
		Arr_INSACTVals,
		Arr_CARACTVals,
		Arr_MIXACTVals,
	]

	const Arr_SHTITMSlkn         = [ // selected on lock not and not on lock yes
	]
	const Arr_SHTITMSlky         = [ // selected on lock yes and not on lock not
	]
	//endregion
	//endregion

	//region DIcs Items
	const Arr_SHTITMDIcs         = [
		Arr_INSMAXDIcs,
		Arr_CARMAXDIcs,
		Arr_INSACTDIcs,
		Arr_CARACTDIcs,
	]
	//endregion

	//region IRjs Items
	const Arr_SHTITMIRjs         = [
		Arr_INSACTIRjs,
		Arr_CARACTIRjs,
	]
	//endregion

	//region MMPs Items
	const Arr_SHTITMMMPs         = [
		Arr_SCOACTMMPs,
		Arr_HISACTMMPs,
		Arr_OBJACTMMPs,
		Arr_PERACTMMPs,
	]
	//endregion

	//region Theme Items
	const Arr_SHTITMThms         = [ // theme on init
		Arr_SHTITMClks,
		Arr_FLDITMClks,
		Arr_RUTMAXVals,
		Arr_SHTITMDots,
		Arr_SHTITMVals,
		Arr_INSACTEffs,
		Arr_CARACTEffs,
		Arr_SHTITMDIcs,
		Arr_SHTITMIRjs,
		Arr_SHTITMMMPs,
	]
	//endregion

	//region Sheet Events /!\ TO DEFINE BEFORE ANYTHING ELSE /!\
	//region SHTHLP Events
	//region onclick SHTHLP
	onItemClickFct(Dia_SHTHLP, function() {
		debugFA("onItemClickFct_Dia_SHTHLP")
		const item = Dia_SHTHLP
		sheet.prompt(_(Tit_SHTHLP_), item, function(dialog) {
		})
	})
	//endregion
	//endregion

	//region LCK Events
	//region onclick LCKITM
	onItemClickFct(Lck_SHT, function() {
		debugFA("onItemClickFct_Lck_SHT")
		const item = Lck_SHT
		togLCKITM(item)
	})
	//endregion
	//region onupdate LCKITM
	onItemUpdateFct(Lck_SHT, function() {
		debugFA("onItemUpdateFct_Lck_SHT")
		const item = Lck_SHT
		if (hasItemLocked(item)) {
			lkySheet() // sheet locked yes
		} else {
			lknSheet() // sheet locked not
		}
		debugFAOK("onItemUpdateFct_Lck_SHT")
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			// do nothing
		}
		remItemFakeupdated(item) // modification by default again
		// /!\ has to be done after the previous code to avoid to alter fake update
		if (hasItemZero(Val_REMMAX)) { // toggle its clickable /!\ avoid infinite loop
			if (! hasItemClickable(item)) {return addItemClickable(item)}
		} else {
			if (hasItemClickable(item)) {return remItemClickable(item)}
		}
	})
	//endregion
	//endregion

	//region SHTPRF Events
	//region onclick SHTPRF
	onItemClickFct(Dia_SHTPRF, function() {
		debugFA("onItemClickFct_Dia_SHTPRF")
		const item = Dia_SHTPRF
		sheet.prompt(_(Tit_SHTPRF_), item, function(dialog) { // update only on change
			if (neqValue(getItemValue(REQ_THMPRF), dialog[Chc_THMPRF])) {
				setItemValue(REQ_THMPRF, dialog[Chc_THMPRF])
			}
			if (neqValue(getItemValue(Prf_DXVPRF), dialog[Chc_DXVPRF])) {
				setItemValue(Prf_DXVPRF, dialog[Chc_DXVPRF])
			}
		}, function(dialog) {
			setSheetItemValue(dialog, Chc_THMPRF, getItemValue(REQ_THMPRF))
			setSheetItemValue(dialog, Chc_DXVPRF, getItemValue(Prf_DXVPRF))
		})
	})
	//endregion
	//region onupdate THMPRF
	onItemUpdateFct(REQ_THMPRF, function() {
		debugFA("onItemUpdateFct_REQ_THMPRF")
		const item = REQ_THMPRF
		thmSheet()
	})
	//endregion
	//region onupdate DXVPRF
	onItemUpdateFct(Prf_DXVPRF, function() {
		debugFA("onItemUpdateFct_Prf_DXVPRF")
		const item = Prf_DXVPRF
		dxvSheet()
	})
	//endregion
	//endregion

	//region FLD Events
	//region onclick FLDITM
	onItemClickFct(Fld_BIO, function() {
		debugFA("onItemClickFct_Fld_BIO")
		const item = Fld_BIO
		togFLDITM(item)
	})
	onItemClickFct(Fld_MAX, function() {
		debugFA("onItemClickFct_Fld_MAX")
		const item = Fld_MAX
		togFLDITM(item)
	})
	onItemClickFct(Fld_ACT, function() {
		debugFA("onItemClickFct_Fld_ACT")
		const item = Fld_ACT
		togFLDITM(item)
	})
	onItemClickFct(Fld_SCO, function() {
		debugFA("onItemClickFct_Fld_SCO")
		const item = Fld_SCO
		togFLDITM(item)
	})
	onItemClickFct(Fld_HOP, function() {
		debugFA("onItemClickFct_Fld_HOP")
		const item = Fld_HOP
		togFLDITM(item)
	})
	//endregion
	//region onupdate FLDITM
	onItemUpdateFct(Fld_BIO, function() {
		debugFA("onItemUpdateFct_Fld_BIO")
		const item = Fld_BIO
		fldFLDITM(item)
	})
	onItemUpdateFct(Fld_MAX, function() {
		debugFA("onItemUpdateFct_Fld_MAX")
		const item = Fld_MAX
		fldFLDITM(item)
	})
	onItemUpdateFct(Fld_ACT, function() {
		debugFA("onItemUpdateFct_Fld_ACT")
		const item = Fld_ACT
		fldFLDITM(item)
	})
	onItemUpdateFct(Fld_SCO, function() {
		debugFA("onItemUpdateFct_Fld_SCO")
		const item = Fld_SCO
		fldFLDITM(item)
	})
	onItemUpdateFct(Fld_HOP, function() {
		debugFA("onItemUpdateFct_Fld_HOP")
		const item = Fld_HOP
		fldFLDITM(item)
	})
	//endregion
	//endregion

	//region MAX Events
	//region RUTMAX Events
    //region onupdate RUTMAX
	onItemUpdateFct(Val_REMMAX, function() {
		debugFA("onItemUpdateFct_Val_REMMAX")
		const item = Val_REMMAX
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			// up to each item to ajdust himself and its related items
			fakItemUpdate(Lck_SHT)
			fakItemUpdate(Arr_CARMAXVals)
		}
		remItemFakeupdated(item) // modification by default again
	})
	//endregion
	//endregion
	//region INSMAX Events
	//region onupdate INSMAX
	onItemUpdateFct(Val_INSMAX, function() {
		debugFA("onItemUpdateFct_Val_INSMAX")
		const item = Val_INSMAX
		limINSMAXDecInc()
	})
	//endregion
	//region onclick INSMAX Dec, Inc
	onItemClickFct(Dec_INSMAX, function() {
		debugFA("onItemClickFct_Dec_INSMAX")
		const item = Dec_INSMAX
		decItemClk(Val_INSMAX, Dec_INSMAX)
	})
	onItemClickFct(Inc_INSMAX, function() {
		debugFA("onItemClickFct_Inc_INSMAX")
		const item = Inc_INSMAX
		incItemClk(Val_INSMAX, Inc_INSMAX)
	})
	//endregion
	//endregion
	//region CARMAX Events
	//region onupdate CARMAX
	onItemUpdateFct(Val_PHYMAX, function() {
		debugFA("onItemUpdateFct_Val_PHYMAX")
		const item = Val_PHYMAX
		limCARMAXDecInc(Val_PHYMAX, Dec_PHYMAX, Inc_PHYMAX)
	})
	onItemUpdateFct(Val_MENMAX, function() {
		debugFA("onItemUpdateFct_Val_MENMAX")
		const item = Val_MENMAX
		limCARMAXDecInc(Val_MENMAX, Dec_MENMAX, Inc_MENMAX)
	})
	onItemUpdateFct(Val_PSYMAX, function() {
		debugFA("onItemUpdateFct_Val_PSYMAX")
		const item = Val_PSYMAX
		limCARMAXDecInc(Val_PSYMAX, Dec_PSYMAX, Inc_PSYMAX)
	})
	//endregion
	//region onclick CARMAX Dec, Inc
	onItemClickFct(Dec_PHYMAX, function() {
		debugFA("onItemClickFct_Dec_PHYMAX")
		const item = Dec_PHYMAX
		decItemClk(Val_PHYMAX, Dec_PHYMAX)
	})
	onItemClickFct(Inc_PHYMAX, function() {
		debugFA("onItemClickFct_Inc_PHYMAX")
		const item = Inc_PHYMAX
		incItemClk(Val_PHYMAX, Inc_PHYMAX)
	})
	onItemClickFct(Dec_MENMAX, function() {
		debugFA("onItemClickFct_Dec_MENMAX")
		const item = Dec_MENMAX
		decItemClk(Val_MENMAX, Dec_MENMAX)
	})
	onItemClickFct(Inc_MENMAX, function() {
		debugFA("onItemClickFct_Inc_MENMAX")
		const item = Inc_MENMAX
		incItemClk(Val_MENMAX, Inc_MENMAX)
	})
	onItemClickFct(Dec_PSYMAX, function() {
		debugFA("onItemClickFct_Dec_PSYMAX")
		const item = Dec_PSYMAX
		decItemClk(Val_PSYMAX, Dec_PSYMAX)
	})
	onItemClickFct(Inc_PSYMAX, function() {
		debugFA("onItemClickFct_Inc_PSYMAX")
		const item = Inc_PSYMAX
		incItemClk(Val_PSYMAX, Inc_PSYMAX)
	})
	//endregion
	//endregion
	//endregion

	//region ACT Events
	//region INSACT Events
    //region onupdate INSACT
	onItemUpdateFct(Val_INSACT, function() {
		debugFA("onItemUpdateFct_Val_INSACT")
		const item = Val_INSACT
		limINSACTDecInc()
	})
	//endregion
    //region onclick INSACT Dec, Inc
	onItemClickFct(Dec_INSACT, function() {
		debugFA("onItemClickFct_Dec_INSACT")
		const item = Dec_INSACT
		decItemClk(Val_INSACT, Dec_INSACT)
	})
	onItemClickFct(Inc_INSACT, function() {
		debugFA("onItemClickFct_Inc_INSACT")
		const item = Inc_INSACT
		incItemClk(Val_INSACT, Inc_INSACT)
	})
	//endregion
	//region onupdate INSACT Eff
	onItemUpdateFct(Eff_INSACT, function() {
		debugFA("onItemUpdateFct_Eff_INSACT")
		const item = Eff_INSACT
		limINSACTRejInj()
	})
	//endregion
    //region onclick INSACT Eff
	onItemClickFct(Eff_INSACT, function() {
		debugFA("onItemClickFct_Eff_INSACT")
		const item = Eff_INSACT
		zroItemClk(Eff_INSACT, Eff_INSACT)
	})
	//endregion	
    //region onclick INSACT Rej, Inj
	onItemClickFct(Rej_INSACT, function() {
		debugFA("onItemClickFct_Rej_INSACT")
		const item = Rej_INSACT
		decItemClk(Eff_INSACT, Rej_INSACT)
	})
	onItemClickFct(Inj_INSACT, function() {
		debugFA("onItemClickFct_Inj_INSACT")
		const item = Inj_INSACT
		incItemClk(Eff_INSACT, Inj_INSACT)
	})
	//endregion
	//endregion
	//region CARACT Events
    //region onupdate CARACT
	onItemUpdateFct(Val_PHYACT, function() {
		debugFA("onItemUpdateFct_Val_PHYACT")
		const item = Val_PHYACT
		limCARACTDecInc(Val_PHYACT, Dec_PHYACT, Inc_PHYACT, Eff_PHYACT, Val_PHYMAX, Eff_PHYACT)
	})
	onItemUpdateFct(Val_MENACT, function() {
		debugFA("onItemUpdateFct_Val_MENACT")
		const item = Val_MENACT
		limCARACTDecInc(Val_MENACT, Dec_MENACT, Inc_MENACT, Eff_MENACT, Val_MENMAX, Eff_MENACT)
	})
	onItemUpdateFct(Val_PSYACT, function() {
		debugFA("onItemUpdateFct_Val_PSYACT")
		const item = Val_PSYACT
		limCARACTDecInc(Val_PSYACT, Dec_PSYACT, Inc_PSYACT, Eff_PSYACT, Val_PSYMAX, Eff_PSYACT)
	})
	//endregion
    //region onclick CARACT Dec, Inc
	onItemClickFct(Dec_PHYACT, function() {
		debugFA("onItemClickFct_Dec_PHYACT")
		const item = Dec_PHYACT
		decItemClk(Val_PHYACT, Dec_PHYACT)
	})
	onItemClickFct(Inc_PHYACT, function() {
		debugFA("onItemClickFct_Inc_PHYACT")
		const item = Inc_PHYACT
		incItemClk(Val_PHYACT, Inc_PHYACT)
	})
	onItemClickFct(Dec_MENACT, function() {
		debugFA("onItemClickFct_Dec_MENACT")
		const item = Dec_MENACT
		decItemClk(Val_MENACT, Dec_MENACT)
	})
	onItemClickFct(Inc_MENACT, function() {
		debugFA("onItemClickFct_Inc_MENACT")
		const item = Inc_MENACT
		incItemClk(Val_MENACT, Inc_MENACT)
	})
	onItemClickFct(Dec_PSYACT, function() {
		debugFA("onItemClickFct_Dec_PSYACT")
		const item = Dec_PSYACT
		decItemClk(Val_PSYACT, Dec_PSYACT)
	})
	onItemClickFct(Inc_PSYACT, function() {
		debugFA("onItemClickFct_Inc_PSYACT")
		const item = Inc_PSYACT
		incItemClk(Val_PSYACT, Inc_PSYACT)
	})
	//endregion
    //region onupdate CARACT Eff
	onItemUpdateFct(Eff_PHYACT, function() {
		debugFA("onItemUpdateFct_Eff_PHYACT")
		const item = Eff_PHYACT
		limCARACTRejInj(Eff_PHYACT, Rej_PHYACT, Inj_PHYACT, Val_PHYACT)
	})
	onItemUpdateFct(Eff_MENACT, function() {
		debugFA("onItemUpdateFct_Eff_MENACT")
		const item = Eff_MENACT
		limCARACTRejInj(Eff_MENACT, Rej_MENACT, Inj_MENACT, Val_MENACT)
	})
	onItemUpdateFct(Eff_PSYACT, function() {
		debugFA("onItemUpdateFct_Eff_PSYACT")
		const item = Eff_PSYACT
		limCARACTRejInj(Eff_PSYACT, Rej_PSYACT, Inj_PSYACT, Val_PSYACT)
	})
	//endregion
    //region onclick CARACT Eff
	onItemClickFct(Eff_PHYACT, function() {
		debugFA("onItemClickFct_Eff_PHYACT")
		const item = Eff_PHYACT
		zroItemClk(Eff_PHYACT, Eff_PHYACT)
	})
	onItemClickFct(Eff_MENACT, function() {
		debugFA("onItemClickFct_Eff_MENACT")
		const item = Eff_MENACT
		zroItemClk(Eff_MENACT, Eff_MENACT)
	})
	onItemClickFct(Eff_PSYACT, function() {
		debugFA("onItemClickFct_Eff_PSYACT")
		const item = Eff_PSYACT
		zroItemClk(Eff_PSYACT, Eff_PSYACT)
	})
	//endregion
    //region onclick CARACT Rej, Inj
	onItemClickFct(Rej_PHYACT, function() {
		debugFA("onItemClickFct_Rej_PHYACT")
		const item = Rej_PHYACT
		decItemClk(Eff_PHYACT, Rej_PHYACT)
	})
	onItemClickFct(Inj_PHYACT, function() {
		debugFA("onItemClickFct_Inj_PHYACT")
		const item = Inj_PHYACT
		incItemClk(Eff_PHYACT, Inj_PHYACT)
	})
	onItemClickFct(Rej_MENACT, function() {
		debugFA("onItemClickFct_Rej_MENACT")
		const item = Rej_MENACT
		decItemClk(Eff_MENACT, Rej_MENACT)
	})
	onItemClickFct(Inj_MENACT, function() {
		debugFA("onItemClickFct_Inj_MENACT")
		const item = Inj_MENACT
		incItemClk(Eff_MENACT, Inj_MENACT)
	})
	onItemClickFct(Rej_PSYACT, function() {
		debugFA("onItemClickFct_Rej_PSYACT")
		const item = Rej_PSYACT
		decItemClk(Eff_PSYACT, Rej_PSYACT)
	})
	onItemClickFct(Inj_PSYACT, function() {
		debugFA("onItemClickFct_Inj_PSYACT")
		const item = Inj_PSYACT
		incItemClk(Eff_PSYACT, Inj_PSYACT)
	})
	//endregion
	//endregion
	//region CARMIXACT Events
	//region onclick CARMIXACT
	onItemClickFct(DxV_PHYACT, function() {
		debugFA("onItemClickFct_Val_PHYACT")
		const item = Val_PHYACT
		togCARMIXACT(item)
	})
	onItemClickFct(DxV_MENACT, function() {
		debugFA("onItemClickFct_Val_MENACT")
		const item = Val_MENACT
		togCARMIXACT(item)
	})
	onItemClickFct(DxV_PSYACT, function() {
		debugFA("onItemClickFct_Val_PSYACT")
		const item = Val_PSYACT
		togCARMIXACT(item)
	})
	onItemClickFct(DxV_PHYMENACT, function() {
		debugFA("onItemClickFct_Val_PHYMENACT")
		const item = Val_PHYMENACT
		togCARMIXACT(item)
	})
	onItemClickFct(DxV_PHYPSYACT, function() {
		debugFA("onItemClickFct_Val_PHYPSYACT")
		const item = Val_PHYPSYACT
		togCARMIXACT(item)
	})
	onItemClickFct(DxV_MENPSYACT, function() {
		debugFA("onItemClickFct_Val_MENPSYACT")
		const item = Val_MENPSYACT
		togCARMIXACT(item)
	})
	//endregion
    //region onupdate CARMIXACT Sel
	onItemUpdateFct(Sel_CARMIXACT, function() {
		debugFA("onItemUpdateFct_Sel_CARMIXACT")
		const item = Sel_CARMIXACT
		const sel_item = getItemValue(item) // pointer to CARMIXACT val
		remItemSelected(Arr_CARMIXACTSeln) // unselected all
		remItemModifiable(Arr_CARMIXACTSeln) // unmodifiable all
		addItemModifiable(Arr_SHTITMMlky) // modifiable default ones
		if (! hasItemNone(item)) { // select related items if any
			remItemModifiable(Arr_CARMIXACTSeln) // unmodifiable all
			addItemSelected(Key_CARMIXACTSely[sel_item]) // selected related items
		}
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			computeSCOACT() // compute related items
		}
		remItemFakeupdated(item) // modification by default again
	})
	//endregion
	//endregion
	//endregion

	//region SCO Events
	//region SCOACT Events
    //region onupdate SCOACT
	onItemUpdateFct(Val_SCOACT, function() {
		debugFA("onItemUpdateFct_Val_SCOACT")
		const item = Val_SCOACT
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			// up to each item to ajdust himself and its related items
			fakItemUpdate(Eff_INSACT)
			fakItemUpdate(Arr_CARACTEffs)
			fakItemUpdate(Mod_SCOACT)
			fakItemUpdate(Arr_HOPACTMods)
		}
		remItemFakeupdated(item) // modification by default again
		// /!\ has to be done after the previous code to avoid to alter fake update
		if (hasItemSelected(item)) { // toggle its clickable /!\ avoid infinite loop
			if (! hasItemClickable(item)) {return addItemClickable(item)}
		} else {
			if (hasItemClickable(item)) {return remItemClickable(item)}
		}
	})
	//endregion
    //region onclick SCOACT
	onItemClickFct(DxV_SCOACT, function() {
		debugFA("onItemClickFct_Val_SCOACT")
		const item = Val_SCOACT
		rolSCOACT()
	})
	//endregion
	//region onupdate SCOACT Mod
	onItemUpdateFct(Mod_SCOACT, function() {
		debugFA("onItemUpdateFct_Mod_SCOACT")
		const item = Mod_SCOACT
		limCARACTMnsPls(Mod_SCOACT, Mns_SCOACT, Pls_SCOACT)
	})
	//endregion
    //region onclick SCOACT Mod
	onItemClickFct(Mod_SCOACT, function() {
		debugFA("onItemClickFct_Mod_SCOACT")
		const item = Mod_SCOACT
		zroItemClk(Mod_SCOACT, Mod_SCOACT)
	})
	//endregion	
    //region onclick SCOACT Mns, Pls
	onItemClickFct(Mns_SCOACT, function() {
		debugFA("onItemClickFct_Mns_SCOACT")
		const item = Mns_SCOACT
		decItemClk(Mod_SCOACT, Mns_SCOACT)
	})
	onItemClickFct(Pls_SCOACT, function() {
		debugFA("onItemClickFct_Pls_SCOACT")
		const item = Pls_SCOACT
		incItemClk(Mod_SCOACT, Pls_SCOACT)
	})
	//endregion
	//endregion
	//endregion

	//region HOP Events
	//region HISACT Events
	//region onupdate HISACT Mod
	onItemUpdateFct(Mod_HISACT, function() {
		debugFA("onItemUpdateFct_Mod_HISACT")
		const item = Mod_HISACT
		limCARACTMnsPls(Mod_HISACT, Mns_HISACT, Pls_HISACT)
	})
	//endregion
    //region onclick HISACT Mod
	onItemClickFct(Mod_HISACT, function() {
		debugFA("onItemClickFct_Mod_HISACT")
		const item = Mod_HISACT
		zroItemClk(Mod_HISACT, Mod_HISACT)
	})
	//endregion	
    //region onclick HISACT Mns, Pls
	onItemClickFct(Mns_HISACT, function() {
		debugFA("onItemClickFct_Mns_HISACT")
		const item = Mns_HISACT
		decItemClk(Mod_HISACT, Mns_HISACT)
	})
	onItemClickFct(Pls_HISACT, function() {
		debugFA("onItemClickFct_Pls_HISACT")
		const item = Pls_HISACT
		incItemClk(Mod_HISACT, Pls_HISACT)
	})
	//endregion
	//endregion
	//region OBJACT Events
	//region onupdate OBJACT Mod
	onItemUpdateFct(Mod_OBJACT, function() {
		debugFA("onItemUpdateFct_Mod_OBJACT")
		const item = Mod_OBJACT
		limCARACTMnsPls(Mod_OBJACT, Mns_OBJACT, Pls_OBJACT)
	})
	//endregion
    //region onclick OBJACT Mod
	onItemClickFct(Mod_OBJACT, function() {
		debugFA("onItemClickFct_Mod_OBJACT")
		const item = Mod_OBJACT
		zroItemClk(Mod_OBJACT, Mod_OBJACT)
	})
	//endregion	
    //region onclick OBJACT Mns, Pls
	onItemClickFct(Mns_OBJACT, function() {
		debugFA("onItemClickFct_Mns_OBJACT")
		const item = Mns_OBJACT
		decItemClk(Mod_OBJACT, Mns_OBJACT)
	})
	onItemClickFct(Pls_OBJACT, function() {
		debugFA("onItemClickFct_Pls_OBJACT")
		const item = Pls_OBJACT
		incItemClk(Mod_OBJACT, Pls_OBJACT)
	})
	//endregion
	//endregion
	//region PERACT Events
	//region onupdate PERACT Mod
	onItemUpdateFct(Mod_PERACT, function() {
		debugFA("onItemUpdateFct_Mod_PERACT")
		const item = Mod_PERACT
		limCARACTMnsPls(Mod_PERACT, Mns_PERACT, Pls_PERACT)
	})
	//endregion
    //region onclick PERACT Mod
	onItemClickFct(Mod_PERACT, function() {
		debugFA("onItemClickFct_Mod_PERACT")
		const item = Mod_PERACT
		zroItemClk(Mod_PERACT, Mod_PERACT)
	})
	//endregion	
    //region onclick PERACT Mns, Pls
	onItemClickFct(Mns_PERACT, function() {
		debugFA("onItemClickFct_Mns_PERACT")
		const item = Mns_PERACT
		decItemClk(Mod_PERACT, Mns_PERACT)
	})
	onItemClickFct(Pls_PERACT, function() {
		debugFA("onItemClickFct_Pls_PERACT")
		const item = Pls_PERACT
		incItemClk(Mod_PERACT, Pls_PERACT)
	})
	//endregion
	//endregion
	//endregion
	//endregion

	//region Sheet Init
	debugFAOK("initMainSheet")

	//region Sheet Repair on Init
	repSheet()
	//endregion

	//region Sheet Theme on Init
	thmSheet()
	//endregion

	//region Sheet DxV on Init
	dxvSheet()
	//endregion

	//region Sheet Tooltip on Init
	tipSheet()
	//endregion

	//region Sheet Effort on Init
	effSheet()
	//endregion

	//region Sheet Dot on Init
	dotSheet()
	//endregion

	//region Sheet Plussign on Init
	psiSheet()
	//endregion

	//region Sheet Fakeupdate on Init
	fakSheet()
	//endregion
	//endregion

	//region Sheet Code
	//region Sheet Init
	// repair sheet items
	function repSheet() {
		debugFA("repSheet", arguments)
		// default preferences
		if (! Arr_THMALW.includes(getItemValue(REQ_THMPRF))) {
			setItemValue(REQ_THMPRF, Dft_THMDFT)
		}
		if (! Arr_DXVALW.includes(getItemValue(Prf_DXVPRF))) {
			setItemValue(Prf_DXVPRF, Dft_DXVDFT)
		}
		// setItemValue(Prf_DXVPRF, Str_DXVBTH)
		// setItemValue(Prf_DXVPRF, Str_DXVDOT)
		// setItemValue(Prf_DXVPRF, Str_DXVVAL)
		// default work variables
		setItemNone(Sel_CARMIXACT)
		// setItemValue(Val_PHYMAX, 5)
		// setItemValue(Val_MENMAX, 5)
		// setItemValue(Val_PSYMAX, 5)
		// if (true) {
		if (Dft_Repair) {
			setItemValue(Lck_SHT, Str_Unlocked)
			setItemValue(Dia_SHTHLP, ":ga_help:")
			setItemValue(Dia_SHTPRF, ":cog:")
			setItemValue(Fld_BIO, ":sort-down: BIO :sort-down:")
			setItemValue(Fld_MAX, ":sort-down: MAX :sort-down:")
			setItemValue(Fld_ACT, ":sort-down: ACT :sort-down:")
			setItemValue(Fld_SCO, ":sort-down: SCO :sort-down:")
			setItemValue(Fld_HOP, ":sort-down: HOP :sort-down:")
			setItemValue(Inj_INSACT, ":sort-amount-down-alt:")
			setItemValue(Rej_INSACT, ":sort-amount-up-alt:")
			setItemValue(Inj_PHYACT, ":sort-amount-down-alt:")
			setItemValue(Rej_PHYACT, ":sort-amount-up-alt:")
			setItemValue(Inj_MENACT, ":sort-amount-down-alt:")
			setItemValue(Rej_MENACT, ":sort-amount-up-alt:")
			setItemValue(Inj_PSYACT, ":sort-amount-down-alt:")
			setItemValue(Rej_PSYACT, ":sort-amount-up-alt:")
		}
	}
	// theme sheet items
	function thmSheet() {
		debugFA("thmSheet", arguments)
		const thmold = getItemValue(REQ_THMOLD)
		const thmprf = getItemValue(REQ_THMPRF)
		Arr_SHTITMThms.flat(Infinity).forEach(function(item) {
			if (hasSheetItemCss(sheet, item, thmold)) {
				remSheetItemCss(sheet, item, thmold)
				addSheetItemCss(sheet, item, thmprf)
			}
		})
		setItemValue(REQ_THMOLD, thmprf)
1	}
	// dxv sheet items
	function dxvSheet() {
		debugFA("dxvSheet", arguments)
		addItemDisplayed(Arr_SHTITMBths)
		if (hasItemValue(Prf_DXVPRF, Str_DXVDOT)) {
			return remItemDisplayed(Arr_SHTITMVals)
		}
		if (hasItemValue(Prf_DXVPRF, Str_DXVVAL)) {
			return remItemDisplayed(Arr_SHTITMDots)
		}
	}
	// tooltip sheet items
	function tipSheet() {
		debugFA("tipSheet", arguments)
		Object.keys(Key_TIPITMClksTtys).forEach(function(item) { // restore lost tooltips
			if (hasItemLocked(item) || hasItemFolded(item)) {
				ttnItemTooltip(item)
			} else {
				ttyItemTooltip(item)
			}
		})
	}
	// effort sheet items
	function effSheet() {
		debugFA("effSheet", arguments)
		addItemEffort(Arr_SHTITMEffs)		
	}
	// dot sheet items
	function dotSheet() {
		debugFA("dotSheet", arguments)
		addItemDotted10(Arr_SHTITMD10s)		
	}
	// plussign sheet items
	function psiSheet() {
		debugFA("psiSheet", arguments)
		addItemPlussigned(Arr_SHTITMPsis)		
	}
	// fakeupdate sheet items
	function fakSheet() {
		debugFA("fakSheet", arguments)
		fakItemUpdate(Arr_SHTITMFaks)		
	}
	//endregion

	//region Sheet Lock
	// toggle locking item
	function togLCKITM(item) {
		debugFA("togLCKITM", arguments)
		if (! hasItemClickable(item)) {return} // cannot toggle
		if (hasItemLocked(item)) {
			ttyItemTooltip(item)
			setItemUnlocked(item)
		} else {
			ttnItemTooltip(item)
			setItemLocked(item)
		}
	}

	// lock not sheet items
	function lknSheet() { // /!\ always rem before add
		debugFA("lknSheet", arguments)
		// displayed not related items
		remItemDisplayed(Arr_SHTITMDlky)
		// clickable not related items
		remItemClickable(Arr_SHTITMClky)
		// modifiable not related items
		remItemModifiable(Arr_SHTITMMlky)
		// selected not related items /!\ always last
		remItemSelected(Arr_SHTITMSlky)

		// displayed yes related items
		addItemDisplayed(Arr_SHTITMDlkn)
		// clickable yes related items
		addItemClickable(Arr_SHTITMClkn)
		// modifiable yes related items
		addItemModifiable(Arr_SHTITMMlkn)
		// selected yes related items /!\ always last
		addItemSelected(Arr_SHTITMSlkn)
	}

	// lock yes sheet items
	function lkySheet() { // /!\ always rem before add
		debugFA("lkySheet", arguments)
		// displayed not related items
		remItemDisplayed(Arr_SHTITMDlkn)
		// clickable not related items
		remItemClickable(Arr_SHTITMClkn)
		// modifiable not related items
		remItemModifiable(Arr_SHTITMMlkn)
		// selected not related items /!\ always last
		remItemSelected(Arr_SHTITMSlkn)

		// displayed yes related items
		addItemDisplayed(Arr_SHTITMDlky)
		// clickable yes related items
		addItemClickable(Arr_SHTITMClky)
		// modifiable yes related items
		addItemModifiable(Arr_SHTITMMlky)
		// selected yes related items /!\ always last
		addItemSelected(Arr_SHTITMSlky)
	}
	//endregion

	//region Sheet Fold
	// toggle folding item
	function togFLDITM(item) {
		debugFA("togFLDITM", arguments)
		if (! hasItemClickable(item)) {return} // cannot toggle
		if (hasItemFolded(item)) {
			ttyItemTooltip(item)
			setItemUnfolded(item)
		} else {
			ttnItemTooltip(item)
			setItemFolded(item)
		}
	}

    // fold yes not FLDITM related items
	function fldFLDITM(item) {
		debugFA("fldFLDITM", arguments)
		if (hasItemFolded(item)) {
			remItemDisplayed(Key_FLDITMClksItms[item])
		} else {
			addItemDisplayed(Key_FLDITMClksItms[item])
		}
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			// do nothing
		}
		remItemFakeupdated(item) // modification by default again
	}
	//endregion

	//region Sheet Roll
	function rolSCOACT() { // TODO
		debugFA("rolSCOACT", arguments)
		const item = Val_SCOACT
		if (! hasItemClickable(item)) {return} // cannot roll
		debug(item + " : " + getItemValue(item))
	}
	//endregion

	//region Sheet Select
	// toggle selecting CARMIXACT
	function togCARMIXACT(item) {
		debugFA("togCARMIXACT", arguments)
		if (! hasItemClickable(item)) {return} // cannot toggle
		if (hasItemSelected(item)) { // up to Sel_CARMIXACT to handle
			setItemNone(Sel_CARMIXACT)
		} else {
			setItemValue(Sel_CARMIXACT, item)
		}
	}
	//endregion

	//region Sheet Limit
	//region MAX Limit
    //region limit INSMAX Dec, Inc based on min constant, max constant
	function limINSMAXDecInc() {
		debugFA("limINSMAXDecInc", arguments)
		const item      = Val_INSMAX
		const dec_item  = Dec_INSMAX
		const inc_item  = Inc_INSMAX
		const min_value = Min_CARACT
		const max_value = Max_CARACT
		limCARDecInc(item, dec_item, inc_item, min_value, max_value)
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			computeINSACT() // compute related items
		}
		remItemFakeupdated(item) // modification by default again
	}
	//endregion
    //region limit CARMAX Dec, Inc based on min constant, max constant, remmax
	function limCARMAXDecInc(item, dec_item, inc_item) {
		debugFA("limCARMAXDecInc", arguments)
		const min_value = Min_CARMAX
		const max_value = hasItemZero(Val_REMMAX) ? // cannot Inc if any
			getItemValue(item) : Max_CARMAX
		limCARDecInc(item, dec_item, inc_item, min_value, max_value)
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			computeRUTMAX() // compute related items
			computeMIXMAX() // compute related items
			computeCARACT() // compute related items
		}
		remItemFakeupdated(item) // modification by default again
	}
	//endregion
	//endregion

	//region ACT Limit
	//region limit INSACT Dec, Inc based on min item value, max constant
	function limINSACTDecInc() {
		debugFA("limINSACTDecInc", arguments)
		const item      = Val_INSACT
		const dec_item  = Dec_INSACT
		const inc_item  = Inc_INSACT
		const rel_item  = Eff_INSACT
		const min_value = getItemValue(rel_item)
		const max_value = Max_CARACT
		limCARDecInc(item, dec_item, inc_item, min_value, max_value)
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			fakItemUpdate(rel_item) // fake update related items
		}
		remItemFakeupdated(item) // modification by default again
	}
	//endregion
    //region limit INSACT Rej, Inj based on min constant, max item value, scoact
	function limINSACTRejInj() {
		debugFA("limINSACTRejInj", arguments)
		const item      = Eff_INSACT
		const rej_item  = Rej_INSACT
		const inj_item  = Inj_INSACT
		const rel_item  = Val_INSACT
		const min_value = hasItemValue(Val_SCOACT, Min_CARACT) ? // cannot Rej if any
			getItemValue(item) : Min_CAREFF
		const max_value = hasItemValue(Val_SCOACT, Max_CARACT) ? // cannot Inj if any
			getItemValue(item) : getItemValue(rel_item)
		limCARRejInj(item, rej_item, inj_item, min_value, max_value)
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			fakItemUpdate(rel_item) // fake update related items
			computeSCOACT() // compute related items
		}
		remItemFakeupdated(item) // modification by default again
	}
	//endregion
	//region limit CARACT Dec, Inc based on min item value, max item value
	function limCARACTDecInc(item, dec_item, inc_item, min_item, max_item, rel_item) {
		debugFA("limCARACTDecInc", arguments)
		const min_value = getItemValue(min_item)
		const max_value = getItemValue(max_item)
		limCARDecInc(item, dec_item, inc_item, min_value, max_value)
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			fakItemUpdate(rel_item) // fake update related items
			computeMIXACT() // compute related items
		}
		remItemFakeupdated(item) // modification by default again
	}
	//endregion
    //region limit CARACT Rej, Inj based on min constant, max item value, scoact
	function limCARACTRejInj(item, rej_item, inj_item, rel_item) {
		debugFA("limCARACTRejInj", arguments)
		const min_value = hasItemValue(Val_SCOACT, Min_CARACT) ? // cannot Rej if any
			getItemValue(item) : Min_CAREFF
		const max_value = hasItemValue(Val_SCOACT, Max_CARACT) ? // cannot Inj if any
			getItemValue(item) : getItemValue(rel_item)
		limCARRejInj(item, rej_item, inj_item, min_value, max_value)
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			fakItemUpdate(rel_item) // fake update related items
			computeSCOACT() // compute related items
		}
		remItemFakeupdated(item) // modification by default again
	}
	//endregion
    //region limit CARACT Mns, Pls based on min constant, max constant, scoact
	function limCARACTMnsPls(item, mns_item, pls_item) {
		debugFA("limCARACTMnsPls", arguments)
		const min_value = hasItemValue(Val_SCOACT, Min_CARACT) ? // cannot Mns if any
			getItemValue(item) : Min_CARMOD
		const max_value = hasItemValue(Val_SCOACT, Max_CARACT) ? // cannot Pls if any
			getItemValue(item) : Max_CARMOD
		limCARMnsPls(item, mns_item, pls_item, min_value, max_value)
		if (! hasItemFakeupdated(item)) { // only if it's a real value modification
			computeSCOACT() // compute related items
		}
		remItemFakeupdated(item) // modification by default again
	}
	//endregion
	//endregion
 
	//region CAR Limit
	//region limit CAR Dec, Inc based on min, max values
	function limCARDecInc(item, dec_item, inc_item, min_value, max_value) {
		debugFA("limCARDecInc", arguments)
		remItemClickable(dec_item)
		remItemClickable(inc_item)
		if (! hasItemModifiable(item)) {return} // cannot Dec, Inc
		if (! hasItemValue(item, min_value)) {
			addItemClickable(dec_item)
		}
		if (! hasItemValue(item, max_value)) {
			addItemClickable(inc_item)
		}
	}
	//endregion
    //region limit CAR Rej, Inj based on min, max values
	function limCARRejInj(item, rej_item, inj_item, min_value, max_value) {
		debugFA("limCARRejInj", arguments)
		remItemClickable(item)
		remItemClickable(rej_item)
		remItemClickable(inj_item)
		if (! hasItemSelected(item)) { // cannot Rej, Inj
			// reset himself if any /!\ test to avoid infinite loop
			return hasItemZero(item) ? undefined : setItemZero(item)
		}
		addItemClickable(item) // make himself clickable for reset
		if (! hasItemValue(item, min_value)) {
			addItemClickable(rej_item)
		}
		if (! hasItemValue(item, max_value)) {
			addItemClickable(inj_item)
		}
	}
	//endregion
    //region limit CAR Mns, Pls based on min, max values
	function limCARMnsPls(item, mns_item, pls_item, min_value, max_value) {
		debugFA("limCARMnsPls", arguments)
		remItemClickable(item)
		remItemClickable(mns_item)
		remItemClickable(pls_item)
		if (! hasItemSelected(item)) { // cannot Mns, Pls
			// reset himself if any /!\ test to avoid infinite loop
			return hasItemZero(item) ? undefined : setItemZero(item)
		}
		addItemClickable(item) // make himself clickable for reset
		if (! hasItemValue(item, min_value)) {
			addItemClickable(mns_item)
		}
		if (! hasItemValue(item, max_value)) {
			addItemClickable(pls_item)
		}
	}
	//endregion
	//endregion
	//endregion

	//region Sheet Compute
	//region MAX Compute
	function computeRUTMAX() {
		debugFA("computeRUTMAX", arguments)
		setItemValue(Val_USEMAX, // points used
			getItemValue(Val_PHYMAX) +
			getItemValue(Val_MENMAX) +
			getItemValue(Val_PSYMAX) +
			0 // I know, I know ;)
		)
		setItemValue(Val_REMMAX, // points remainding
			getItemValue(Val_TOTMAX) -
			getItemValue(Val_USEMAX) -
			0 // I know, I know ;)
		)
	}
	function computeMIXMAX() { // floor the CARMAX
		debugFA("computeMIXMAX", arguments)
		setItemValue(Val_PHYMENMAX,
			mxlValue(getItemValue(Val_PHYMAX), getItemValue(Val_MENMAX))
		)
		setItemValue(Val_PHYPSYMAX,
			mxlValue(getItemValue(Val_PHYMAX), getItemValue(Val_PSYMAX))
		)
		setItemValue(Val_MENPSYMAX,
			mxlValue(getItemValue(Val_MENMAX), getItemValue(Val_PSYMAX))
		)
	}
	//endregion

	//region ACT Compute
	function computeINSACT() { // equals the INSMAX
		debugFA("computeINSACT", arguments)
		setItemValue(Val_INSACT, getItemValue(Val_INSMAX))
	}
	function computeCARACT() { // equals the CARMAX
		debugFA("computeCARACT", arguments)
		setItemValue(Val_PHYACT, getItemValue(Val_PHYMAX))
		setItemValue(Val_MENACT, getItemValue(Val_MENMAX))
		setItemValue(Val_PSYACT, getItemValue(Val_PSYMAX))
	}
	function computeMIXACT() { // floor the CARACT
		debugFA("computeMIXACT", arguments)
		setItemValue(Val_PHYMENACT,
			mxlValue(getItemValue(Val_PHYACT), getItemValue(Val_MENACT))
		)
		setItemValue(Val_PHYPSYACT,
			mxlValue(getItemValue(Val_PHYACT), getItemValue(Val_PSYACT))
		)
		setItemValue(Val_MENPSYACT,
			mxlValue(getItemValue(Val_MENACT), getItemValue(Val_PSYACT))
		)
	}
	//endregion

	//region SCO Compute
	function computeSCOACT() {
		debugFA("computeSCOACT", arguments)
		if (hasItemNone(Sel_CARMIXACT)) {return setItemZero(Val_SCOACT)}
		setItemValue(Val_SCOACT, // compute the total score
			getItemValue(getItemValue(Sel_CARMIXACT)) + // pointer to selected CARMIXACT
			getItemValue(Eff_PHYACT) +	            // add efforts
			getItemValue(Eff_MENACT) +
			getItemValue(Eff_PSYACT) +
			getItemValue(Eff_INSACT) +	            // add inspiration
			getItemValue(Mod_SCOACT) +	            // add bonus malus
			getItemValue(Mod_HISACT) +	            // add history
			getItemValue(Mod_OBJACT) +	            // add objects
			getItemValue(Mod_PERACT) +	            // add permanents
			0 // I know, I know ;)
		)
	}
	//endregion
	//endregion

	//region Sheet Modify
	// decrement an item value on an item click 
	function decItemClk(item, clk_item) {
		debugFA("decItemClk", arguments)
		modItemClkMod(item, clk_item, -1)
	}
	// increment an item value on an item click 
	function incItemClk(item, clk_item) {
		debugFA("incItemClk", arguments)
		modItemClkMod(item, clk_item, +1)
	}
	// zerofy an item value on an item click 
	function zroItemClk(item, clk_item) {
		debugFA("zroItemClk", arguments)
		modItemClkMod(item, clk_item, -getItemValue(item))
	}
	// modify an item value on an item click by a mod value
	function modItemClkMod(item, clk_item, mod_value) {
		debugFA("modItemClkMod", arguments)
		if (! hasItemClickable(clk_item)) {return} // cannot Mod
		// modify the item value, adding a "+" if any
		setItemValue(item, getItemValue(item) + mod_value)
	}
	//endregion
	//endregion

	//region Utilities for convenient use
	// fake update item
	function fakItemUpdate(item) {
		debugFA("fakItemUpdate", arguments)
		return fakSheetItemUpdate(sheet, item)
	}
	// get item classes
	function getItemCss(item) {
		debugFA("getItemCss", arguments)
		return getSheetItemCss(sheet, item)
	}
	// set item tooltip yes
	function ttyItemTooltip(item) {
		debugFA("ttyItemTooltip", arguments)
		return setItemTooltip(item, Key_TIPITMClksTtys[item])
	}
	// set item tooltip not
	function ttnItemTooltip(item) {
		debugFA("ttnItemTooltip", arguments)
		return setItemTooltip(item, Key_TIPITMClksTtns[item])
	}
	//endregion

	//region Wrappers for convenient use
	//region Events
	function onItemClickFct(item, fct) {
		debugFA("onItemClickFct", arguments)
		return onSheetItemClickFct(sheet, item, fct)
	}
	function onItemUpdateFct(item, fct) {
		debugFA("onItemUpdateFct", arguments)
		return onSheetItemUpdateFct(sheet, item, fct)
	}
	//endregion

	//region Values
	function getItemValue(item) {
		debugFA("getItemValue", arguments)
		return getSheetItemValue(sheet, item)
	}
	function setItemValue(item, itm_value) {
		debugFA("setItemValue", arguments)
		return setSheetItemValue(sheet, item, itm_value)
	}
	function setItemZero(item) {
		debugFA("setItemZero", arguments)
		return setItemValue(item, Int_Zero)
	}
	function setItemNone(item) {
		debugFA("setItemNone", arguments)
		return setItemValue(item, Str_None)
	}
	function hasItemValue(item, itm_value) {
		debugFA("hasItemValue", arguments)
		return hasSheetItemValue(sheet, item, itm_value)
	}
	function hasItemZero(item) {
		debugFA("hasItemZero", arguments)
		return hasItemValue(item, Int_Zero)
	}
	function hasItemNone(item) {
		debugFA("hasItemNone", arguments)
		return hasItemValue(item, Str_None)
	}
	//endregion

	//region Locked
	function setItemLocked(item) {
		debugFA("setItemLocked", arguments)
		return setSheetItemLocked(sheet, item)
	}
	function setItemUnlocked(item) {
		debugFA("setItemUnlocked", arguments)
		return setSheetItemUnlocked(sheet, item)
	}
	function hasItemLocked(item) {
		debugFA("hasItemLocked", arguments)
		return hasSheetItemLocked(sheet, item)
	}
	//endregion

	//region Folded
	function setItemFolded(item) {
		debugFA("setItemFolded", arguments)
		return setSheetItemFolded(sheet, item)
	}
	function setItemUnfolded(item) {
		debugFA("setItemUnfolded", arguments)
		return setSheetItemUnfolded(sheet, item)
	}
	function hasItemFolded(item) {
		debugFA("hasItemFolded", arguments)
		return hasSheetItemFolded(sheet, item)
	}
	//endregion

	//region Tooltips
	function setItemTooltip(item, itm_tooltip) {
		debugFA("setItemTooltip", arguments)
		return setSheetItemTooltip(sheet, item, itm_tooltip)
	}
	//endregion

	//region Effort
	function addItemEffort(item) {
		debugFA("addItemEffort", arguments)
		return addSheetItemEffort(sheet, item)
	}
	function remItemEffort(item) {
		debugFA("remItemEffort", arguments)
		return remSheetItemEffort(sheet, item)
	}
	function hasItemEffort(item) {
		debugFA("hasItemEffort", arguments)
		return hasSheetItemEffort(sheet, item)
	}	
	//endregion

	//region Dotted10
	function addItemDotted10(item) {
		debugFA("addItemDotted10", arguments)
		return addSheetItemDotted10(sheet, item)
	}
	function remItemDotted10(item) {
		debugFA("remItemDotted10", arguments)
		return remSheetItemDotted10(sheet, item)
	}
	function hasItemDotted10(item) {
		debugFA("hasItemDotted10", arguments)
		return hasSheetItemDotted10(sheet, item)
	}	
	//endregion

	//region Plussigned
	function addItemPlussigned(item) {
		debugFA("addItemPlussigned", arguments)
		return addSheetItemPlussigned(sheet, item)
	}
	function remItemPlussigned(item) {
		debugFA("remItemPlussigned", arguments)
		return remSheetItemPlussigned(sheet, item)
	}
	function hasItemPlussigned(item) {
		debugFA("hasItemPlussigned", arguments)
		return hasSheetItemPlussigned(sheet, item)
	}	
	//endregion

	//region Displayed
	function addItemDisplayed(item) {
		debugFA("addItemDisplayed", arguments)
		return addSheetItemDisplayed(sheet, item)
	}
	function remItemDisplayed(item) {
		debugFA("remItemDisplayed", arguments)
		return remSheetItemDisplayed(sheet, item)
	}
	function hasItemDisplayed(item) {
		debugFA("hasItemDisplayed", arguments)
		return hasSheetItemDisplayed(sheet, item)
	}
	//endregion

	//region Clickable
	function addItemClickable(item) {
		debugFA("addItemClickable", arguments)
		return addSheetItemClickable(sheet, item)
	}
	function remItemClickable(item) {
		debugFA("remItemClickable", arguments)
		return remSheetItemClickable(sheet, item)
	}
	function hasItemClickable(item) {
		debugFA("hasItemClickable", arguments)
		return hasSheetItemClickable(sheet, item)
	}
	//endregion

	//region Modifiable
	function addItemModifiable(item) {
		debugFA("addItemModifiable", arguments)
		return addSheetItemModifiable(sheet, item)
	}
	function remItemModifiable(item) {
		debugFA("remItemModifiable", arguments)
		return remSheetItemModifiable(sheet, item)
	}
	function hasItemModifiable(item) {
		debugFA("hasItemModifiable", arguments)
		return hasSheetItemModifiable(sheet, item)
	}
	//endregion

	//region Selected
	function addItemSelected(item) {
		debugFA("addItemSelected", arguments)
		return addSheetItemSelected(sheet, item)
	}
	function remItemSelected(item) {
		debugFA("remItemSelected", arguments)
		return remSheetItemSelected(sheet, item)
	}
	function hasItemSelected(item) {
		debugFA("hasItemSelected", arguments)
		return hasSheetItemSelected(sheet, item)
	}
	//endregion

	//region Fakeupdated // fake class to avoid computations propagation
	function addItemFakeupdated(item) {
		debugFA("addItemFakeupdated", arguments)
		return addSheetItemFakeupdated(sheet, item)
	}
	function remItemFakeupdated(item) {
		debugFA("remItemFakeupdated", arguments)
		return remSheetItemFakeupdated(sheet, item)
	}
	function hasItemFakeupdated(item) {
		debugFA("hasItemFakeupdated", arguments)
		return hasSheetItemFakeupdated(sheet, item)
	}	
	//endregion
	//endregion
}
//endregion
