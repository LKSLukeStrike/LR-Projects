//region LR_Repeaters
//whatis repeaters are elems, child/ren are items
//region LR_Repeaters Items
const Row_Edit         = "Row_Edit" // repeater entry edit row
const Row_View         = "Row_View" // repeater entry view row
const Del_Entry        = "Del_Entry" // del repeater entry
const New_Entry        = "New_Entry" // new repeater entry
const Inf_Entry        = "Inf_Entry" // inf repeater entry
//endregion

//region LR_Repeaters Values
function getRepValue(rep) { // get a repeater value
	return getElemValue(rep)
}
function setRepValue(rep, rep_value) { // set a repeater value
	return setElemValue(rep, rep_value)
}
//endregion

//region LR_Repeaters Child/ren
function getRepChildren(rep) { // get a repeater children (keys)
	return Object.keys(getRepValue(rep))
}
function getRepChild(rep, child) { // get a repeater child (elem)
	return getElemChild(rep, child)
}
function delRepChildren(rep) { // delete all repeater children
	return setRepValue(rep, {})
}
function delRepChild(rep, child) { // delete one repeater child
	const rep_value = getRepValue(rep)
	delete rep_value[child]
	return setRepValue(rep, rep_value)
}
function newRepChild(rep, tpl_child) { // add a child template at the end of rep
	const rep_value    = getRepValue(rep)
	const rep_children = getRepChildren(rep)
	const max_child    = mxaValue(rep_children)
	const new_child = max_child ?
		max_child + 1 : 1
	const tpl_clone = Object.assign({}, tpl_child) // /!\ avoid to modify the original tpl
	rep_value[new_child] = tpl_clone
	return setRepValue(rep, rep_value)
}
//endregion

//region LR_Repeaters Edit/View
function doeditRep(rep) { // show only the edit row
	const rep_children = getRepChildren(rep)
	rep_children.forEach(function(child) {
		const rep_child = getElemChild(rep, child)
		const row_edit  = getElemChild(rep_child, Row_Edit)
		const row_view  = getElemChild(rep_child, Row_View)
		addElemDisplayed(row_edit)
		remElemDisplayed(row_view)
	})
}
function doviewRep(rep) { // show only the view row
	const rep_children = getRepChildren(rep)
	rep_children.forEach(function(child) {
		const rep_child = getElemChild(rep, child)
		const row_edit  = getElemChild(rep_child, Row_Edit)
		const row_view  = getElemChild(rep_child, Row_View)
		remElemDisplayed(row_edit)
		addElemDisplayed(row_view)
	})
}
//endregion

//region LR_Repeaters Events
function oneRepItemDo(rep, evt, item, do_fct) { // on event on each rep child item
	const rep_children = getRepChildren(rep)

	rep_children.forEach(function(child) { // loop on each child
		const rep_child = getRepChild(rep, child)
		const elem  = getElemChild(rep_child, item)
		elem.on(evt, do_fct)
	})
}
function oncRepItemDo(rep, item, do_fct) { // on click on each rep child item
	return oneRepItemDo(rep, Evt_Click, item, do_fct)
}
function onuRepItemDo(rep, item, do_fct) { // on update on each rep child item
	return oneRepItemDo(rep, Evt_Update, item, do_fct)
}
//endregion

//region LR_Repeaters Each
function eachRepChildrenDo(rep, do_fct) { // do on each rep child
	const rep_children = getRepChildren(rep)

	rep_children.forEach(function(child) { // loop on each child
		const rep_child = getRepChild(rep, child)
		do_fct(rep_child)
	})
}
function eachRepItemDo(rep, item, do_fct) { // do on each rep child item
	const rep_children = getRepChildren(rep)

	rep_children.forEach(function(child) { // loop on each child
		const rep_child = getRepChild(rep, child)
		const elem = getElemChild(rep_child, item)
		do_fct(elem)
	})
}
//endregion
//endregion
