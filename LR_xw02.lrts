function getElemCfkCss(elem, cfk) { // full corresponding css with addons if any
	debugFA("getElemCfkCss", arguments)
	let result = Key_CFKCSS[cfk]
	result += getElemCfkThemeCss(elem, cfk) // add sheet theme css if any
	return result
}
function addElemCfk(elem, cfk) { // multiple cfk allowed in one string
	debugFA("addElemCfk", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		addElemCfk(elem, cfk)
	})} // single elem from here
	cfk.split(Str_Space).forEach(function(cfk) {
		const css = getElemCfkCss(elem, cfk)
		addElemCss(elem, css) // apply to the elem
		if (yesCfkDotted(cfk) // mimics on related dot elem if any
		&&  neqValue(cfk, Cfk_Undisplayed)) { // except for displayed
			addElemCss(val2dotElem(elem), css)
		}
	})
	return cfk
}
function remElemCfk(elem, cfk) { // multiple cfk allowed in one string
	debugFA("remElemCfk", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		remElemCfk(elem, cfk)
	})} // single elem from here
	cfk.split(Str_Space).forEach(function(cfk) {
		const css = getElemCfkCss(elem, cfk)
		remElemCss(elem, css) // apply to the elem
		if (yesCfkDotted(cfk) // mimics on related dot elem if any
		&&  neqValue(cfk, Cfk_Undisplayed)) { // except for displayed
			remElemCss(val2dotElem(elem), css)
		}
	})
	Object.keys(Key_CfkCss).forEach(function(cfk) { // restore any "broken" Cfk
		if (hasElemCfk(elem, cfk)) {
			addElemCfk(elem, cfk)
		}
	})
	return cfk
}
function hasElemCfk(elem, cfk) { // multiple cfk allowed in one string
	debugFA("hasElemCfk", arguments)
	return hasElemCss(elem, cfk) // check only Cfk, not their Css
}
