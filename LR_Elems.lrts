//region LR_Elems
//whatis aka components in LR
//region LR_Elems Getter
function getElem(item, _view) { // returns a view item elem
	debugFA("getElem", arguments)
	const view = LR_Views.top()
	try  {view = tryArg(_view)} finally {}

	let result = null
	try { // skip error when no item
		result = view.get(item)
	} finally {}
	return result
}
//endregion

//region LR_Elems Events
const Evt_Click  = "click"
const Evt_Update = "update"
function oneElemDo(elem, evt, do_fct) { // on event
	debugFA("oneElemDo", arguments)
	return elem.on(evt, do_fct)
}
function oncElemDo(elem, do_fct) { // on click
	debugFA("oncElemDo", arguments)
	return oneElemDo(elem, Evt_Click, do_fct)
}
function onuElemDo(elem, do_fct) { // on update
	debugFA("onuElemDo", arguments)
	return oneElemDo(elem, Evt_Update, do_fct)
}
function oneElemChildDo(elem, child, evt, do_fct) { // on child event
	debugFA("oneElemChildDo", arguments)
	return elem.on(evt, child, do_fct)
}
function oncElemChildDo(elem, child, do_fct) { // on child click
	debugFA("oncElemChildDo", arguments)
	return oneElemChildDo(elem, child, Evt_Click, do_fct)
}
function onuElemChildDo(elem, child, do_fct) { // on child update
	debugFA("onuElemChildDo", arguments)
	return oneElemChildDo(elem, child, Evt_Update, do_fct)
}
//endregion

//region LR_Elems Attributes
function getElemParent(elem) {
	debugFA("getElemParent", arguments)
	let result = null
	try { // skip error when no parent
		result = elem.parent()
	} finally {}
	return result
}
function getElemChild(elem, child) {
	debugFA("getElemChild", arguments)
	let result = null
	try { // skip error when no child
		result = elem.find(child)
	} finally {}
	return result
}
function getElemSheet(elem) {
	debugFA("getElemSheet", arguments)
	let result = null
	try { // skip error when no sheet
		result = elem.sheet()
	} finally {}
	return result
}
function getElemView(elem) { // view is the sheet (aliases)
	debugFA("getElemView", arguments)
	return getElemSheet(elem)
}
function getElemName(elem) {
	debugFA("getElemName", arguments)
	let result = null
	try { // skip error when no name
		result = elem.name()
	} finally {}
	return result
}
function getElemId(elem) {
	debugFA("getElemId", arguments)
	let result = null
	try { // skip error when no id
		result = elem.id()
	} finally {}
	return result
}
function getElemItem(elem) { // item is the id (aliases)
	debugFA("getElemItem", arguments)
	return getElemId(elem)
}
function getElemIndex(elem) {
	debugFA("getElemIndex", arguments)
	let result = null
	try { // skip error when no index
		result = elem.index()
	} finally {}
	return result
}
function getElemTypeof(elem) {
	debugFA("getElemTypeof", arguments)
	return typeof elem
}
function getElemChildren(elem) { // return children ids (get them with find)
	debugFA("getElemChildren", arguments)
	const elm_value = getElemValue(elem)
	if (notElem(elm_value)) {return Arr_None} // not an elem so no children
	return Object.keys(elm_value)
}
//endregion

//region LR_Elems Values
function getElemValue(elem) {
	debugFA("getElemValue", arguments)
	let result = null
	try { // skip error when no value
		const elm_value = elem.value()
		result = Number.isNaN(Number(elm_value)) ? // right type
			elm_value : Number(elm_value)
	} finally {}
	return result
}
function setElemValue(elem, elm_value) {
	debugFA("setElemValue", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		setElemValue(elem, elm_value)
	})} // single elem from here
	elm_value = hasElemPlussigned(elem) // plussigned representation if any
	&& ygtValue(elm_value, Int_Zero) ?
		pfxValue(elm_value, Str_Plus) : elm_value
	if (! hasElemFakeupdated(elem)) { // avoid propagation dead loop
		elem.value(elm_value)
	}; remElemFakeupdated(elem)
	setElemDotted(elem) // dotted representation if any
	return elm_value
}
function rsaElemValue(elem, value_str, value_rpl) { // replace a string all
	debugFA("rsaElemValue", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		rsaElemValue(elem, value_str, value_rpl)
	})} // single elem from here
	const elm_value = rsaValue(getElemValue(elem), value_str, value_rpl)
	return setElemValue(elem, elm_value)
}
function hasElemValue(elem, elm_value) {
	debugFA("hasElemValue", arguments)
	return yeqValue(getElemValue(elem), elm_value)
}
function ysiElemValue(elem, value_str) { // if includes a string
	debugFA("ysiElemValue", arguments)
	return ysiValue(getElemValue(elem), value_str)
}
//endregion

//region LR_Elems Locked
const Str_Locked   = ":lock:"
const Str_Unlocked = ":lock-open:"
function setElemLocked(elem) {
	debugFA("setElemLocked", arguments)
	return setElemValue(elem, Str_Locked)
}
function setElemUnlocked(elem) {
	debugFA("setElemUnlocked", arguments)
	return setElemValue(elem, Str_Unlocked)
}
function togElemLocked(elem) {
	debugFA("togElemLocked", arguments)
	return hasElemLocked(elem) ?
		setElemUnlocked(elem) : setElemLocked(elem)
}
function hasElemLocked(elem) {
	debugFA("hasElemLocked", arguments)
	return hasElemValue(elem, Str_Locked)
}
//endregion

//region LR_Elems Folded
const Str_Folded   = ":sort-up:"
const Str_Unfolded = ":sort-down:"
function setElemFolded(elem) {
	debugFA("setElemFolded", arguments)
	return rsaElemValue(elem, Str_Unfolded, Str_Folded)
}
function setElemUnfolded(elem) {
	debugFA("setElemUnfolded", arguments)
	return rsaElemValue(elem, Str_Folded, Str_Unfolded)
}
function togElemFolded(elem) {
	debugFA("togElemFolded", arguments)
	return hasElemFolded(elem) ?
		setElemUnfolded(elem) : setElemFolded(elem)
}
function hasElemFolded(elem) {
	debugFA("hasElemFolded", arguments)
	return ysiElemValue(elem, Str_Folded)
}
//endregion

//region LR_Elems Tooltips
function setElemTooltip(elem, str_tooltip) {
	debugFA("setElemTooltip", arguments)
	try { // skip error when no tooltip
		elem.setToolTip(str_tooltip)
	} finally {}
	return str_tooltip
}
//endregion

//region LR_Elems Css Classes
const Css_DFlex			  = "d-flex" // add/remove for displayed on containers to work
const Css_WidgetContainer = "widget-container" // identify a container
const Css_DNone			  = "d-none"
const Css_Clickable		  = "clickable"
const Css_BgSecondary     = "bg-secondary"
const Css_Repeater        = "repeater"
const Css_RepeaterElement = "repeater-element"
function yesDFlexElem(elem) { // if require to add/rem dflex
	debugFA("yesDFlexElem", arguments)
	let result = hasElemCss(elem, Css_WidgetContainer)
	return result
}
function yesDFlexCss(css) { // if require to add/rem dflex
	debugFA("yesDFlexCss", arguments)
	let result = yeqValue(css, Css_DNone)
	return result
}
function yesDFlex(elem, css) { // if require to add/rem dflex
	debugFA("yesDFlex", arguments)
	let result = yesDFlexElem(elem) && yesDFlexCss(css)
	return result
}
function addElemCss(elem, css) { // multiple css allowed in one string
	debugFA("addElemCss", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		addElemCss(elem, css)
	})} // single elem from here
	css.split(Str_Space).forEach(function(css) {
		try { // skip error when no css classes
			if (yesDFlex(elem, css)) {
				elem.removeClass(Css_DFlex)
			}
			elem.addClass(css)
		} finally {}
	})
	return css
}
function remElemCss(elem, css) { // multiple css allowed in one string
	debugFA("remElemCss", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		remElemCss(elem, css)
	})} // single elem from here
	css.split(Str_Space).forEach(function(css) {
		try { // skip error when no css classes
			if (yesDFlex(elem, css)) {
				elem.addClass(Css_DFlex)
			}
			elem.removeClass(css)
		} finally {}
	})
	return css
}
function hasElemCss(elem, css) { // multiple css allowed in one string
	debugFA("hasElemCss", arguments)
	let result = true
	css.split(Str_Space).forEach(function(css) { // every css has to be present
		try { // skip error when no css classes
			if (! elem.hasClass(css)) {result = false}
		} catch(e) {result = false}
	})
	return result
}
function getElemCss(elem) {
	debugFA("getElemCss", arguments)
	let result = []
	try { // skip error when no css classes
		result = elem.getClasses()
	} finally {}
	return result
}
//endregion

//region LR_Elems Cfk Classes
const Cfk_Effort      = "Cfk_Effort"		// has an effort related item
const Cfk_Modder      = "Cfk_Modder"		// has an modder related item
const Cfk_Dotter      = "Cfk_Dotter"		// dotter prefix
const Cfk_Dotter01    = "Cfk_Dotter01"		// use a dotter01
const Cfk_Dotter02    = "Cfk_Dotter02"		// use a dotter02
const Cfk_Dotter03    = "Cfk_Dotter03"		// use a dotter03
const Cfk_Dotter04    = "Cfk_Dotter04"		// use a dotter04
const Cfk_Dotter05    = "Cfk_Dotter05"		// use a dotter05
const Cfk_Dotter06    = "Cfk_Dotter06"		// use a dotter06
const Cfk_Dotter07    = "Cfk_Dotter07"		// use a dotter07
const Cfk_Dotter08    = "Cfk_Dotter08"		// use a dotter08
const Cfk_Dotter09    = "Cfk_Dotter09"		// use a dotter09
const Cfk_Dotter10    = "Cfk_Dotter10"		// use a dotter10
const Cfk_Dosted      = "Cfk_Dosted"		// has a dosted value representation
const Cfk_Dosted01    = "Cfk_Dosted01"		// has a dosted01 value representation
const Cfk_Dosted02    = "Cfk_Dosted02"		// has a dosted02 value representation
const Cfk_Dosted03    = "Cfk_Dosted03"		// has a dosted03 value representation
const Cfk_Dosted04    = "Cfk_Dosted04"		// has a dosted04 value representation
const Cfk_Dosted05    = "Cfk_Dosted05"		// has a dosted05 value representation
const Cfk_Dosted06    = "Cfk_Dosted06"		// has a dosted06 value representation
const Cfk_Dosted07    = "Cfk_Dosted07"		// has a dosted07 value representation
const Cfk_Dosted08    = "Cfk_Dosted08"		// has a dosted08 value representation
const Cfk_Dosted09    = "Cfk_Dosted09"		// has a dosted09 value representation
const Cfk_Dosted10    = "Cfk_Dosted10"		// has a dosted10 value representation
const Cfk_Dotted      = "Cfk_Dotted"		// has a dotted value representation
const Cfk_Dotted01    = "Cfk_Dotted01"		// has a dotted01 value representation
const Cfk_Dotted02    = "Cfk_Dotted02"		// has a dotted02 value representation
const Cfk_Dotted03    = "Cfk_Dotted03"		// has a dotted03 value representation
const Cfk_Dotted04    = "Cfk_Dotted04"		// has a dotted04 value representation
const Cfk_Dotted05    = "Cfk_Dotted05"		// has a dotted05 value representation
const Cfk_Dotted06    = "Cfk_Dotted06"		// has a dotted06 value representation
const Cfk_Dotted07    = "Cfk_Dotted07"		// has a dotted07 value representation
const Cfk_Dotted08    = "Cfk_Dotted08"		// has a dotted08 value representation
const Cfk_Dotted09    = "Cfk_Dotted09"		// has a dotted09 value representation
const Cfk_Dotted10    = "Cfk_Dotted10"		// has a dotted10 value representation
const Cfk_Plussigned  = "Cfk_Plussigned"	// allows to show "+" for positive values
const Cfk_Undisplayed = "Cfk_Undisplayed"	// allows to show/hide items
const Cfk_Clickable   = "Cfk_Clickable"		// allows to react to onclick
const Cfk_Modifiable  = "Cfk_Modifiable"	// allows only dec, inc
const Cfk_Selected    = "Cfk_Selected"		// allows only rej, inj
const Cfk_Fakeupdated = "Cfk_Fakeupdated"	// avoid computations propagation
const Key_CFKCSS      = { // relation between cfk and css /!\ space to separate
	Cfk_Effort        : Cfk_Effort      ,
	Cfk_Modder        : Cfk_Modder      ,
	Cfk_Dotter        : Cfk_Dotter      ,
	Cfk_Dotter01      : Cfk_Dotter01    ,
	Cfk_Dotter02      : Cfk_Dotter02    ,
	Cfk_Dotter03      : Cfk_Dotter03    ,
	Cfk_Dotter04      : Cfk_Dotter04    ,
	Cfk_Dotter05      : Cfk_Dotter05    ,
	Cfk_Dotter06      : Cfk_Dotter06    ,
	Cfk_Dotter07      : Cfk_Dotter07    ,
	Cfk_Dotter08      : Cfk_Dotter08    ,
	Cfk_Dotter09      : Cfk_Dotter09    ,
	Cfk_Dotter10      : Cfk_Dotter10    ,
	Cfk_Dosted        : Cfk_Dosted      ,
	Cfk_Dosted01      : Cfk_Dosted      + Str_Space + Cfk_Dotter01,
	Cfk_Dosted02      : Cfk_Dosted      + Str_Space + Cfk_Dotter02,
	Cfk_Dosted03      : Cfk_Dosted      + Str_Space + Cfk_Dotter03,
	Cfk_Dosted04      : Cfk_Dosted      + Str_Space + Cfk_Dotter04,
	Cfk_Dosted05      : Cfk_Dosted      + Str_Space + Cfk_Dotter05,
	Cfk_Dosted06      : Cfk_Dosted      + Str_Space + Cfk_Dotter06,
	Cfk_Dosted07      : Cfk_Dosted      + Str_Space + Cfk_Dotter07,
	Cfk_Dosted08      : Cfk_Dosted      + Str_Space + Cfk_Dotter08,
	Cfk_Dosted09      : Cfk_Dosted      + Str_Space + Cfk_Dotter09,
	Cfk_Dosted10      : Cfk_Dosted      + Str_Space + Cfk_Dotter10,
	Cfk_Dotted        : Cfk_Dotted      ,
	Cfk_Dotted01      : Cfk_Dotted      + Str_Space + Cfk_Dotter01,
	Cfk_Dotted02      : Cfk_Dotted      + Str_Space + Cfk_Dotter02,
	Cfk_Dotted03      : Cfk_Dotted      + Str_Space + Cfk_Dotter03,
	Cfk_Dotted04      : Cfk_Dotted      + Str_Space + Cfk_Dotter04,
	Cfk_Dotted05      : Cfk_Dotted      + Str_Space + Cfk_Dotter05,
	Cfk_Dotted06      : Cfk_Dotted      + Str_Space + Cfk_Dotter06,
	Cfk_Dotted07      : Cfk_Dotted      + Str_Space + Cfk_Dotter07,
	Cfk_Dotted08      : Cfk_Dotted      + Str_Space + Cfk_Dotter08,
	Cfk_Dotted09      : Cfk_Dotted      + Str_Space + Cfk_Dotter09,
	Cfk_Dotted10      : Cfk_Dotted      + Str_Space + Cfk_Dotter10,
	Cfk_Plussigned    : Cfk_Plussigned  ,
	Cfk_Undisplayed   : Cfk_Undisplayed + Str_Space + Css_DNone,
	Cfk_Clickable     : Cfk_Clickable   + Str_Space + Css_Clickable,
	Cfk_Modifiable    : Cfk_Modifiable  ,
	Cfk_Selected      : Cfk_Selected    + Str_Space + Css_BgSecondary,
	Cfk_Fakeupdated   : Cfk_Fakeupdated ,
}
function getElemCfkCss(elem, cfk) { // full corresponding css with addons if any
	debugFA("getElemCfkCss", arguments)
	let result = Key_CFKCSS[cfk]
	result += getElemCfkThemeCss(elem, cfk) // add sheet theme css if any
	return result
}
function addElemCfk(elem, cfk) { // multiple cfk allowed in one string
	debugFA("addElemCfk", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		addElemCfk(elem, cfk)
	})} // single elem from here
	cfk.split(Str_Space).forEach(function(cfk) {
		const css = getElemCfkCss(elem, cfk)
		addElemCss(elem, css) // apply to the elem
		if (yesCfkDotted(cfk) // mimics on related dot elem if any
		&&  neqValue(cfk, Cfk_Undisplayed)) { // except for displayed
			addElemCss(val2dotElem(elem), css)
		}
	})
	return cfk
}
function remElemCfk(elem, cfk) { // multiple cfk allowed in one string
	debugFA("remElemCfk", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		remElemCfk(elem, cfk)
	})} // single elem from here
	cfk.split(Str_Space).forEach(function(cfk) {
		const css = getElemCfkCss(elem, cfk)
		remElemCss(elem, css) // apply to the elem
		if (yesCfkDotted(cfk) // mimics on related dot elem if any
		&&  neqValue(cfk, Cfk_Undisplayed)) { // except for displayed
			remElemCss(val2dotElem(elem), css)
		}
	})
	Object.keys(Key_CFKCSS).forEach(function(cfk) { // restore any "broken" Cfk
		if (hasElemCfk(elem, cfk)) {
			addElemCfk(elem, cfk)
		}
	})
	return cfk
}
function hasElemCfk(elem, cfk) { // multiple cfk allowed in one string
	debugFA("hasElemCfk", arguments)
	return hasElemCss(elem, cfk) // check only Cfk, not their Css
}
//endregion

//region LR_Elems Cfk Theme
const Arr_CFKTHM      = [ // cfk that support theme
	Cfk_Clickable,
	Cfk_Modifiable,
	Cfk_Selected,
]	
function yesCfkTheme(cfk) { // if cfk support theme
	debugFA("yesCfkTheme", arguments)
	return yaiValue(Arr_CFKTHM, cfk)
}
function notCfkTheme(cfk) { // if not cfk support theme
	debugFA("notCfkTheme", arguments)
	return ! yesCfkTheme(cfk)
}
function getElemCfkThemeCss(elem, cfk) { // theme css if any
	debugFA("getElemCfkThemeCss", arguments)
	let result = Str_None
	if (yesCfkTheme(cfk)) { // add the elem sheet theme if any
		try { // skip error if any
			const prf_theme = getSheetThemePrf()
			result += Str_Space + prf_theme
		} finally {}
	}
	return result
}
//endregion

//region LR_Elems Cfk Effort
function addElemEffort(elem) {
	debugFA("addElemEffort", arguments)
	return addElemCfk(elem, Cfk_Effort)			// normal operation
}
function remElemEffort(elem) {
	debugFA("remElemEffort", arguments)
	return remElemCfk(elem, Cfk_Effort)			// normal operation
}
function hasElemEffort(elem) {
	debugFA("hasElemEffort", arguments)
	return hasElemCfk(elem, Cfk_Effort)			// normal operation
}
//endregion

//region LR_Elems Cfk Modder
function addElemModder(elem) {
	debugFA("addElemModder", arguments)
	return addElemCfk(elem, Cfk_Modder)			// normal operation
}
function remElemModder(elem) {
	debugFA("remElemModder", arguments)
	return remElemCfk(elem, Cfk_Modder)			// normal operation
}
function hasElemModder(elem) {
	debugFA("hasElemModder", arguments)
	return hasElemCfk(elem, Cfk_Modder)			// normal operation
}
//endregion

//region LR_Elems Cfk Dotted // Fakeupdate
const Yes_Dotted    = true
const Not_Dotted    = false
const Arr_Dotter01  = ["01",]
const Arr_Dotter02  = ["01", "02",]
const Arr_Dotter03  = ["01", "02", "03",]
const Arr_Dotter04  = ["01", "02", "03", "04",]
const Arr_Dotter05  = ["01", "02", "03", "04", "05",]
const Arr_Dotter06  = ["01", "02", "03", "04", "05", "06",]
const Arr_Dotter07  = ["01", "02", "03", "04", "05", "06", "07",]
const Arr_Dotter08  = ["01", "02", "03", "04", "05", "06", "07", "08",]
const Arr_Dotter09  = ["01", "02", "03", "04", "05", "06", "07", "08", "09",]
const Arr_Dotter10  = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10",]
const Key_CFKDOT    = { // relation between cfk_dottednn and arr_dotternn
	Cfk_Dotted01 : Arr_Dotter01,
	Cfk_Dotted02 : Arr_Dotter02,
	Cfk_Dotted03 : Arr_Dotter03,
	Cfk_Dotted04 : Arr_Dotter04,
	Cfk_Dotted05 : Arr_Dotter05,
	Cfk_Dotted06 : Arr_Dotter06,
	Cfk_Dotted07 : Arr_Dotter07,
	Cfk_Dotted08 : Arr_Dotter08,
	Cfk_Dotted09 : Arr_Dotter09,
	Cfk_Dotted10 : Arr_Dotter10,
}
const Str_DotEmpty     = ":ga_circle:"
const Str_DotPlain     = ":ga_plain-circle:"
const Str_DotIncrement = ":chevron-circle-right:"
const Str_DotDecrement = ":chevron-circle-left:"
const Str_DotInject    = ":chevron-circle-down:"
const Str_DotReject    = ":chevron-circle-up:"
const Str_DotPlus      = ":plus-circle:"
const Str_DotMinus     = ":minus-circle:"
//region LR_Elems Cfk Dotted Dotter/Checks
function yesCfkDotted(cfk) { // if cfk is a dotted one
	debugFA("yesCfkDotted", arguments)
	return ykiObject(Key_CFKDOT, cfk)
}
function notCfkDotted(cfk) { // if not cfk is a dotted one
	debugFA("notCfkDotted", arguments)
	return ! yesCfkDotted(cfk)
}
function getElemDotter(elem) {
	debugFA("getElemDotter", arguments)
	const result = Not_Dotted
	Object.keys(Key_CFKDOT).forEach(function(cfk_dottednn) {
		if (hasElemCfk(elem, cfk_dottednn)) { // related arr_dotternn
			result = Key_CFKDOT[cfk_dottednn]
		}
	})
	return result
}
function yesElemDotted(elem) { // if elem is dotted
	debugFA("yesElemDotted", arguments)
	return getElemDotter(elem) ?
		Yes_Dotted : Not_Dotted
}
function notElemDotted(elem) { // if not elem is dotted
	debugFA("notElemDotted", arguments)
	return ! yesElemDotted(elem)
}
//endregion
//region LR_Elems Cfk Dotted Values
function setElemDotted(elem) { // dotted representation if any
	debugFA("setElemDotted", arguments)
	const arr_dotternn = getElemDotter(elem)
	return arr_dotternn ?
		setElemDottedNN(elem, arr_dotternn) : Not_Dotted
}
function setElemDottedNN(elem, arr_dotternn) { // dottednn representation if any
	debugFA("setElemDottedNN", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		setElemDottedNN(elem, arr_dotternn)
	})} // single elem from here
	if (notElemDotted(elem)) {return Not_Dotted} // no dotted representation

	const elm_value = getElemValue(elem)
	const eff_value = hasElemEffort(elem) ? // effort representation if any
		getElemValue(val2effElem(elem)) : Int_Zero
	const mod_value = hasElemModder(elem) ? // modder representation if any
		getElemValue(val2modElem(elem)) : Int_Zero
	const dos_elem  = val2dosElem(elem)
	const dot_elem  = val2dotElem(elem)

	arr_dotternn.forEach(function(str_dotternn) {
		const int_dotternn = Number(str_dotternn)
		// compute the dot representation // TODO add modder
		if (ygtValue(int_dotternn, elm_value)) {
			const dot_value = Str_DotEmpty
		} else if (ygtValue(int_dotternn, elm_value - eff_value)) {
			const dot_value = Str_DotInject
		} else {
			const dot_value = Str_DotPlain
		}
		// apply to dotted item if any
		if (dot_elem) {
			const dot_item   = getElemItem(dot_elem)
			const dot_itemnn = sfxValue(dot_item, str_dotternn)
			const dot_elemnn = getElem(dot_itemnn)
			dot_elemnn.value(dot_value)
		}
	})
	return Yes_Dotted
}
//endregion
//region LR_Elems Cfk DottedNN
function addElemDottedNN(elem, cfk_dottednn) {
	debugFA("addElemDottedNN", arguments)
	addElemCfk(elem, cfk_dottednn)					// normal operation
	return fakElemUpdate(elem)
}
function remElemDottedNN(elem, cfk_dottednn) {
	debugFA("remElemDottedNN", arguments)
	remElemCfk(elem, cfk_dottednn)					// normal operation
	return fakElemUpdate(elem)
}
function hasElemDottedNN(elem, cfk_dottednn) {
	debugFA("hasElemDottedNN", arguments)
	return hasElemCfk(elem, cfk_dottednn)			// normal operation
}
//endregion
//region LR_Elems Cfk Dotted01 - Dotted10
//region LR_Elems Cfk Dotted01
function addElemDotted01(elem) {
	debugFA("addElemDotted01", arguments)
	return addElemDottedNN(elem, Cfk_Dotted01)
}
function remElemDotted01(elem) {
	debugFA("remElemDotted01", arguments)
	return remElemDottedNN(elem, Cfk_Dotted01)
}
function hasElemDotted01(elem) {
	debugFA("hasElemDotted01", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted01)
}
//endregion
//region LR_Elems Cfk Dotted02
function addElemDotted02(elem) {
	debugFA("addElemDotted02", arguments)
	return addElemDottedNN(elem, Cfk_Dotted02)
}
function remElemDotted02(elem) {
	debugFA("remElemDotted02", arguments)
	return remElemDottedNN(elem, Cfk_Dotted02)
}
function hasElemDotted02(elem) {
	debugFA("hasElemDotted02", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted02)
}
//endregion
//region LR_Elems Cfk Dotted03
function addElemDotted03(elem) {
	debugFA("addElemDotted03", arguments)
	return addElemDottedNN(elem, Cfk_Dotted03)
}
function remElemDotted03(elem) {
	debugFA("remElemDotted03", arguments)
	return remElemDottedNN(elem, Cfk_Dotted03)
}
function hasElemDotted03(elem) {
	debugFA("hasElemDotted03", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted03)
}
//endregion
//region LR_Elems Cfk Dotted04
function addElemDotted04(elem) {
	debugFA("addElemDotted04", arguments)
	return addElemDottedNN(elem, Cfk_Dotted04)
}
function remElemDotted04(elem) {
	debugFA("remElemDotted04", arguments)
	return remElemDottedNN(elem, Cfk_Dotted04)
}
function hasElemDotted04(elem) {
	debugFA("hasElemDotted04", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted04)
}
//endregion
//region LR_Elems Cfk Dotted05
function addElemDotted05(elem) {
	debugFA("addElemDotted05", arguments)
	return addElemDottedNN(elem, Cfk_Dotted05)
}
function remElemDotted05(elem) {
	debugFA("remElemDotted05", arguments)
	return remElemDottedNN(elem, Cfk_Dotted05)
}
function hasElemDotted05(elem) {
	debugFA("hasElemDotted05", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted05)
}
//endregion
//region LR_Elems Cfk Dotted06
function addElemDotted06(elem) {
	debugFA("addElemDotted06", arguments)
	return addElemDottedNN(elem, Cfk_Dotted06)
}
function remElemDotted06(elem) {
	debugFA("remElemDotted06", arguments)
	return remElemDottedNN(elem, Cfk_Dotted06)
}
function hasElemDotted06(elem) {
	debugFA("hasElemDotted06", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted06)
}
//endregion
//region LR_Elems Cfk Dotted07
function addElemDotted07(elem) {
	debugFA("addElemDotted07", arguments)
	return addElemDottedNN(elem, Cfk_Dotted07)
}
function remElemDotted07(elem) {
	debugFA("remElemDotted07", arguments)
	return remElemDottedNN(elem, Cfk_Dotted07)
}
function hasElemDotted07(elem) {
	debugFA("hasElemDotted07", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted07)
}
//endregion
//region LR_Elems Cfk Dotted08
function addElemDotted08(elem) {
	debugFA("addElemDotted08", arguments)
	return addElemDottedNN(elem, Cfk_Dotted08)
}
function remElemDotted08(elem) {
	debugFA("remElemDotted08", arguments)
	return remElemDottedNN(elem, Cfk_Dotted08)
}
function hasElemDotted08(elem) {
	debugFA("hasElemDotted08", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted08)
}
//endregion
//region LR_Elems Cfk Dotted09
function addElemDotted09(elem) {
	debugFA("addElemDotted09", arguments)
	return addElemDottedNN(elem, Cfk_Dotted09)
}
function remElemDotted09(elem) {
	debugFA("remElemDotted09", arguments)
	return remElemDottedNN(elem, Cfk_Dotted09)
}
function hasElemDotted09(elem) {
	debugFA("hasElemDotted09", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted09)
}
//endregion
//region LR_Elems Cfk Dotted10
function addElemDotted10(elem) {
	debugFA("addElemDotted10", arguments)
	return addElemDottedNN(elem, Cfk_Dotted10)
}
function remElemDotted10(elem) {
	debugFA("remElemDotted10", arguments)
	return remElemDottedNN(elem, Cfk_Dotted10)
}
function hasElemDotted10(elem) {
	debugFA("hasElemDotted10", arguments)
	return hasElemDottedNN(elem, Cfk_Dotted10)
}
//endregion
//endregion
//endregion

//region LR_Elems Cfk Plussigned // Fakeupdate
function addElemPlussigned(elem) {
	debugFA("addElemPlussigned", arguments)
	addElemCfk(elem, Cfk_Plussigned)			// normal operation
	return fakElemUpdate(elem)
}
function remElemPlussigned(elem) {
	debugFA("remElemPlussigned", arguments)
	remElemCfk(elem, Cfk_Plussigned)			// normal operation
	return fakElemUpdate(elem)
}
function hasElemPlussigned(elem) {
	debugFA("hasElemPlussigned", arguments)
	return hasElemCfk(elem, Cfk_Plussigned)		// normal operation
}
//endregion

//region LR_Elems Cfk Displayed
function addElemDisplayed(elem) {
	debugFA("addElemDisplayed", arguments)
	return remElemCfk(elem, Cfk_Undisplayed)	// reverse operation
}
function remElemDisplayed(elem) {
	debugFA("remElemDisplayed", arguments)
	return addElemCfk(elem, Cfk_Undisplayed)	// reverse operation
}
function hasElemDisplayed(elem) {
	debugFA("hasElemDisplayed", arguments)
	return ! hasElemCfk(elem, Cfk_Undisplayed)	// reverse operation
}
//endregion

//region LR_Elems Cfk Clickable
function addElemClickable(elem) {
	debugFA("addElemClickable", arguments)
	return addElemCfk(elem, Cfk_Clickable)		// normal operation
}
function remElemClickable(elem) {
	debugFA("remElemClickable", arguments)
	return remElemCfk(elem, Cfk_Clickable)		// normal operation
}
function hasElemClickable(elem) {
	debugFA("hasElemClickable", arguments)
	return hasElemCfk(elem, Cfk_Clickable)		// normal operation
}
//endregion

//region LR_Elems Cfk Modifiable // Fakeupdate
function addElemModifiable(elem) {
	debugFA("addElemModifiable", arguments)
	addElemCfk(elem, Cfk_Modifiable)			// normal operation
	return fakElemUpdate(elem)
}
function remElemModifiable(elem) {
	debugFA("remElemModifiable", arguments)
	remElemCfk(elem, Cfk_Modifiable)			// normal operation
	return fakElemUpdate(elem)
}
function hasElemModifiable(elem) {
	debugFA("hasElemModifiable", arguments)
	return hasElemCfk(elem, Cfk_Modifiable)		// normal operation
}
//endregion

//region LR_Elems Cfk Selected // Fakeupdate // Toggle Modifiable
function addElemSelected(elem) {
	debugFA("addElemSelected", arguments)
	remElemModifiable(elem)						// toggle modifiable/selected
	addElemCfk(elem, Cfk_Selected)				// normal operation
	return fakElemUpdate(elem)
}
function remElemSelected(elem) {
	debugFA("remElemSelected", arguments)
	addElemModifiable(elem)						// toggle modifiable/selected
	remElemCfk(elem, Cfk_Selected)				// normal operation
	return fakElemUpdate(elem)
}
function hasElemSelected(elem) {
	debugFA("hasElemSelected", arguments)
	return hasElemCfk(elem, Cfk_Selected)		// normal operation
}
//endregion

//region LR_Elems Cfk Fakeupdated
function addElemFakeupdated(elem) {
	debugFA("addElemFakeupdated", arguments)
	return addElemCfk(elem, Cfk_Fakeupdated)	// normal operation
}
function remElemFakeupdated(elem) {
	debugFA("remElemFakeupdated", arguments)
	return remElemCfk(elem, Cfk_Fakeupdated)	// normal operation
}
function hasElemFakeupdated(elem) {
	debugFA("hasElemFakeupdated", arguments)
	return hasElemCfk(elem, Cfk_Fakeupdated)	// normal operation
}
function fakElemUpdate(elem) {
	debugFA("fakElemUpdate", arguments)
	if (yesArray(elem)) {return elem.forEach(function(elem) { // recursive
		fakElemUpdate(elem)
	})} // single elem from here
	addElemFakeupdated(elem) // avoid computations propagation
	return setElemValue(elem, getElemValue(elem)) // provoke the fake update
}
//endregion

//region LR_Elems Related
function one2twoElem(elem, prefix_one, prefix_two) { // one related two elem
	debugFA("one2twoElem", arguments)
	const result = null
	try {
		const elm_item  = getElemItem(elem)
		const rel_item  = one2twoItem(elm_item, prefix_one, prefix_two)
		result 			= getElem(rel_item)
	} finally {}
	return result
}
function val2dxvElem(elem) { // val related dxv elem
	debugFA("val2dxvElem", arguments)
	return one2twoElem(elem, Str_PFXVAL, Str_PFXDXV)
}
function val2dosElem(elem) { // val related dos elem
	debugFA("val2dosElem", arguments)
	return one2twoElem(elem, Str_PFXVAL, Str_PFXDOS)
}
function val2dotElem(elem) { // val related dot elem
	debugFA("val2dotElem", arguments)
	return one2twoElem(elem, Str_PFXVAL, Str_PFXDOT)
}
function val2effElem(elem) { // val related eff elem
	debugFA("val2effElem", arguments)
	return one2twoElem(elem, Str_PFXVAL, Str_PFXEFF)
}
function val2modElem(elem) { // val related mod elem
	debugFA("val2modElem", arguments)
	return one2twoElem(elem, Str_PFXVAL, Str_PFXMOD)
}
function val2chkElem(elem) { // val related chk elem
	debugFA("val2chkElem", arguments)
	return one2twoElem(elem, Str_PFXVAL, Str_PFXCHK)
}
function eff2valElem(elem) { // eff related val elem
	debugFA("eff2valElem", arguments)
	return one2twoElem(elem, Str_PFXEFF, Str_PFXVAL)
}
function chk2valElem(elem) { // chk related val elem
	debugFA("chk2valElem", arguments)
	return one2twoElem(elem, Str_PFXCHK, Str_PFXVAL)
}
//endregion

//region LR_Elems Repeaters
function rptElemDoIf(elem, _do_fct, _if_fct) { // apply fct on repeater if true
	debugFA("rptElemDoIf", arguments)
	const do_fct = function(elem) {
		debugFA("rptElemDoIf_do_fct", arguments)
		debugElem(elem, Yes_Debug, Yes_Indent)
		return true // true to continue recursive
	}
	const if_fct = function(elem) {
		debugFA("rptElemDoIf_if_fct", arguments)
		return true // true to do action function
	}
	try  {do_fct = tryArg(_do_fct)}	finally {}
	try  {if_fct = tryArg(_if_fct)}	finally {}

	if (notElem(elem)) {return} // not an elem
	if (if_fct(elem)) {
		const yes_recursive = do_fct(elem) // on 2 lines to avoid LR bouncing
		if (! yes_recursive) {return} // interrupt recursive 
	}
	const elm_children = getElemChildren(elem) // on 2 lines to avoid LR bouncing
	elm_children.forEach(function(child) { // recursive
		rptElemDoIf(getElemChild(elem, child), do_fct, if_fct)
	})
}
//endregion
//endregion
