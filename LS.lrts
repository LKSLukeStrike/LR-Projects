//region LR_ (LR Library)
//region LR_Constants
//region LR_Constants Values
const Int_Zero     = 0
const Int_POne     = +1
const Int_MOne     = -1
const Str_Zero     = "0"
const Str_None     = ""
const Arr_None     = []
const Obj_None     = {}
const Str_Space    = " "
const Str_Tab      = "\t"
const Str_Newline  = "\n"
const Str_SQMark   = "'"
const Str_DQMark   = '"'
const Str_OObject  = "{"
const Str_CObject  = "}"
const Str_OArray   = "["
const Str_CArray   = "]"
const Str_Comma    = ","
const Str_SDot     = "."
const Str_DDot     = ":"
const Str_Plus     = "+"
const Str_Minus    = "-"
const Infinity     = Number.MAX_SAFE_INTEGER
//endregion

//region LR_Constants Items Prefixes /!\ respect this convention for the code to work
const Str_PFXROW = "Row_" // row item
const Str_PFXCOL = "Col_" // column item
const Str_PFXCNT = "Cnt_" // container item
const Str_PFXVAL = "Val_" // value item
const Str_PFXDXV = "DxV_" // dot and value item (container)
const Str_PFXDOS = "Dos_" // dosted item
const Str_PFXDOT = "Dot_" // dotted item
const Str_PFXEFF = "Eff_" // effort item
const Str_PFXMOD = "Mod_" // modder item
const Str_PFXMNS = "Mns_" // minus item
const Str_PFXPLS = "Pls_" // plus item
const Str_PFXREP = "Rep_" // repeater item
const Str_PFXCHC = "Chc_" // choice item
const Str_PFXCHK = "Chk_" // standard checkbox item (obsolete ?)
const Str_PFXCKT = "Ckt_" // standard checkbox tooltip (container)
const Str_PFXCKB = "Ckb_" // label checkbox item
const Str_PFXCKY = "Cky_" // label checkbox state
const Str_PFXFLD = "Fld_" // foldering item
const Str_PFXTAB = "Tab_" // tab item
const Str_PFXPRF = "Prf_" // preference item
const Str_PFXCLK = "Clk_" // click item
//endregion
//endregion

//region LR_Elems (LR Components)
//region LR_Elems Getter
function getElem(sheet, item) { // elem of a sheet item
	return sheet.get(item)
}
//endregion

//region LR_Elems Attributes
function getElemItem(elem) { // item is the id (aliases)
	return elem.id()
}
//endregion

//region LR_Elems Values
function getElemValue(elem) {
	const elm_value = elem.value()
	return Number.isNaN(Number(elm_value)) ? // right type
		elm_value : Number(elm_value)
}
function setElemValue(elem, elm_value) {
	return elem.value(elm_value)
}
//endregion

//region LR_Elems Events
const Evt_Click  = "click"
const Evt_Update = "update"
function oneElemDo(elem, evt, do_fct) { // on event
	return elem.on(evt, do_fct)
}
function oncElemDo(elem, do_fct) { // on click
	return oneElemDo(elem, Evt_Click, do_fct)
}
function onuElemDo(elem, do_fct) { // on update
	return oneElemDo(elem, Evt_Update, do_fct)
}
//endregion

//region LR_Elems Css Classes
const Css_DNone			  = "d-none"

function addElemCss(elem, css) { // multiple css allowed in one string
	css.split(Str_Space).forEach(function(css) {
		elem.addClass(css)
	})
	return css
}
function remElemCss(elem, css) { // multiple css allowed in one string
	css.split(Str_Space).forEach(function(css) {
		elem.removeClass(css)
	})
	return css
}
function hasElemCss(elem, css) { // multiple css allowed in one string
	let result = true
	css.split(Str_Space).forEach(function(css) { // every css has to be present
		if (! elem.hasClass(css)) {result = false}
	})
	return result
}
//endregion
//endregion

//region LR_Operators Replace
function rsoValue(str_value, value_one, value_two) { // replace a string once
	return str_value.replace(value_one, value_two)
}
//endregion
//endregion


//region LS_ (LS Library)
//region LS_Constants
//region LS_Constants Sheets
const Sht_Character = "main" // character sheet
//endregion

//region LS_Constants Items (IDs)
const Row_Head         = "Row_Head" // sheet heading
const Clk_PrefSheet    = "Clk_PrefSheet" // preferences trigger
const Cky_PrefSheet    = "Cky_PrefSheet" // preferences state
const Row_Pref         = "Row_Pref" // preferences panel
const Val_Name         = "Val_Name" // character name
const Clk_LockSheet    = "Clk_LockSheet" // locking trigger
const Cky_LockSheet    = "Cky_LockSheet" // locking state
const Chc_TypeDices    = "Chc_TypeDices" // dices type choice
const Chc_RollDices    = "Chc_RollDices" // dices roll choice

// TODO change this
const Ckt_Talent       = "Ckt_Talent" // tooltip
const Ckb_Talent       = "Ckb_Talent" // checkbox

const Row_Characs      = "Row_Characs" // sheet characs
const Ckb_Activity     = "Ckb_Activity" // activity checkbox
const Cky_Activity     = "Cky_Activity" // activity state
const Ckb_SocialRank   = "Ckb_SocialRank" // social rank checkbox
const Cky_SocialRank   = "Cky_SocialRank" // social rank state
const Ckb_Visibility   = "Ckb_Visibility" // roll visibility checkbox
const Cky_Visibility   = "Cky_Visibility" // roll visibility state
const Arr_AllCBoxes    = [
	Ckb_Activity,
	Ckb_SocialRank,
	Ckb_Visibility,
]
const Row_Bio          = "Row_Bio" // bio panel
const Row_Gifts        = "Row_Gifts" // gifts panel
const Row_Possessions  = "Row_Possessions" // possessions panel
const Row_Relations    = "Row_Relations" // relations panel
const Row_Notes        = "Row_Notes" // notes panel
const Col_Bio          = "Col_Bio" // bio column
const Col_Gifts        = "Col_Gifts" // gifts column
const Col_Possessions  = "Col_Possessions" // possessions column
const Col_Relations    = "Col_Relations" // relations column
const Col_Notes        = "Col_Notes" // notes column
const Prf_Bio          = "Prf_Bio" // bio preference
const Prf_Gifts        = "Prf_Gifts" // gifts preference
const Prf_Possessions  = "Prf_Possessions" // possessions preference
const Prf_Relations    = "Prf_Relations" // relations preference
const Prf_Notes        = "Prf_Notes" // notes preference
const Tab_Characs      = "Tab_Characs" // bio tab
const Tab_Bio          = "Tab_Bio" // bio tab
const Tab_Gifts        = "Tab_Gifts" // gifts tab
const Tab_Possessions  = "Tab_Possessions" // possessions tab
const Tab_Relations    = "Tab_Relations" // relations tab
const Tab_Notes        = "Tab_Notes" // notes tab
const Key_TABROW       = { // relation between tab activated and its associed row
	Tab_Characs        : Row_Characs,
	Tab_Bio            : Row_Bio,
	Tab_Gifts          : Row_Gifts,
	Tab_Possessions    : Row_Possessions,
	Tab_Relations      : Row_Relations,
	Tab_Notes          : Row_Notes,
}
const Arr_TAB          = Object.keys(Key_TABROW) // only tab items
//endregion
//endregion

//region LS_Elems
//region LS_Elems Values
function triggerElem(elem) {
	return setElemValue(elem, getElemValue(elem)) // trigger the on update event
}
function toggleElem(elem) {
	return setElemValue(elem, ! getElemValue(elem))
}
function incrementElem(elem) {
	return setElemValue(elem, getElemValue(elem) + 1)
}
function decrementElem(elem) {
	return setElemValue(elem, getElemValue(elem) - 1)
}
//endregion

//region LS_Elems Css Classes
const Css_LSLight = "bg-light text-dark"

function addElemSelected(elem) {
	return addElemCss(elem, Css_LSLight)
}
function remElemSelected(elem) {
	return remElemCss(elem, Css_LSLight)
}
function hasElemSelected(elem) {
	return hasElemCss(elem, Css_LSLight)
}
function addElemDisplayed(elem) {
	return remElemCss(elem, Css_DNone)
}
function remElemDisplayed(elem) {
	return addElemCss(elem, Css_DNone)
}
function hasElemDisplayed(elem) {
	return ! hasElemCss(elem, Css_DNone)
}
//endregion
//endregion
//endregion


init = function(sheet){
	if (sheet.id() === Sht_Character) {initCharacter(sheet)}
}

drop = function(from, to) { // TODO remove ?
    if (from.id() === "caracEdit" && to.id() === "main") {
        return "caracRepeater"
    }
}


function initCharacter(sheet) {
	// initRepair(sheet)
	initCheckboxes(sheet)
	initHead(sheet)
	initCharacs(sheet)
	initTabs(sheet)

	switchSide(sheet)
	launchBtn(sheet)
	options(sheet)
	toggleEdit(sheet)
}

function initRepair(sheet) {
	setElemValue(getElem(sheet, Ckb_Activity), ":ga_check-mark:")
	setElemValue(getElem(sheet, Ckb_SocialRank), ":ga_check-mark:")
}

function initCheckboxes(sheet) {
	Arr_AllCBoxes.forEach(function(ckb_item) { // maintain checkboxes states
		const ckb_elem = getElem(sheet, ckb_item)
		const cky_item = rsoValue(ckb_item, Str_PFXCKB, Str_PFXCKY)
		const cky_elem = getElem(sheet, cky_item)
		oncElemDo(ckb_elem, function(elem) { // toggle related cky elem
			toggleElem(cky_elem)
		})
		onuElemDo(cky_elem, function(elem) { // reflect checkbox state
		// TODO trigger specific functions
			if (getElemValue(elem)) { // doselect checkbox
				addElemSelected(ckb_elem)
			} else { // deselect checkbox
				remElemSelected(ckb_elem)
			}
		})
	})
	triggerElem(getElem(sheet, Cky_Visibility)) // triggers on init
	// TODO add events on characs entries
}

function initHead(sheet) {
	initPref(sheet)
	initName(sheet)
	initLock(sheet)
}

function initPref(sheet) {
	const clk_prefsheet = getElem(sheet, Clk_PrefSheet)
	const cky_prefsheet = getElem(sheet, Cky_PrefSheet)
	const row_pref = getElem(sheet, Row_Pref)
	const row_characs = getElem(sheet, Row_Characs)
	oncElemDo(clk_prefsheet, function(elem) { // toggle pref
		toggleElem(cky_prefsheet)
	})
	onuElemDo(cky_prefsheet, function(elem) { // handle pref visibility
		if (getElemValue(elem)) { // show pref
			addElemSelected(clk_prefsheet)
			addElemDisplayed(row_pref)
			remElemDisplayed(row_characs)
			deselectTabAll(sheet)
		} else { // hide pref
			remElemSelected(clk_prefsheet)
			remElemDisplayed(row_pref)
			addElemDisplayed(row_characs)
			deselectTabAll(sheet)
		}
	})
	triggerElem(cky_prefsheet) // triggers itself on init
	initPrefTabs(sheet)
}

function initPrefTabs(sheet) {
	Arr_TAB.forEach(function(tab_item) { // reflect active tabs
		const clk_item = rsoValue(tab_item, Str_PFXTAB, Str_PFXCLK)
		const clk_elem = getElem(sheet, clk_item)
		const prf_item = rsoValue(tab_item, Str_PFXTAB, Str_PFXPRF)
		const prf_elem = getElem(sheet, prf_item)
		if (getElemValue(prf_elem)) {
			addElemSelected(clk_elem)
		} else {
			remElemSelected(clk_elem)
		}
		oncElemDo(clk_elem, function(elem) { // toggle related prf elem
			toggleElem(prf_elem)
		})
	})
}

function initName(sheet) {
    if (! getElemValue(getElem(sheet, Val_Name))) {
        setElemValue(getElem(sheet, Val_Name), sheet.properName())
    }
}

function initLock(sheet) {
	const clk_locksheet = getElem(sheet, Clk_LockSheet)
	const cky_locksheet = getElem(sheet, Cky_LockSheet)
	oncElemDo(clk_locksheet, function(elem) { // toggle lock
		toggleElem(cky_locksheet)
	})
	onuElemDo(cky_locksheet, function(elem) { // handle lock
		if (getElemValue(elem)) { // lock sheet
			addElemSelected(clk_locksheet)
			log("lock")
		} else { // unlock sheet
			remElemSelected(clk_locksheet)
			log("unlock")
		}
	})
	triggerElem(cky_locksheet) // triggers itself on init
}

function initCharacs(sheet) {
}

function initTabs(sheet) {
	const cky_prefsheet = getElem(sheet, Cky_PrefSheet)
	Arr_TAB.forEach(function(tab_item) {
		const tab_elem = getElem(sheet, tab_item)
		const prf_item = rsoValue(tab_item, Str_PFXTAB, Str_PFXPRF)
		const prf_elem = getElem(sheet, prf_item)
		const col_item = rsoValue(tab_item, Str_PFXTAB, Str_PFXCOL)
		const col_elem = getElem(sheet, col_item)
		oncElemDo(tab_elem, function(elem) { // toggle on click
			if (hasElemSelected(elem)) { // toggle itself
				deselectTab(sheet, tab_item)
			} else { // select another one
				deselectTabAll(sheet)
				doselectTab(sheet, tab_item)
			}
		})
		onuElemDo(prf_elem, function(elem) { // handle tab visibility
			if (getElemValue(elem)) { // show tab
				addElemDisplayed(col_elem)
			} else { // hide tab and deselect it
				remElemDisplayed(col_elem)
				deselectTab(sheet, tab_item)
			}
			initPrefTabs(sheet) // reflect on preferences
		})
		deselectTab(sheet, tab_item) // deselect on init
		triggerElem(prf_elem) // triggers itself on init
	})
	if (! getElemValue(cky_prefsheet)) { // select bio on init if pref is not open
		doselectTab(sheet, Tab_Characs)
	}
}

function doselectTab(sheet, tab_item) { // doselect one tab
	const tab_elem = getElem(sheet, tab_item)
	const row_item = rsoValue(tab_item, Str_PFXTAB, Str_PFXROW)
	const row_elem = getElem(sheet, row_item)
	const prf_item = rsoValue(tab_item, Str_PFXTAB, Str_PFXPRF)
	const prf_elem = getElem(sheet, prf_item)
	if (! getElemValue(prf_elem)) {return} // ignore hidden tabs
	addElemSelected(tab_elem)
	addElemDisplayed(row_elem)
}

function deselectTab(sheet, tab_item) { // deselect one tab
	const tab_elem = getElem(sheet, tab_item)
	const row_item = rsoValue(tab_item, Str_PFXTAB, Str_PFXROW)
	const row_elem = getElem(sheet, row_item)
	const prf_item = rsoValue(tab_item, Str_PFXTAB, Str_PFXPRF)
	const prf_elem = getElem(sheet, prf_item)
	// if (! getElemValue(prf_elem)) {return} // ignore hidden tabs
	remElemSelected(tab_elem)
	remElemDisplayed(row_elem)
}

function deselectTabAll(sheet) { // deselect all tabs
	Arr_TAB.forEach(function(tab_item) {
		deselectTab(sheet, tab_item)
	})
}






const switchSide = function(sheet){
    sheet.get("switchSideSheet").on("click",function(){
        if(sheet.get("idIcone").hasClass("text-dark")){

            sheet.get("idIcone").removeClass("bg-light")
            sheet.get("idIcone").removeClass("text-dark")

            sheet.get("skillIcone").addClass("bg-light")
            sheet.get("skillIcone").addClass("text-dark")

            sheet.get('idSheet').addClass("invisible")
            sheet.get('idSheet').addClass("position-absolute")
            sheet.get('idSheet').addClass("h-25px")

            sheet.get('skillSheet').removeClass("invisible")
            sheet.get('skillSheet').removeClass("position-absolute")
            sheet.get('skillSheet').removeClass("h-25px")

            sheet.get('optionRepeate').removeClass("h-25px")

        }else{

            sheet.get("skillIcone").removeClass("bg-light")
            sheet.get("skillIcone").removeClass("text-dark")

            sheet.get("idIcone").addClass("bg-light")
            sheet.get("idIcone").addClass("text-dark")

            sheet.get('idSheet').removeClass("invisible")
            sheet.get('idSheet').removeClass("position-absolute")
            sheet.get('idSheet').removeClass("h-25px")

            sheet.get('skillSheet').addClass("invisible")
            sheet.get('skillSheet').addClass("position-absolute")
            sheet.get('skillSheet').addClass("h-25px")

            sheet.get('optionRepeate').addClass("h-25px")

        }
    }
)}
const toggleEdit = function(sheet){
    sheet.get("lockEdit").on("click",function(e){
        sheet.get("caracRepeater").addClass('no-edit')
        sheet.get("caracRepeater").addClass('no-add')
        sheet.get("caracRepeater").removeClass('h-200px')
        sheet.get("caracRepeater").addClass('h-150px')
        sheet.get("boxOptionRepeater").removeClass('h-100px')
        sheet.get("boxOptionRepeater").addClass('h-150px')
        sheet.get('optionRepeate').addClass('no-edit')
        sheet.get('optionRepeate').addClass('no-add')
        e.addClass("d-none")
        sheet.get("unlockEdit").removeClass("d-none")
        sheet.get("persoFields").addClass('mt-n5')
        const repeater = sheet.get("caracRepeater")
        each(repeater.value(),function(val,lineId){
            let entry = repeater.find(lineId)
            entry.find("arrowsBtn").addClass("invisible")
            entry.find("caracVal").addClass("d-none")
            entry.find("caracValView").removeClass("d-none")
        })

    })
    sheet.get("unlockEdit").on("click",function(e){
        sheet.get("caracRepeater").removeClass('no-edit')
        sheet.get("caracRepeater").removeClass('no-add')
        sheet.get("caracRepeater").removeClass('h-150px')
        sheet.get("caracRepeater").addClass('h-200px')
        sheet.get("boxOptionRepeater").addClass('h-100px')
        sheet.get("boxOptionRepeater").removeClass('h-150px')
        sheet.get('optionRepeate').removeClass('no-edit')
        sheet.get('optionRepeate').removeClass('no-add')
        e.addClass("d-none")
        sheet.get("lockEdit").removeClass("d-none")
        sheet.get("persoFields").removeClass('mt-n5')
        const repeater = sheet.get("caracRepeater")
        each(repeater.value(),function(val,lineId){
            let entry = repeater.find(lineId)
            entry.find("arrowsBtn").removeClass("invisible")
            entry.find("caracVal").removeClass("d-none")
            entry.find("caracValView").addClass("d-none")
        })
    })
}

const setValView = function(sheet){
    const repeater = sheet.get("caracRepeater")
    each(repeater.value(),function(val,lineId){
        let entry = repeater.find(lineId)
        entry.find("caracValView").value(entry.find("caracVal").value())
        entry.find("caracVal").on("update",function(e){
            entry.find("caracValView").value(e.value())
        })
    })
}

const launchBtn = function(sheet){
    upDownChange(sheet)
    launchDice(sheet)
    setValView(sheet)
    sheet.get("caracRepeater").on("update",function(){
        launchDice(sheet)
        upDownChange(sheet)
        setValView(sheet)
    })
}

const launchDice = function(sheet){
    const repeaterComponent = sheet.get("caracRepeater")
    each (repeaterComponent.value(), function(entryValues, uniqueRandomEntryId){
        let entry = repeaterComponent.find(uniqueRandomEntryId);
        const color = Tables.get("color").get(entry.find("colorView").value()).classBtn
        entry.find("caracViewName").addClass(color)
        entry.find('caracViewName').on('click',function(e){
            let roll = new RollBuilder(sheet);
            //recupération du type d'action et mise en titre
            const diceFace = sheet.get(Chc_TypeDices).value() || '1d4'
            const caracVal = entry.find("caracVal").value() || "0"
            let dice =
            Dice.create(""+caracVal+"")
                .minus(diceFace)
            roll.expression(dice)
            roll.title(e.value())
            roll.roll()
        })
    })
    
}

const upDownChange = function(sheet){
    const repeaterComponent = sheet.get("caracRepeater")
    each (repeaterComponent.value(), function(entryValues, uniqueRandomEntryId){
        let entry = repeaterComponent.find(uniqueRandomEntryId);

        entry.find("caracUpCursor").on("click",function(){
            entry.find("caracVal").value(entry.find("caracVal").value()+1)
        })

        entry.find("caracDownCursor").on("click",function(){
            entry.find("caracVal").value(entry.find("caracVal").value()-1)
             
        })
    })

    const fields = ["hp","storyPoint","energy"]
    each(fields,function(f){
        sheet.get(f+"UpCursor").on("click",function(e){
            const val = Math.max(sheet.get(f+"Val").value(),0)
            sheet.get(f+"Val").value(val+1)
        })

        sheet.get(f+"DownCursor").on("click",function(){
            const val = Math.max(sheet.get(f+"Val").value(),0)
            sheet.get(f+"Val").value(Math.max(val-1,0))
        })
    })
}

const optionAct = function(sheet){
    const repeaterComponent = sheet.get("optionRepeate")
    each (repeaterComponent.value(), function(entryValues, uniqueRandomEntryId){
        let entry = repeaterComponent.find(uniqueRandomEntryId);
        entry.find("optionActivation").setToolTip("Utiliser pour un coût de "+entry.find("optionCost").value())
        Bindings.clear(entry.id())
        const nameOption = entry.find("optionName").value()
        Bindings.add(nameOption,entry.id(),"viewOption",function(){
            return {
                "name":entry.find("optionName").value(),
                "cost":entry.find("optionCost").value(),
                "description":entry.find("optionDescription").value()
            }
        })
        entry.find('optionTrigger').on("click",function(){
            Bindings.send(sheet,nameOption)
        })
        entry.find('optionActivation').on("click",function(){
            if(sheet.get('energyVal').value()>=entry.find("optionCost").value()){
                sheet.get('energyVal').value(sheet.get('energyVal').value()-entry.find("optionCost").value())
                let roll = new RollBuilder(sheet);
                let dice = Dice.create("0d1")
                                .add(entry.find("optionCost").value())
                                .tag("option")
                roll.expression(dice)
                roll.title ("Utilisation de "+entry.find("optionName").value())
                roll.onRoll(function(){})
                roll.roll();
            }
        })
    })
}
const options = function(sheet){
    // optionAct(sheet);
    // sheet.get("optionRepeate").on("mouseenter",function(){
        // optionAct(sheet);
    // })
    // sheet.get("optionRepeate").on("update",function(){
        // optionAct(sheet);
    // })
}
