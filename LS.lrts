//region LR_ (LR Library)
//region LR_Constants
//region LR_Constants Values
const Int_Zero     = 0
const Int_POne     = +1
const Int_MOne     = -1
const Str_Zero     = "0"
const Str_None     = ""
const Arr_None     = []
const Obj_None     = {}
const Str_Space    = " "
const Str_Tab      = "\t"
const Str_Newline  = "\n"
const Str_SQMark   = "'"
const Str_DQMark   = '"'
const Str_OObject  = "{"
const Str_CObject  = "}"
const Str_OArray   = "["
const Str_CArray   = "]"
const Str_Comma    = ","
const Str_SDot     = "."
const Str_DDot     = ":"
const Str_Plus     = "+"
const Str_Minus    = "-"
const Infinity     = Number.MAX_SAFE_INTEGER
//endregion

//region LR_Constants Items Prefixes /!\ respect this convention for the code to work
const Str_PFXROW = "Row_" // row item
const Str_PFXCOL = "Col_" // column item
const Str_PFXCNT = "Cnt_" // container item
const Str_PFXVAL = "Val_" // value item
const Str_PFXVIS = "Vis_" // value representation item
const Str_PFXMIN = "Min_" // min value item
const Str_PFXMAX = "Max_" // max value item
const Str_PFXDXV = "DxV_" // dot and value item (container)
const Str_PFXDOS = "Dos_" // dosted item
const Str_PFXDOT = "Dot_" // dotted item
const Str_PFXEFF = "Eff_" // effort item
const Str_PFXINJ = "Inj_" // inject item
const Str_PFXREJ = "Rej_" // reject item
const Str_PFXMOD = "Mod_" // modder item
const Str_PFXMNS = "Mns_" // minus item
const Str_PFXPLS = "Pls_" // plus item
const Str_PFXADJ = "Adj_" // adjuster item
const Str_PFXDEC = "Dec_" // decrement item
const Str_PFXINC = "Inc_" // increment item
const Str_PFXREP = "Rep_" // repeater item
const Str_PFXCLK = "Clk_" // click item
const Str_PFXCHC = "Chc_" // choice item
const Str_PFXCHK = "Chk_" // standard checkbox item (obsolete ?)
const Str_PFXCKT = "Ckt_" // standard checkbox tooltip (container)
const Str_PFXCKB = "Ckb_" // label checkbox item
const Str_PFXCKY = "Cky_" // label checkbox state
const Str_PFXFLD = "Fld_" // foldering item
const Str_PFXTAB = "Tab_" // tab item
const Str_PFXPRF = "Prf_" // preference item
const Str_PFXLCK = "Lck_" // lock item
//endregion
//endregion

//region LR_Elems (LR Components)
//region LR_Elems Getter
function getElem(sheet, item) { // elem of a sheet item
	return sheet.get(item)
}
//endregion

//region LR_Elems Attributes
function getElemItem(elem) { // item is the id (aliases)
	return elem.id()
}
function getElemChild(elem, child) {
	return elem.find(child)
}
function getElemIndex(elem) {
	return elem.index()
}
//endregion

//region LR_Elems Values
function getElemValue(elem) {
	const elm_value = elem.value()
	return Number.isNaN(Number(elm_value)) ? // right type
		elm_value : Number(elm_value)
}
function setElemValue(elem, elm_value) {
	return elem.value(elm_value)
}
//endregion

//region LR_Elems Events
const Evt_Click  = "click"
const Evt_Update = "update"
function oneElemDo(elem, evt, do_fct) { // on event
	return elem.on(evt, do_fct)
}
function oncElemDo(elem, do_fct) { // on click
	return oneElemDo(elem, Evt_Click, do_fct)
}
function onuElemDo(elem, do_fct) { // on update
	return oneElemDo(elem, Evt_Update, do_fct)
}
//endregion

//region LR_Elems Tooltips
function setElemTooltip(elem, str_tooltip) {
	elem.setToolTip(_(str_tooltip))
}
//endregion

//region LR_Elems Css Classes
const Css_DNone			  = "d-none"

function addElemCss(elem, css) { // multiple css allowed in one string
	css.split(Str_Space).forEach(function(css) {
		elem.addClass(css)
	})
	return css
}
function remElemCss(elem, css) { // multiple css allowed in one string
	css.split(Str_Space).forEach(function(css) {
		elem.removeClass(css)
	})
	return css
}
function hasElemCss(elem, css) { // multiple css allowed in one string
	let result = true
	css.split(Str_Space).forEach(function(css) { // every css has to be present
		if (! elem.hasClass(css)) {result = false}
	})
	return result
}
//endregion
//endregion

//region LR_Operators
//region LR_Operators Replace
function rsoValue(str_value, value_one, value_two) { // replace a string once
	return str_value.replace(value_one, value_two)
}
function rsaValue(str_value, value_one, value_two) { // replace a string all
	return str_value.replaceAll(value_one, value_two)
}
//endregion

//region LR_Operators Cases
function cpaValue(value_one) { // capitalize all
	value_one = value_one.toLowerCase()
	return value_one.replace(/(^\w{1})|(\s+\w{1})/g, function(letter) {
		return letter.toUpperCase()
	})
}
//endregion

//region LR_Operators Sign
function psiValue(value_one) { // plus sign if any
	return value_one >= 0 ?
		"+" + value_one : value_one
}
//endregion
//endregion

//region LR_Repeaters
//whatis repeaters are elems, child/ren are items
//region LR_Repeaters Items
const Row_Edit         = "Row_Edit" // repeater entry edit row
const Row_View         = "Row_View" // repeater entry view row
const Del_Entry        = "Del_Entry" // del repeater entry
const New_Entry        = "New_Entry" // new repeater entry
const Inf_Entry        = "Inf_Entry" // inf repeater entry
//endregion

//region LR_Repeaters Values
function getRepValue(rep) { // get a repeater value
	return getElemValue(rep)
}
function setRepValue(rep, rep_value) { // set a repeater value
	return setElemValue(rep, rep_value)
}
//endregion

//region LR_Repeaters Child/ren
function getRepElemRelative(rep, elem, rel_item) { // get relative elem in the same child
	const rep_index = getElemIndex(elem)
	const rep_child = getRepChild(rep, rep_index)
	const rel_elem  = getElemChild(rep_child, rel_item)
	return rel_elem
}
function getRepChildren(rep) { // get a repeater children (keys)
	return Object.keys(getRepValue(rep))
}
function getRepChild(rep, child) { // get a repeater child (elem)
	return getElemChild(rep, child)
}
function delRepChildren(rep) { // delete all repeater children
	return setRepValue(rep, {})
}
function delRepChildAt(rep, at_child) { // delete one repeater child
	const rep_value    = getRepValue(rep)
	const rep_children = getRepChildren(rep)
	const new_value    = {}
	let   new_child    = 1
	rep_children.forEach(function(child) { // loop on each child
		if (child != at_child) {
			new_value[new_child] = rep_value[child]
			new_child++
		}
	})
	return setRepValue(rep, new_value)
}
function newRepChild(rep, tpl_child) { // add a child template at the end of rep
	const tpl_clone    = Object.assign({}, tpl_child) // /!\ avoid to modify original tpl
	const rep_value    = getRepValue(rep)
	const rep_children = getRepChildren(rep)
	const new_value    = {}
	let   new_child    = 1
	rep_children.forEach(function(child) { // loop on each child
		new_value[new_child] = rep_value[child]
		new_child++
	})
	new_value[new_child] = tpl_clone
	return setRepValue(rep, new_value)
}
function newRepChildAt(rep, at_child, tpl_child) { // add a child template at a child
	const tpl_clone    = Object.assign({}, tpl_child) // /!\ avoid to modify original tpl
	const rep_value    = getRepValue(rep)
	const rep_children = getRepChildren(rep)
	const new_value    = {}
	let   new_child    = 1
	rep_children.forEach(function(child) { // loop on each child
		new_value[new_child] = rep_value[child]
		new_child++
		if (child == at_child) {
			new_value[new_child] = tpl_clone
			new_child++
		}
	})
	return setRepValue(rep, new_value)
}
//endregion

//region LR_Repeaters Edit/View
function doeditRep(rep) { // show only the edit row
	const rep_children = getRepChildren(rep)
	rep_children.forEach(function(child) {
		const rep_child = getRepChild(rep, child)
		const row_edit  = getElemChild(rep_child, Row_Edit)
		const row_view  = getElemChild(rep_child, Row_View)
		addElemDisplayed(row_edit)
		remElemDisplayed(row_view)
	})
}
function doviewRep(rep) { // show only the view row
	const rep_children = getRepChildren(rep)
	rep_children.forEach(function(child) {
		const rep_child = getRepChild(rep, child)
		const row_edit  = getElemChild(rep_child, Row_Edit)
		const row_view  = getElemChild(rep_child, Row_View)
		remElemDisplayed(row_edit)
		addElemDisplayed(row_view)
	})
}
//endregion

//region LR_Repeaters Events
function oneRepItemDo(rep, evt, item, do_fct) { // on event on each rep child item
	const rep_children = getRepChildren(rep)

	rep_children.forEach(function(child) { // loop on each child
		const rep_child = getRepChild(rep, child)
		const elm_child = getElemChild(rep_child, item)
		elm_child.on(evt, do_fct)
	})
}
function oncRepItemDo(rep, item, do_fct) { // on click on each rep child item
	return oneRepItemDo(rep, Evt_Click, item, do_fct)
}
function onuRepItemDo(rep, item, do_fct) { // on update on each rep child item
	return oneRepItemDo(rep, Evt_Update, item, do_fct)
}
//endregion

//region LR_Repeaters Each
function eachRepChildrenDo(rep, do_fct) { // do on each rep child
	const rep_children = getRepChildren(rep)

	rep_children.forEach(function(child) { // loop on each child
		const rep_child = getRepChild(rep, child)
		do_fct(rep_child)
	})
}
function eachRepItemDo(rep, item, do_fct) { // do on each rep child item
	const rep_children = getRepChildren(rep)

	rep_children.forEach(function(child) { // loop on each child
		const rep_child = getRepChild(rep, child)
		const elm_child = getElemChild(rep_child, item)
		do_fct(elm_child)
	})
}
//endregion
//endregion
//endregion


//region LS_ (LS Library)
//region LS_Constants
//region LS_Constants Sheets
const Sht_Character = "main" // character sheet
const Bnd_Gift      = "Bnd_Gift" // gift binding
const Bnd_Charac    = "Bnd_Charac" // charac binding
//endregion

//region LS_Constants Tables
const Tbc_Id             = "id" // tables common id
const Tbl_TypeDices      = "Tbl_TypeDices" // dices types table
const Tbc_RollAdj        = "rolladj" // roll mod adjuster
const Tbl_CharacsColors  = "Tbl_CharacsColors" // caracs colors table
const Tbl_CharacsPresets = "Tbl_CharacsPresets" // caracs presets table
//endregion

//region LS_Constants Presets
const Pst_None = "Pst_None" // none preset
const Pst_PMSC = "Pst_PMSC" // pmsc preset
//endregion

//region LS_Constants Tooltips
const Tip_None        = ""
const Tip_Usable      = "Utiliser"
const Tip_Presets     = "Presets"
const Tip_Description = "Description"
const Tip_Color       = "Couleur"
//endregion

//region LS_Constants Items (IDs)
const Row_Head         = "Row_Head" // sheet heading
const Ckb_PrefSheet    = "Ckb_PrefSheet" // preferences checkbox
const Val_CharName     = "Val_CharName" // character name
const Ckb_LockSheet    = "Ckb_LockSheet" // locking checkbox

const Row_Pref         = "Row_Pref" // preferences panel
const Dft_TypeDices    = "1d10" // default dices type
const Chc_TypeDices    = "Chc_TypeDices" // dices type choice

const Row_Characs      = "Row_Characs" // sheet characs
const Clk_CharacsDel   = "Clk_CharacsDel" // characs del button
const Chc_CharacsPst   = "Chc_CharacsPst" // characs presets choice
const Ckb_CharacsLck   = "Ckb_CharacsLck" // characs lck checkbox
const Clk_CharacsNewL  = "Clk_CharacsNewL" // characs new L button
const Clk_CharacsNewC  = "Clk_CharacsNewC" // characs new C button
const Clk_CharacsNewR  = "Clk_CharacsNewR" // characs new R button
const Ckb_Activity     = "Ckb_Activity" // activity checkbox
const Ckb_SocialRank   = "Ckb_SocialRank" // social rank checkbox
const Row_HealthPts    = "Row_HealthPts" // health pts panel
const Row_NarrationPts = "Row_NarrationPts" // narration pts panel
const Row_RollMod      = "Row_RollMod" // roll modifier panel
const Val_TypeDices    = "Val_TypeDices" // dices type value
const Val_RollAdj      = "Val_RollAdj" // dices mod adjuster value
const Val_RollMod      = "Val_RollMod" // dices mod value
const Row_RollVis      = "Row_RollVis" // roll visibility panel
const Ckb_RollVis      = "Ckb_RollVis" // roll visibility state
const Arr_CharacsRolls = [ // characs roll modifiers
	Ckb_Activity,
	Ckb_SocialRank,
]

const Row_Bio          = "Row_Bio" // bio panel

const Row_Gifts        = "Row_Gifts" // gifts panel
const Clk_GiftsDel     = "Clk_GiftsDel" // gifts del button
const Ckb_GiftsLck     = "Ckb_GiftsLck" // gifts lck checkbox
const Clk_GiftsNew     = "Clk_GiftsNew" // gifts new button
const Row_GiftsPts     = "Row_GiftsPts" // gifts pts panel

const Row_Possessions  = "Row_Possessions" // possessions panel

const Row_Relations    = "Row_Relations" // relations panel

const Row_Notes        = "Row_Notes" // notes panel

const Tab_Characs      = "Tab_Characs" // bio tab
const Tab_Bio          = "Tab_Bio" // bio tab
const Tab_Gifts        = "Tab_Gifts" // gifts tab
const Tab_Possessions  = "Tab_Possessions" // possessions tab
const Tab_Relations    = "Tab_Relations" // relations tab
const Tab_Notes        = "Tab_Notes" // notes tab
const Key_TABROW       = { // relation between tab activated and its associed row
	Tab_Characs        : Row_Characs,
	Tab_Bio            : Row_Bio,
	Tab_Gifts          : Row_Gifts,
	Tab_Possessions    : Row_Possessions,
	Tab_Relations      : Row_Relations,
	Tab_Notes          : Row_Notes,
}
const Arr_TAB          = Object.keys(Key_TABROW) // only tab items
//endregion
//endregion

//region LS_Elems
//region LS_Elems Values
function triggerElem(elem) {
	return setElemValue(elem, getElemValue(elem)) // trigger the on update event
}
function toggleElem(elem) {
	return setElemValue(elem, ! getElemValue(elem))
}
function incrementElemAdj(elem, adj) {
	const elm_value = getElemValue(elem)
	return setElemValue(elem, elm_value + Number(adj))
}
function incrementElem(elem) {
	return incrementElemAdj(elem, 1)
}
function incrementElemMax(elem, max_value) {
	const elm_value = getElemValue(elem)
	if (elm_value >= max_value) {return elm_value}
	return incrementElem(elem)
}
function decrementElemAdj(elem, adj) {
	const elm_value = getElemValue(elem)
	return setElemValue(elem, elm_value - Number(adj))
}
function decrementElem(elem) {
	return decrementElemAdj(elem, 1)
}
function decrementElemMin(elem, min_value) {
	const elm_value = getElemValue(elem)
	if (elm_value <= min_value) {return elm_value}
	return decrementElem(elem)
}
//endregion

//region LS_Elems Css Classes
const Css_LSSelected  = "bg-light text-dark"
const Css_LSInvisible = "invisible"
const Css_LSUsable    = "clickable bg-secondary"
const Str_LSDolocked  = ":lock:"
const Str_LSDelocked  = ":unlock:"

function addElemSelected(elem) {
	return addElemCss(elem, Css_LSSelected)
}
function remElemSelected(elem) {
	return remElemCss(elem, Css_LSSelected)
}
function hasElemSelected(elem) {
	return hasElemCss(elem, Css_LSSelected)
}

function addElemDolocked(elem) {
	setElemValue(elem, _(rsaValue(getElemValue(elem), Str_LSDelocked, Str_LSDolocked)))
	return remElemCss(elem, Css_LSSelected)
}
function remElemDolocked(elem) {
	setElemValue(elem, _(rsaValue(getElemValue(elem), Str_LSDolocked, Str_LSDelocked)))
	return addElemCss(elem, Css_LSSelected)
}
function hasElemDolocked(elem) {
	return ! hasElemCss(elem, Css_LSSelected)
}

function addElemInvisible(elem) {
	return addElemCss(elem, Css_LSInvisible)
}
function remElemInvisible(elem) {
	return remElemCss(elem, Css_LSInvisible)
}
function hasElemInvisible(elem) {
	return hasElemCss(elem, Css_LSInvisible)
}

function addElemDisplayed(elem) {
	return remElemCss(elem, Css_DNone)
}
function remElemDisplayed(elem) {
	return addElemCss(elem, Css_DNone)
}
function hasElemDisplayed(elem) {
	return ! hasElemCss(elem, Css_DNone)
}

function addElemUsable(elem) {
	setElemTooltip(elem, Tip_Usable)
	return addElemCss(elem, Css_LSUsable)
}
function remElemUsable(elem) {
	setElemTooltip(elem, Tip_None)
	return remElemCss(elem, Css_LSUsable)
}
function hasElemUsable(elem) {
	return hasElemCss(elem, Css_LSUsable)
}
//endregion
//endregion

//region LS_Tables
function getTableLineTbc(table, line, tbc) { // get a table line (id) column value
	return Tables.get(table).get(line)[tbc]
}
//endregion

//region LS_Repeaters
//region LS_Repeaters Characs
const Rep_CharacsL     = "Rep_CharacsL" // characs repeater left
const Rep_CharacsC     = "Rep_CharacsC" // characs repeater center
const Rep_CharacsR     = "Rep_CharacsR" // characs repeater right
const Arr_CharacsReps  = [
	Rep_CharacsL,
	Rep_CharacsC,
	Rep_CharacsR,
]
const Row_CharacPts    = "Row_CharacPts" // charac pts panel
const Val_Name         = "Val_Name" // charac name value
const Max_CharacPts    = "Max_CharacPts" // charac max value
const Val_CharacPts    = "Val_CharacPts" // charac actual value
const Val_Talent       = "Val_Talent" // charac talent value
const Ckb_Talent       = "Ckb_Talent" // charac talent checkbox
const Chc_CharacColor  = "Chc_CharacColor" // charac color choice
const Arr_CharacsVals  = [
	Val_Name,
	Val_Talent,
]
const Tpl_Charac       = { // new characs entry template
	Val_Name           : "",
	Max_CharacPts      : 0,
	Val_Talent         : "",
	Chc_CharacColor    : "text-light border-light",
}
const Pst_Characs      = { // characs presets
	Pst_PMSC : { // physique, mental, social, chance preset
		Rep_CharacsL : {
			1 : {
				Val_Name           : "physique",
				Max_CharacPts      : 0,
				Val_Talent         : "",
				Chc_CharacColor    : "text-danger border-danger",
			},
		},
		Rep_CharacsC : {
			1 : {
				Val_Name           : "mental",
				Max_CharacPts      : 0,
				Val_Talent         : "",
				Chc_CharacColor    : "text-primary border-primary",
			},
			2 : {
				Val_Name           : "chance",
				Max_CharacPts      : 0,
				Val_Talent         : "",
				Chc_CharacColor    : "text-warning border-warning",
			},
		},
		Rep_CharacsR : {
			1 : {
				Val_Name           : "social",
				Max_CharacPts      : 0,
				Val_Talent         : "",
				Chc_CharacColor    : "text-success border-success",
			},
		},
	},
}
//endregion

//region LS_Repeaters Gifts
const Rep_Gifts        = "Rep_Gifts" // gifts repeater
const Val_Cost         = "Val_Cost" // gift cost value
const Val_Name         = "Val_Name" // gift name value
const Val_Description  = "Val_Description" // gift description value
const Arr_GiftsVals    = [
	Val_Cost,
	Val_Name,
	Val_Description,
]
const Tpl_Gift         = { // new gifts entry template
	Val_Cost           : 1,
	Val_Name           : "",
	Val_Description    : "",
}
//endregion
//endregion
//endregion


init = function(sheet){
	if (sheet.id() === Sht_Character) {initCharacter(sheet)}
}


function initCharacter(sheet) {
	initPreset(sheet)
	initHead(sheet)
	initTabs(sheet)
	initCharacs(sheet)
	initRoll(sheet)
	initGifts(sheet)
}

//region Preset
function initPreset(sheet) {
	setElemValue(getElem(sheet, Ckb_Activity), ":ga_check-mark:")
	setElemValue(getElem(sheet, Ckb_SocialRank), ":ga_check-mark:")
	setElemValue(getElem(sheet, Ckb_CharacsLck), ":lock: Caracs :lock:")
	setElemValue(getElem(sheet, Ckb_GiftsLck), ":lock: Dons :lock:")
}
//endregion

//region Head
function initHead(sheet) {
	initPref(sheet)
	initCharName(sheet)
	initLock(sheet)
}
//endregion

//region Head Pref
function initPref(sheet) {
	const row_pref      = getElem(sheet, Row_Pref)
	const row_characs   = getElem(sheet, Row_Characs)
	const chc_typedices = getElem(sheet, Chc_TypeDices)
	const val_typedices = getElem(sheet, Val_TypeDices)
	const val_rolladj   = getElem(sheet, Val_RollAdj)

	initCkbDoDe(sheet, Ckb_PrefSheet
		, function(ckb_elem) {
			addElemDisplayed(row_pref)
			remElemDisplayed(row_characs)
			deselectTabAll(sheet)
		}
		, function(ckb_elem) {
			remElemDisplayed(row_pref)
			addElemDisplayed(row_characs)
			deselectTabAll(sheet)
		}
	)
	
	onuElemDo(chc_typedices, function(elem) { // adjust the dices type
		const typedices = getElemValue(chc_typedices)
		setElemValue(val_typedices, typedices)
		setElemValue(val_rolladj, getTableLineTbc(Tbl_TypeDices, typedices, Tbc_RollAdj))
	})
	
	if (! getElemValue(val_typedices)) { // default dices type
		setElemValue(chc_typedices, Dft_TypeDices)
	}

	initPrefTabs(sheet)
}

function initPrefTabs(sheet) {
	Arr_TAB.forEach(function(tab_item) { // reflect active tabs
		const Clk_Item = rsoValue(tab_item, Str_PFXTAB, Str_PFXCLK)
		const clk_elem = getElem(sheet, Clk_Item)
		const Prf_Item = rsoValue(tab_item, Str_PFXTAB, Str_PFXPRF)
		const prf_elem = getElem(sheet, Prf_Item)
		
		if (getElemValue(prf_elem)) {
			addElemSelected(clk_elem)
		} else {
			remElemSelected(clk_elem)
		}
		
		oncElemDo(clk_elem, function(elem) { // toggle related prf elem
			toggleElem(prf_elem)
		})
	})
}
//endregion

//region Head Name
function initCharName(sheet) {
	if (! getElemValue(getElem(sheet, Val_CharName))) {
		setElemValue(getElem(sheet, Val_CharName), sheet.properName())
	}
}
//endregion

//region Head Lock
function initLock(sheet) {
	initCkbDoDe(sheet, Ckb_LockSheet
		, function(ckb_elem) {
			addElemDolocked(ckb_elem)
			dolockCharacs(sheet)
			dolockGifts(sheet)
		}
		, function(ckb_elem) {
			remElemDolocked(ckb_elem)
			delockCharacs(sheet)
			delockGifts(sheet)
		}
	)
}
//endregion

//region Tabs
function initTabs(sheet) {
	const cky_prefsheet = getElem(sheet, rsoValue(Ckb_PrefSheet, Str_PFXCKB, Str_PFXCKY))

	Arr_TAB.forEach(function(tab_item) {
		const tab_elem = getElem(sheet, tab_item)
		const Prf_Item = rsoValue(tab_item, Str_PFXTAB, Str_PFXPRF)
		const prf_elem = getElem(sheet, Prf_Item)
		const Col_Item = rsoValue(tab_item, Str_PFXTAB, Str_PFXCOL)
		const col_elem = getElem(sheet, Col_Item)
		oncElemDo(tab_elem, function(elem) { // toggle on click
			if (hasElemSelected(elem)) { // toggle itself
				deselectTab(sheet, tab_item)
			} else { // select another one
				deselectTabAll(sheet)
				doselectTab(sheet, tab_item)
			}
		})
		onuElemDo(prf_elem, function(elem) { // handle tab visibility
			if (getElemValue(elem)) { // show tab
				addElemDisplayed(col_elem)
			} else { // hide tab and deselect it
				remElemDisplayed(col_elem)
				deselectTab(sheet, tab_item)
			}
			initPrefTabs(sheet) // reflect on preferences
		})
		deselectTab(sheet, tab_item) // deselect on init
		triggerElem(prf_elem) // triggers itself on init
	})
	if (! getElemValue(cky_prefsheet)) { // select bio on init if pref is not open
		doselectTab(sheet, Tab_Characs)
	}
}

function doselectTab(sheet, tab_item) { // doselect one tab
	const tab_elem = getElem(sheet, tab_item)
	const Row_Item = rsoValue(tab_item, Str_PFXTAB, Str_PFXROW)
	const row_elem = getElem(sheet, Row_Item)
	const Prf_Item = rsoValue(tab_item, Str_PFXTAB, Str_PFXPRF)
	const prf_elem = getElem(sheet, Prf_Item)
	if (! getElemValue(prf_elem)) {return} // ignore hidden tabs

	addElemSelected(tab_elem)
	addElemDisplayed(row_elem)
}

function deselectTab(sheet, tab_item) { // deselect one tab
	const tab_elem = getElem(sheet, tab_item)
	const Row_Item = rsoValue(tab_item, Str_PFXTAB, Str_PFXROW)
	const row_elem = getElem(sheet, Row_Item)
	const Prf_Item = rsoValue(tab_item, Str_PFXTAB, Str_PFXPRF)
	const prf_elem = getElem(sheet, Prf_Item)

	remElemSelected(tab_elem)
	remElemDisplayed(row_elem)
}

function deselectTabAll(sheet) { // deselect all tabs
	Arr_TAB.forEach(function(tab_item) {
		deselectTab(sheet, tab_item)
	})
}
//endregion

//region Characs
function initCharacs(sheet) {
	const clk_characsdel  = getElem(sheet, Clk_CharacsDel)
	const col_characsdel  = getElem(sheet, rsoValue(Clk_CharacsDel, Str_PFXCLK, Str_PFXCOL))
	const chc_characspst  = getElem(sheet, Chc_CharacsPst)
	const col_characspst  = getElem(sheet, rsoValue(Chc_CharacsPst, Str_PFXCHC, Str_PFXCOL))
	const ckb_characslck  = getElem(sheet, Ckb_CharacsLck)
	const cky_characslck  = getElem(sheet, rsoValue(Ckb_CharacsLck, Str_PFXCKB, Str_PFXCKY))
	const clk_characsnewl = getElem(sheet, Clk_CharacsNewL)
	const col_characsnewl = getElem(sheet, rsoValue(Clk_CharacsNewL, Str_PFXCLK, Str_PFXCOL))
	const clk_characsnewc = getElem(sheet, Clk_CharacsNewC)
	const col_characsnewc = getElem(sheet, rsoValue(Clk_CharacsNewC, Str_PFXCLK, Str_PFXCOL))
	const clk_characsnewr = getElem(sheet, Clk_CharacsNewR)
	const col_characsnewr = getElem(sheet, rsoValue(Clk_CharacsNewR, Str_PFXCLK, Str_PFXCOL))

	setElemTooltip(chc_characspst, Tip_Presets)
	
	onuElemDo(chc_characspst, function(chc_characspst) { // fillout a preset
		const pst_characs = getElemValue(chc_characspst)
		if (pst_characs == Pst_None) {return} // do nothing

		Object.keys(Pst_Characs[pst_characs]).forEach(function(rep_item) { // loop on reps
			const rep_elem = getElem(sheet, rep_item)
			delRepChildren(rep_elem) // cleanup the repeater
			Object.keys(Pst_Characs[pst_characs][rep_item]).forEach(function(key_item) {
				newRepChild(rep_elem, Pst_Characs[pst_characs][rep_item][key_item])
			})
		})
	})

	initCkbDoDe(sheet, Ckb_CharacsLck // toggle characs lock
		, function(ckb_elem) {
			addElemDolocked(ckb_elem)
			addElemInvisible(col_characsdel)
			addElemInvisible(col_characspst)
			addElemInvisible(col_characsnewl)
			addElemInvisible(col_characsnewc)
			addElemInvisible(col_characsnewr)
			doviewCharacs(sheet)
		}
		, function(ckb_elem) {
			remElemDolocked(ckb_elem)
			remElemInvisible(col_characsdel)
			remElemInvisible(col_characspst)
			remElemInvisible(col_characsnewl)
			remElemInvisible(col_characsnewc)
			remElemInvisible(col_characsnewr)
			doeditCharacs(sheet)
		}
	)

	Arr_CharacsRolls.forEach(function(ckb_item) { // toggle activity & socialrank
		initCkbDoDe(sheet, ckb_item
			, function(ckb_elem) {
				incrementRollMod(sheet)
			}
			, function(ckb_elem) {
				decrementRollMod(sheet)
			}
		)
	})

	oncElemDo(clk_characsdel, function(elem) { // del characs children
		delCharacsChildren(sheet)
	})

	oncElemDo(clk_characsnewl, function(elem) { // new characs children L
		newCharacsChildL(sheet)
	})

	oncElemDo(clk_characsnewc, function(elem) { // new characs children C
		newCharacsChildC(sheet)
	})

	oncElemDo(clk_characsnewr, function(elem) { // new characs children R
		newCharacsChildR(sheet)
	})
	
	initCharacsPts(sheet)
	initCharacsRep(sheet)
	initCharacsRoll(sheet)
}

function delCharacsChildren(sheet) {
	Arr_CharacsReps.forEach(function(rep_item) {
		const rep_elem = getElem(sheet, rep_item)
		delRepChildren(rep_elem)
	})
}

function delCharacsChildAt(sheet, rep_characs, child) { 
	delRepChildAt(rep_characs, child)
}

function newCharacsChild(sheet, rep_characs) {
	newRepChild(rep_characs, Tpl_Charac)
}

function newCharacsChildAt(sheet, rep_characs, child) {
	newRepChildAt(rep_characs, child, Tpl_Charac)
}

function newCharacsChildL(sheet) {
	const rep_characsl = getElem(sheet, Rep_CharacsL)
	newCharacsChild(sheet, rep_characsl)
}

function newCharacsChildC(sheet) {
	const rep_characsc = getElem(sheet, Rep_CharacsC)
	newCharacsChild(sheet, rep_characsc)
}

function newCharacsChildR(sheet) {
	const rep_characsr = getElem(sheet, Rep_CharacsR)
	newCharacsChild(sheet, rep_characsr)
}

function initCharacsPts(sheet) {
	initRowPts(sheet, Row_HealthPts)
	initRowPts(sheet, Row_NarrationPts)
}

function initCharacsRep(sheet) {
	const cky_characslck  = getElem(sheet, rsoValue(Ckb_CharacsLck, Str_PFXCKB, Str_PFXCKY))
	const Vis_Name        = rsoValue(Val_Name, Str_PFXVAL, Str_PFXVIS)

	triggerElem(cky_characslck) // triggers lock to set edit or view mode
	
	Arr_CharacsReps.forEach(function(rep_item) { // loop on repeaters
		const rep_characs = getElem(sheet, rep_item)

		onuElemDo(rep_characs, function(elem) { // handle characs rep modifications
			initCharacsRep(sheet)
		})

		eachRepItemDo(rep_characs, Chc_CharacColor, function(chc_characcolor) {
			setElemTooltip(chc_characcolor, Tip_Color) // tooltip for color choices
		})
	
		Arr_CharacsVals.forEach(function(val_item) { // reflects vals on vis
			const Vis_Item = rsoValue(val_item, Str_PFXVAL, Str_PFXVIS)
			
			onuRepItemDo(rep_characs, val_item, function(val_elem) {
				const vis_elem  = getRepElemRelative(rep_characs, val_elem, Vis_Item)
				const val_value = getElemValue(val_elem)
				let   vis_value = val_item == Max_CharacPts ?
					0 : "" // default value
				vis_value = val_value ?
					val_value : vis_value // no default value, val value instead
				setElemValue(vis_elem, vis_value)
			})
		})
	
		onuRepItemDo(rep_characs, Vis_Name, function(vis_name) { // handle characs usability
			const val_name  = getRepElemRelative(rep_characs, vis_name, Val_Name)

			function setCharacColor(elem) { // set a carac elem color
				const chc_characcolor  = getRepElemRelative(rep_characs, elem, Chc_CharacColor)
				
				Tables.get(Tbl_CharacsColors).each(function(line) { // remove all colors
					const css_color = line[Tbc_Id]
					remElemCss(elem, css_color)
				})
				
				addElemCss(elem, getElemValue(chc_characcolor)) // set the current color
			}

			addElemUsable(vis_name)
			setCharacColor(val_name)
			setCharacColor(vis_name)
			
			onuRepItemDo(rep_characs, Chc_CharacColor, function(chc_characcolor) {
				const val_name  = getRepElemRelative(rep_characs, chc_characcolor, Val_Name)
				const vis_name  = getRepElemRelative(rep_characs, chc_characcolor, Vis_Name)

				setCharacColor(val_name)
				setCharacColor(vis_name)
			})
			
			oncRepItemDo(rep_characs, Vis_Name, function(vis_name) { // click on vis item
				const val_charname   = getElem(sheet, Val_CharName)
				const val_characpts  = getRepElemRelative(rep_characs, vis_name, Val_CharacPts)
				const val_typedices  = getElem(sheet, Val_TypeDices)
				const val_rollmod    = getElem(sheet, Val_RollMod)
				const Cky_RollVis    = rsoValue(Ckb_RollVis, Str_PFXCKB, Str_PFXCKY)
				const str_visibility = getElemValue(getElem(sheet, Cky_RollVis)) ?
					"gmonly" : "visible"
				const rna_charac     = getElemValue(val_charname)
						             + " [" + cpaValue(getElemValue(vis_name))
						             + " [" + psiValue(getElemValue(val_rollmod))
									 + "]"
									 + "]"

				const dice = Dice.create("" + getElemValue(val_characpts) + "")
					.add(getElemValue(val_rollmod))
					.minus(getElemValue(val_typedices))

				const roll = new RollBuilder(sheet)
					.visibility(str_visibility)
					.expression(dice)
					.title(rna_charac)
					.roll()
					
				initRoll(sheet)
			})
		})

		initRepRowPts(rep_characs, Row_CharacPts) // init all pts blocks

		initRepCkbDoDe(rep_characs, Ckb_Talent // init all talent checkboxes
			, function(ckb_elem) {
				incrementRollMod(sheet)
			}
			, function(ckb_elem) {
				decrementRollMod(sheet)
			}
		)
		
		oncRepItemDo(rep_characs, Del_Entry, function(elem) { // child del button
			const child = getElemIndex(elem)
			delCharacsChildAt(sheet, rep_characs, child)
		})
		
		oncRepItemDo(rep_characs, New_Entry, function(elem) { // child new button
			const child = getElemIndex(elem)
			newCharacsChildAt(sheet, rep_characs, child)
		})
		
		oncRepItemDo(rep_characs, Inf_Entry, function(elem) { // child inf button
			const child           = getElemIndex(elem)
			const val_charname    = getElem(sheet, Val_CharName)
			const val_name        = getRepElemRelative(rep_characs, elem, Val_Name)
			const max_characpts   = getRepElemRelative(rep_characs, elem, Max_CharacPts)
			const val_characpts   = getRepElemRelative(rep_characs, elem, Val_CharacPts)
			const val_talent      = getRepElemRelative(rep_characs, elem, Val_Talent)
			const val_rolladj     = getElem(sheet, Val_RollAdj)
			const bna_charac      = getElemValue(val_charname)
								  + " [" + cpaValue(getElemValue(val_name)) + "]"

			Bindings.clear(Inf_Entry)
			Bindings.add(bna_charac, Inf_Entry, Bnd_Charac, function() {
				return {
					Val_Name      : getElemValue(val_name),
					Max_CharacPts : getElemValue(max_characpts),
					Val_CharacPts : getElemValue(val_characpts),
					Val_Talent    : getElemValue(val_talent),
					Val_RollAdj   : getElemValue(val_rolladj),
				}
			})
			Bindings.send(sheet, bna_charac)
		})

		Object.keys(Tpl_Charac).forEach(function(val_item) {
			eachRepItemDo(rep_characs, val_item, function(val_elem) {
				triggerElem(val_elem) // triggers vals to handle vals added by templates
			})
		})
	})

	initRoll(sheet) // cleanup roll modifiers
}

function initCharacsRoll(sheet) {
	initRowModDo(sheet, Row_RollMod // reset roll mod and checkboxes
		, function(clk_elem) {
			initRoll(sheet)
		}
	)
	initCkb(sheet, Ckb_RollVis) // roll visibility gm/all
}

function dolockCharacs(sheet) {
	const cky_characslck = getElem(sheet, rsoValue(Ckb_CharacsLck, Str_PFXCKB, Str_PFXCKY))
	setElemValue(cky_characslck, true)
}

function delockCharacs(sheet) {
	const cky_characslck = getElem(sheet, rsoValue(Ckb_CharacsLck, Str_PFXCKB, Str_PFXCKY))
	setElemValue(cky_characslck, false)
}

function doviewCharacs(sheet) {
	Arr_CharacsReps.forEach(function(rep_item) { // loop on repeaters
		const rep_characs = getElem(sheet, rep_item)
		doviewRep(rep_characs)
	})
}

function doeditCharacs(sheet) {
	Arr_CharacsReps.forEach(function(rep_item) { // loop on repeaters
		const rep_characs = getElem(sheet, rep_item)
		doeditRep(rep_characs)
	})
}
//endregion

//region Roll
function initRoll(sheet) {
	const val_rollmod = getElem(sheet, rsoValue(Row_RollMod, Str_PFXROW, Str_PFXVAL))

	Arr_CharacsRolls.forEach(function(ckb_item) { // cleanup activity & socialrank
		const cky_elem = getElem(sheet, rsoValue(ckb_item, Str_PFXCKB, Str_PFXCKY))
		setElemValue(cky_elem, false)
	})
	
	Arr_CharacsReps.forEach(function(rep_item) { // cleanup all talent checkboxes
		const rep_elem   = getElem(sheet, rep_item)
		const Cky_Talent = rsoValue(Ckb_Talent, Str_PFXCKB, Str_PFXCKY)

		eachRepItemDo(rep_elem, Cky_Talent, function(cky_talent) {
			setElemValue(cky_talent, false)
		})
	})
	
	setElemValue(val_rollmod, 0) // cleanup roll modifier
}

function incrementRollMod(sheet) {
	const val_rollmod = getElem(sheet, rsoValue(Row_RollMod, Str_PFXROW, Str_PFXVAL))
	const val_rolladj = getElem(sheet, Val_RollAdj)
	incrementElemAdj(val_rollmod, getElemValue(val_rolladj))
}

function decrementRollMod(sheet) {
	const val_rollmod = getElem(sheet, rsoValue(Row_RollMod, Str_PFXROW, Str_PFXVAL))
	const val_rolladj = getElem(sheet, Val_RollAdj)
	decrementElemAdj(val_rollmod, getElemValue(val_rolladj))
}
//endregion

//region Gifts
function initGifts(sheet) {
	const rep_gifts    = getElem(sheet, Rep_Gifts)
	const ckb_giftslck = getElem(sheet, Ckb_GiftsLck)
	const cky_giftslck = getElem(sheet, rsoValue(Ckb_GiftsLck, Str_PFXCKB, Str_PFXCKY))
	const clk_giftsdel = getElem(sheet, Clk_GiftsDel)
	const clk_giftsnew = getElem(sheet, Clk_GiftsNew)
	const col_giftsdel = getElem(sheet, rsoValue(Clk_GiftsDel, Str_PFXCLK, Str_PFXCOL))
	const col_giftsnew = getElem(sheet, rsoValue(Clk_GiftsNew, Str_PFXCLK, Str_PFXCOL))

	initCkbDoDe(sheet, Ckb_GiftsLck // toggle gifts losk
		, function(ckb_elem) {
			addElemDolocked(ckb_elem)
			addElemInvisible(col_giftsdel)
			addElemInvisible(col_giftsnew)
			doviewGifts(sheet)
		}
		, function(ckb_elem) {
			remElemDolocked(ckb_elem)
			remElemInvisible(col_giftsdel)
			remElemInvisible(col_giftsnew)
			doeditGifts(sheet)
		}
	)

	oncElemDo(clk_giftsdel, function(elem) { // del gifts children
		delGiftsChildren(sheet)
	})

	oncElemDo(clk_giftsnew, function(elem) { // new gifts children
		newGiftsChild(sheet)
	})
	
	initGiftsPts(sheet)
	initGiftsRep(sheet)
}

function initGiftsPts(sheet) {
	initRowPtsDo(sheet, Row_GiftsPts, initGiftsRep)
}

function initGiftsRep(sheet) {
	const rep_gifts       = getElem(sheet, Rep_Gifts)
	const cky_giftslck    = getElem(sheet, rsoValue(Ckb_GiftsLck, Str_PFXCKB, Str_PFXCKY))
	const val_giftspts    = getElem(sheet, rsoValue(Row_GiftsPts, Str_PFXROW, Str_PFXVAL))
	const pts_value       = getElemValue(val_giftspts)
	const Vis_Cost        = rsoValue(Val_Cost, Str_PFXVAL, Str_PFXVIS)
	const Vis_Name        = rsoValue(Val_Name, Str_PFXVAL, Str_PFXVIS)
	const Vis_Description = rsoValue(Val_Description, Str_PFXVAL, Str_PFXVIS)

	triggerElem(cky_giftslck) // triggers lock to set edit or view mode

	onuElemDo(rep_gifts, function(elem) { // handle gifts rep modifications
		initGiftsRep(sheet)
	})
	
	onuRepItemDo(rep_gifts, Vis_Cost, function(vis_cost) { // handle gifts usability
		const vis_name        = getRepElemRelative(rep_gifts, vis_cost, Vis_Name)
		const vis_description = getRepElemRelative(rep_gifts, vis_cost, Vis_Description)
		const elm_value       = getElemValue(vis_cost)
		if (elm_value <= pts_value) { // can use the gift
			addElemUsable(vis_cost)
			addElemUsable(vis_name)
			addElemUsable(vis_description)
		} else { // cannot use the gift
			remElemUsable(vis_cost)
			remElemUsable(vis_name)
			remElemUsable(vis_description)
		}
	})
	
	Arr_GiftsVals.forEach(function(val_item) {
		const Vis_Item = rsoValue(val_item, Str_PFXVAL, Str_PFXVIS)
		
		onuRepItemDo(rep_gifts, val_item, function(val_elem) { // reflects val on vis
			const vis_elem  = getRepElemRelative(rep_gifts, val_elem, Vis_Item)
			const val_value = getElemValue(val_elem)
			let   vis_value = val_item == Val_Cost ?
				0 : "" // default value
			vis_value = val_value ?
				val_value : vis_value // no default value, val value instead
			setElemValue(vis_elem, vis_value)
		})
		
		oncRepItemDo(rep_gifts, Vis_Item, function(vis_elem) { // click on vis item
			const val_cost = getRepElemRelative(rep_gifts, vis_elem, Val_Cost)
			const pts_cost = getElemValue(val_cost)
			if (! hasElemUsable(vis_elem)) {return} // cannot use
			setElemValue(val_giftspts, pts_value - pts_cost)
		})
	})
	
	oncRepItemDo(rep_gifts, Del_Entry, function(elem) { // child del button
		const child = getElemIndex(elem)
		delGiftsChildAt(sheet, child)
	})
	
	oncRepItemDo(rep_gifts, New_Entry, function(elem) { // child new button
		const child = getElemIndex(elem)
		newGiftsChildAt(sheet, child)
	})
	
	oncRepItemDo(rep_gifts, Inf_Entry, function(elem) { // child inf button
		const child           = getElemIndex(elem)
		const val_charname    = getElem(sheet, Val_CharName)
		const vis_cost        = getRepElemRelative(rep_gifts, elem, Vis_Cost)
		const vis_name        = getRepElemRelative(rep_gifts, elem, Vis_Name)
		const vis_description = getRepElemRelative(rep_gifts, elem, Vis_Description)
		const bna_gift        = getElemValue(val_charname)
						      + " [" + cpaValue(getElemValue(vis_name)) + "]"

		Bindings.clear(Inf_Entry)
		Bindings.add(bna_gift, Inf_Entry, Bnd_Gift, function() {
			return {
				Vis_Cost        : getElemValue(vis_cost),
				Vis_Name        : getElemValue(vis_name),
				Vis_Description : getElemValue(vis_description),
			}
		})
		Bindings.send(sheet, bna_gift)
	})

	eachRepItemDo(rep_gifts, Val_Description, function(val_elem) {
		setElemTooltip(val_elem, Tip_Description) // add a description tooltip
	})

	Object.keys(Tpl_Gift).forEach(function(val_item) {
		eachRepItemDo(rep_gifts, val_item, function(val_elem) {
			triggerElem(val_elem) // triggers vals to handle vals added by templates
		})
	})
}

function dolockGifts(sheet) {
	const cky_giftslck = getElem(sheet, rsoValue(Ckb_GiftsLck, Str_PFXCKB, Str_PFXCKY))
	setElemValue(cky_giftslck, true)
}

function delockGifts(sheet) {
	const cky_giftslck = getElem(sheet, rsoValue(Ckb_GiftsLck, Str_PFXCKB, Str_PFXCKY))
	setElemValue(cky_giftslck, false)
}

function doviewGifts(sheet) {
	const rep_gifts = getElem(sheet, Rep_Gifts)
	doviewRep(rep_gifts)
}

function doeditGifts(sheet) {
	const rep_gifts = getElem(sheet, Rep_Gifts)
	doeditRep(rep_gifts)
}

function delGiftsChildren(sheet) {
	const rep_gifts = getElem(sheet, Rep_Gifts)
	delRepChildren(rep_gifts)
}

function delGiftsChildAt(sheet, child) { 
	const rep_gifts = getElem(sheet, Rep_Gifts)
	delRepChildAt(rep_gifts, child)
}

function newGiftsChild(sheet) {
	const rep_gifts = getElem(sheet, Rep_Gifts)
	newRepChild(rep_gifts, Tpl_Gift)
}

function newGiftsChildAt(sheet, child) {
	const rep_gifts = getElem(sheet, Rep_Gifts)
	newRepChildAt(rep_gifts, child, Tpl_Gift)
}
//endregion

//region Utilities
function initRowPtsDo(sheet, row_item, do_fct) { // init a pts block (clk, max, adj, val)
	const val_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXVAL))

	initRowPts(sheet, row_item) // init clk, max, adj
	
	onuElemDo(val_elem, function(elem) { // react on val modification
		do_fct(sheet)
	})
}

function initRowPts(sheet, row_item) { // init a pts block (clk, max, adj)
	const clk_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXCLK))
	const max_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXMAX))
	const inc_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXINC))
	const dec_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXDEC))
	const val_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXVAL))
	
	oncElemDo(clk_elem, function(elem) { // restore max value
		setElemValue(val_elem, getElemValue(max_elem))
	})
	
	onuElemDo(max_elem, function(elem) { // adjust current value
		setElemValue(val_elem, getElemValue(max_elem))
	})
	
	oncElemDo(inc_elem, function(elem) { // increment current value
		incrementElemMax(val_elem, getElemValue(max_elem))
	})
	
	oncElemDo(dec_elem, function(elem) { // decrement current value
		decrementElemMin(val_elem, 0)
	})
}

function initRowModDo(sheet, row_item, do_fct) { // init a mod block (clk, val, adj)
	const clk_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXCLK))
	const inc_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXINC))
	const dec_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXDEC))
	const val_elem = getElem(sheet, rsoValue(row_item, Str_PFXROW, Str_PFXVAL))
	
	oncElemDo(clk_elem, function(clk_elem) { // triggers fct on click
		do_fct(clk_elem)
	})
	
	oncElemDo(inc_elem, function(elem) { // increment current value
		incrementElem(val_elem)
	})
	
	oncElemDo(dec_elem, function(elem) { // decrement current value
		decrementElem(val_elem)
	})
}

function initCkb(sheet, ckb_item) { // init a checkbox
	const ckb_elem = getElem(sheet, ckb_item)
	const cky_elem = getElem(sheet, rsoValue(ckb_item, Str_PFXCKB, Str_PFXCKY))
	
	oncElemDo(ckb_elem, function(elem) { // toggle related cky elem
		toggleElem(cky_elem)
	})
	
	onuElemDo(cky_elem, function(elem) { // reflect checkbox state
		if (getElemValue(cky_elem)) { // doselect checkbox
			addElemSelected(ckb_elem)
		} else { // deselect checkbox
			remElemSelected(ckb_elem)
		}
	})
	
	triggerElem(cky_elem) // triggers on init
}

function initCkbDoDe(sheet, ckb_item, do_fct, de_fct) { // init a checkbox + fct on do/de
	const ckb_elem = getElem(sheet, ckb_item)
	const cky_elem = getElem(sheet, rsoValue(ckb_item, Str_PFXCKB, Str_PFXCKY))
	
	oncElemDo(ckb_elem, function(elem) { // toggle related cky elem
		toggleElem(cky_elem)
	})
	
	onuElemDo(cky_elem, function(elem) { // reflect checkbox state
		if (getElemValue(cky_elem)) { // doselect checkbox
			addElemSelected(ckb_elem)
			do_fct(ckb_elem) // triggers the doselect fct
		} else { // deselect checkbox
			remElemSelected(ckb_elem)
			de_fct(ckb_elem) // triggers the deselect fct
		}
	})
	
	triggerElem(cky_elem) // triggers on init
}

function initRepRowPts(rep, row_item) { // init a pts block (clk, max, adj) in a repeater
	const Clk_Item = rsoValue(row_item, Str_PFXROW, Str_PFXCLK)
	const Max_Item = rsoValue(row_item, Str_PFXROW, Str_PFXMAX)
	const Inc_Item = rsoValue(row_item, Str_PFXROW, Str_PFXINC)
	const Dec_Item = rsoValue(row_item, Str_PFXROW, Str_PFXDEC)
	const Val_Item = rsoValue(row_item, Str_PFXROW, Str_PFXVAL)

	eachRepItemDo(rep, row_item, function(row_elem) {
		const clk_elem = getRepElemRelative(rep, row_elem, Clk_Item)
		const max_elem = getRepElemRelative(rep, row_elem, Max_Item)
		const inc_elem = getRepElemRelative(rep, row_elem, Inc_Item)
		const dec_elem = getRepElemRelative(rep, row_elem, Dec_Item)
		const val_elem = getRepElemRelative(rep, row_elem, Val_Item)
		
		oncElemDo(clk_elem, function(clk_elem) { // restore max value
			setElemValue(val_elem, getElemValue(max_elem))
		})
		
		onuElemDo(max_elem, function(max_elem) { // adjust current value
			setElemValue(val_elem, getElemValue(max_elem))
		})
		
		oncElemDo(inc_elem, function(inc_elem) { // increment current value
			incrementElemMax(val_elem, getElemValue(max_elem))
		})
		
		oncElemDo(dec_elem, function(dec_elem) { // decrement current value
			decrementElemMin(val_elem, 0)
		})
	})
}

function initRepCkbDoDe(rep, ckb_item, do_fct, de_fct) { // init a rep ckb + fct on do/de
	const Cky_Item = rsoValue(ckb_item, Str_PFXCKB, Str_PFXCKY)

	eachRepItemDo(rep, ckb_item, function(ckb_elem) {
		const cky_elem = getRepElemRelative(rep, ckb_elem, Cky_Item)
		
		oncElemDo(ckb_elem, function(ckb_elem) { // toggle related cky elem
			toggleElem(cky_elem)
		})
		
		onuElemDo(cky_elem, function(cky_elem) { // reflect checkbox state
			if (getElemValue(cky_elem)) { // doselect checkbox
				addElemSelected(ckb_elem)
				do_fct(ckb_elem) // triggers the doselect fct
			} else { // deselect checkbox
				remElemSelected(ckb_elem)
				de_fct(ckb_elem) // triggers the deselect fct
			}
		})
		
		triggerElem(cky_elem) // triggers on init
	})
}
//endregion





const switchSide = function(sheet){
    sheet.get("switchSideSheet").on("click",function(){
        if(sheet.get("idIcone").hasClass("text-dark")){

            sheet.get("idIcone").removeClass("bg-light")
            sheet.get("idIcone").removeClass("text-dark")

            sheet.get("skillIcone").addClass("bg-light")
            sheet.get("skillIcone").addClass("text-dark")

            sheet.get('idSheet').addClass("invisible")
            sheet.get('idSheet').addClass("position-absolute")
            sheet.get('idSheet').addClass("h-25px")

            sheet.get('skillSheet').removeClass("invisible")
            sheet.get('skillSheet').removeClass("position-absolute")
            sheet.get('skillSheet').removeClass("h-25px")

            sheet.get('optionRepeate').removeClass("h-25px")

        }else{

            sheet.get("skillIcone").removeClass("bg-light")
            sheet.get("skillIcone").removeClass("text-dark")

            sheet.get("idIcone").addClass("bg-light")
            sheet.get("idIcone").addClass("text-dark")

            sheet.get('idSheet').removeClass("invisible")
            sheet.get('idSheet').removeClass("position-absolute")
            sheet.get('idSheet').removeClass("h-25px")

            sheet.get('skillSheet').addClass("invisible")
            sheet.get('skillSheet').addClass("position-absolute")
            sheet.get('skillSheet').addClass("h-25px")

            sheet.get('optionRepeate').addClass("h-25px")

        }
    }
)}
const toggleEdit = function(sheet){
    sheet.get("lockEdit").on("click",function(e){
        sheet.get("caracRepeater").addClass('no-edit')
        sheet.get("caracRepeater").addClass('no-add')
        sheet.get("caracRepeater").removeClass('h-200px')
        sheet.get("caracRepeater").addClass('h-150px')
        sheet.get("boxOptionRepeater").removeClass('h-100px')
        sheet.get("boxOptionRepeater").addClass('h-150px')
        sheet.get('optionRepeate').addClass('no-edit')
        sheet.get('optionRepeate').addClass('no-add')
        e.addClass("d-none")
        sheet.get("unlockEdit").removeClass("d-none")
        sheet.get("persoFields").addClass('mt-n5')
        const repeater = sheet.get("caracRepeater")
        each(repeater.value(),function(val,lineId){
            let entry = repeater.find(lineId)
            entry.find("arrowsBtn").addClass("invisible")
            entry.find("caracVal").addClass("d-none")
            entry.find("caracValView").removeClass("d-none")
        })

    })
    sheet.get("unlockEdit").on("click",function(e){
        sheet.get("caracRepeater").removeClass('no-edit')
        sheet.get("caracRepeater").removeClass('no-add')
        sheet.get("caracRepeater").removeClass('h-150px')
        sheet.get("caracRepeater").addClass('h-200px')
        sheet.get("boxOptionRepeater").addClass('h-100px')
        sheet.get("boxOptionRepeater").removeClass('h-150px')
        sheet.get('optionRepeate').removeClass('no-edit')
        sheet.get('optionRepeate').removeClass('no-add')
        e.addClass("d-none")
        sheet.get("lockEdit").removeClass("d-none")
        sheet.get("persoFields").removeClass('mt-n5')
        const repeater = sheet.get("caracRepeater")
        each(repeater.value(),function(val,lineId){
            let entry = repeater.find(lineId)
            entry.find("arrowsBtn").removeClass("invisible")
            entry.find("caracVal").removeClass("d-none")
            entry.find("caracValView").addClass("d-none")
        })
    })
}

const setValView = function(sheet){
    const repeater = sheet.get("caracRepeater")
    each(repeater.value(),function(val,lineId){
        let entry = repeater.find(lineId)
        entry.find("caracValView").value(entry.find("caracVal").value())
        entry.find("caracVal").on("update",function(e){
            entry.find("caracValView").value(e.value())
        })
    })
}

const launchBtn = function(sheet){
    upDownChange(sheet)
    launchDice(sheet)
    setValView(sheet)
    sheet.get("caracRepeater").on("update",function(){
        launchDice(sheet)
        upDownChange(sheet)
        setValView(sheet)
    })
}

const launchDice = function(sheet){
    const repeaterComponent = sheet.get("caracRepeater")
    each (repeaterComponent.value(), function(entryValues, uniqueRandomEntryId){
        let entry = repeaterComponent.find(uniqueRandomEntryId);
        const color = Tables.get("color").get(entry.find("colorView").value()).classBtn
        entry.find("caracViewName").addClass(color)
        entry.find('caracViewName').on('click',function(e){
            let roll = new RollBuilder(sheet);
            //recupération du type d'action et mise en titre
            const diceFace = sheet.get(Chc_TypeDices).value() || '1d4'
            const caracVal = entry.find("caracVal").value() || "0"
            let dice =
            Dice.create(""+caracVal+"")
                .minus(diceFace)
            roll.expression(dice)
            roll.title(e.value())
            roll.roll()
        })
    })
    
}

const upDownChange = function(sheet){
    const repeaterComponent = sheet.get("caracRepeater")
    each (repeaterComponent.value(), function(entryValues, uniqueRandomEntryId){
        let entry = repeaterComponent.find(uniqueRandomEntryId);

        entry.find("caracUpCursor").on("click",function(){
            entry.find("caracVal").value(entry.find("caracVal").value()+1)
        })

        entry.find("caracDownCursor").on("click",function(){
            entry.find("caracVal").value(entry.find("caracVal").value()-1)
             
        })
    })

    const fields = ["hp","storyPoint","energy"]
    each(fields,function(f){
        sheet.get(f+"UpCursor").on("click",function(e){
            const val = Math.max(sheet.get(f+"Val").value(),0)
            sheet.get(f+"Val").value(val+1)
        })

        sheet.get(f+"DownCursor").on("click",function(){
            const val = Math.max(sheet.get(f+"Val").value(),0)
            sheet.get(f+"Val").value(Math.max(val-1,0))
        })
    })
}

const optionAct = function(sheet){
    const repeaterComponent = sheet.get("optionRepeate")
    each (repeaterComponent.value(), function(entryValues, uniqueRandomEntryId){
        let entry = repeaterComponent.find(uniqueRandomEntryId);
        entry.find("optionActivation").setToolTip("Utiliser pour un coût de "+entry.find("optionCost").value())
        Bindings.clear(entry.id())
        const nameOption = entry.find("optionName").value()
        Bindings.add(nameOption,entry.id(),"viewOption",function(){
            return {
                "name":entry.find("optionName").value(),
                "cost":entry.find("optionCost").value(),
                "description":entry.find("optionDescription").value()
            }
        })
        entry.find('optionTrigger').on("click",function(){
            Bindings.send(sheet,nameOption)
        })
        entry.find('optionActivation').on("click",function(){
            if(sheet.get('energyVal').value()>=entry.find("optionCost").value()){
                sheet.get('energyVal').value(sheet.get('energyVal').value()-entry.find("optionCost").value())
                let roll = new RollBuilder(sheet);
                let dice = Dice.create("0d1")
                                .add(entry.find("optionCost").value())
                                .tag("option")
                roll.expression(dice)
                roll.title ("Utilisation de "+entry.find("optionName").value())
                roll.onRoll(function(){})
                roll.roll();
            }
        })
    })
}
const options = function(sheet){
    // optionAct(sheet);
    // sheet.get("optionRepeate").on("mouseenter",function(){
        // optionAct(sheet);
    // })
    // sheet.get("optionRepeate").on("update",function(){
        // optionAct(sheet);
    // })
}
